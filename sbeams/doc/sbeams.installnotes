
Notes installing a new SBEAMS site

$Id$

This document describes how to install a new SBEAMS site.


Terms:
 - SBEAMS: Systems Biology Extensible Analysis Management System
 - SBEAMS site: an independent installation of SBEAMS with its own core tables
 - SBEAMS instance: a version of source code, often for development, which
   shares the core tables with other instances

If you find errors in these installation notes, please report them.
If you have suggestions for making some part of this clearer, please
send them along.  It is recommended that you read this whole document
before delving into it.  It's not simple.  Database installations rarely
are.  Some of these steps could be automated, but it is probably
helpful to do them manually to learn how the systems is set up and
development would proceed.

Typical installation time of this module for an experienced user is 50 minutes.

-------------------------------------------------------------------------------
1) Software Dependencies

The following software programs are required to run SBEAMS:
- Apache or similar web server software
- PHP (There are a few PHP pages, but nothing elaborate.  As long as basic
       PHP works with the web server, this should be fine)
- Perl (probably anything greater than version 5.0 will work)
- A relational database engine.  This software was developed with SQL
  Server.  Products from either Microsoft or Sybase should work right away.
  Attempts has been made to make this software operable with other 
  engines such as Oracle, MySQL, and PostgreSQL, however some further
  development is required to achieve this fully.  If you do so, please
  contribute your changes.

The following Perl Modules often not found on a standard UNIX/Linux
setup are required before installation can begin.  Version numbers are
for what is used for development; older or newer versions may work:

Authen::Smb           (For Windows Domain Authentication instead of UNIX auth)
Crypt::CBC
Crypt::IDEA
Data-ShowTable-3.3b  (specially modified version by Deutsch and included)
DBD-Sybase           (assuming Sybase or MS SQL Server is back end)
DBD-????             (if you are using a different type of back end RDBMS)
DBI
GD
GDGraph-1.35a        (specially modified version by Deutsch and included)
GDGraph-XY-0.92
GDTextUtil-0.84
Regexp::Common
XML::Parser

Some versions of perl may require the following module be installed
URI

Additional common Perl modules are needed, but may not be on your system.
Should really write a little dependency checker program.  FIXME.

---------------
The following non-Perl software is required:

FreeTDS              (required by DBD-Sybase only. Allows UNIX -> MSSQL/Sybase)
libgd                (required by GD Perl modules)

---------------
Certain modules (Proteomics) also require the following Perl modules:

Proteomics:
  PDL
  PDL::Graphics::PGPLOT


-------------------------------------------------------------------------------
2) Installation Location

SBEAMS is designed to live entirely in the "htdocs" area of your Apache
web server.  For the remainder of this installation, it will be assumed
that your installation is configured as follows; compensate for your
specific setup:
  servername: db
  DocumentRoot: /local/www/html
  Primary location: directly located in DocumentRoot,
                   /local/www/html/sbeams  --> http:/db/sbeams/
  Development location: In a dev1 tree starting in the DocumentRoot,
                   /local/www/html/dev1/sbeams  -> http:/db/dev1/sbeams/

There is typically significant ongoing development in an SBEAMS environment
and it is recommended that all development work be done in a devN area
which is then sync'ed with the primary area when changes are tested.  This
is so users can continue to use the stable version until new features have
passed testing. Please note that directory names for dev areas must
conform to the following standard: "devN" or "devCC", where N is a digit
[0-9], and C is a letter [a-z,A-Z].

A Discussion of File Ownerships:
At a site with several developers, it is recommended that a generic
software maintenance account be created, who owns the production code
area and that each individual developer owns his or her development area.
For example,
  /local/www/html/sbeams/ owned by the sbeams account
  /local/www/html/dev1/sbeams/ owned by the user1 account
  /local/www/html/dev2/sbeams/ owned by the user2 account
Developers need only log into the sbeams account to "roll out" code
to production (from CVS is recommended).  All development is done by each
user in their area.  Finished changes are checked into CVS and rolled out
to production using the sbeams account. Smaller sites with one developer
may choose to have everything owned by one person.  It is not recommended
that the code be owned by root.  Since you are the installer, your
account is what is referred to above as "user1".


-------------------------------------------------------------------------------
3) Configure Apache

(root access probably required)

Include in Apache's httpd.conf file the following execution permissions:

#------
<Location /sbeamscommon>
    deny from all
</Location>


<Location /sbeams/cgi>
    Options ExecCGI
    SetHandler cgi-script
</Location>

<Location /sbeams/lib>
    deny from all
</Location>

<Location /sbeams/var>
    deny from all
</Location>


<Location /dev1/sbeams/cgi>
    Options ExecCGI
    SetHandler cgi-script
</Location>

<Location /dev1/sbeams/lib>
    deny from all
</Location>

<Location /dev1/sbeams/var>
    deny from all
</Location>
#------


Restart the Apache server, perhaps with something like:
  /etc/rc.d/init.d/httpd restart
or:
  /etc/init.d/apache2 restart


-------------------------------------------------------------------------------
4) Unpack files and set up misc directories and links

Do as much of this as possible as a regular user account, i.e. yours.

cd /local/www/html
mkdir dev1   (this may need to be done as root. then do: chown user1 dev1)
cd dev1
tar -zxvf ~/sbeams-0.20.tar.gz

Create a sbeamscommon directory for sharing dynamic files between
different instances and create symlinks:

cd ..
mkdir sbeamscommon

  (for now, just create the directories for stuff to live in right here, but
   it may be a good idea to make a sym link to another location or partition
   since there could eventually be large amounts of data here!!!)
cd sbeamscommon
mkdir images images/tmp
mkdir lib lib/conf
chmod a+w images/tmp
mkdir var var/resultsets var/logs var/upload
chmod g+w var/resultsets var/logs var/upload

cd ..
cd dev1/sbeams
ln -s includes doc/includes
rm -Rf var
ln -s ../../sbeamscommon/var
ln -s ../../sbeamscommon/images/tmp images/tmp

For now, duplicate the main site from dev1, but eventually when there is
parallel development and production usage, these should be separate trees
kept in sync with CVS or some other such tool.

(may require root privilege)
cd ../..
cp -a dev1/sbeams sbeams

rm sbeams/var
ln -s sbeamscommon/var sbeams/var
rm sbeams/images/tmp
ln -s sbeamscommon/images/tmp sbeams/images/tmp
cp sbeams/lib/conf/SBEAMS.conf.template sbeamscommon/lib/conf/SBEAMS.conf
ln -s sbeamscommon/lib/conf/SBEAMS.conf sbeams/lib/conf/SBEAMS.conf
ln -s sbeamscommon/lib/conf/SBEAMS.conf dev1/sbeams/lib/conf/SBEAMS.conf

-------------------------------------------------------------------------------
5) Edit the SBEAMS Configuration files

This is an important step!  If you do not set the configurations for your
site properly, you will have trouble later!

setenv SBEAMS /local/www/html/dev1/sbeams

cd $SBEAMS/lib/conf


The passwords needed to connect to the database are stored encrypted in the
SBEAMS.conf file.  You will need to generate the encrypted versions at this
point.  Run the encryption script as follows:

note that all SBEAMS scripts use /usr/local/bin/perl.  If you do not
have a /usr/local/bin/perl, it is highly recommended that you create
a sym link from /usr/local/bin/perl to your actual perl, e.g.:
ln -s /usr/bin/perl /usr/local/bin/perl.  If this is not practical given the 
way your system is configured, see troubleshooting guide for suggestions on systematically changing the path to perl for your scripts.


$SBEAMS/lib/scripts/Core/encryptDbPasswd.pl -p <DB_PASSWORD? -c SBEAMS.conf

Where DB_PASSWORD is the password to encrypt, and CONF_FILE is the location
of the SBEAMS.conf file that you want to use.  The script will print out a 
hexadecimal string that you can place in the SBEAMS.conf file as per below.
You will need passwords for the normal and read_only accounts for this
installation (by default sbeams and sbeamsro).

edit SBEAMS.conf

Important changes:
- Be sure to change WWW_UID to reflect the UID of the account running the
  Apache web server.  This might be accounts like 'apache', 'nobody',
  'httpd', etc.  If you're confounded, try:
  egrep "apache|httpd|nobody" /etc/passwd | sort
  The number after the first colon is the WWW_UID.  
    or
  ps -ef | egrep "apache|httpd|nobody|www"
  To see what username (first column) is runn your web server.  
  
- Change the CRYPT_KEY to some random strings for your site

- Change HOSTNAME to reflect the web server's name.  If the site is in
  an Apache virtual server, use the virtual server name

- Change DBADMIN to reflect your environment.  The DBADMIN
  name should reflect your real name like John Smith <jsmith@foo.org>

- You may ignore CYTOSCAPE_URL for first-time installations

- Change the DB_* settings to reflect the default RDBMS on which the SBEAMS
  databases will reside and the accounts that will access them.  For DB_PASS
  and DB_RO_PASS, use the encrypted versions generated above.

- Uncomment the DB_DRIVER that matches your RDBMS.  MS SQL Server uses the
  Sybase driver. Do not alter the DB_DRIVER values unless you know what
  you're doing!!  Set the DB_TYPE to reflect your RDBMS.

- Uncomment the DB_TYPE to match your RDBMS. Do not change the spelling.

- Change DBPREFIX{*} to reflect the absolute locations of your tables.  For
  RDBMS systems that use schemas or users, DBPREFIX{Core} will likely be
  something like "sbeams.dbo." or "sbeams.Core." while with RDBMSs that do not
  support such features (like MySQL), use just "sbeams.".  The trailing
  period is probably necessary except in rare cases.  Most table name
  references will be prefixed with these strings.  For starters, all that's
  important is DBPREFIX{Core}.  The others do not need to be set to real values
  until you wish to set up one of those modules, although you will need to leave 
  in some default definition to avoid errors.

- Set RAW_DATA_DIR{*} to a directory location where data products
  related to a given module are located.  For example, you might store
  your Proteomics SEQUEST searches in /data3/proteomics/archive or similar.
  If you're not sure about this yet, you can ignore for now.

- Below this are sections for the individual instances for your site.
  You probably only need to change the PHYSICAL_BASE_DIR and UPLOAD_DIR
  sections. Set PHYSICAL_BASE_DIR to the place where you installed SBEAMS.
  Set the UPLOAD_DIR to a location where uploaded data files may be stored.
  This directory should be owned by the Web Server User (or the Web Server
  User should have write privilege).

- Note that you can override all of the settings in the [default] section
  (including DB_SERVER, DB_PREFIX{*}, etc.) to set certain dev instances
  to point to different locations.  For example, dev2 might point to a
  completely different RDBMS server or different databases for major
  development, while dev1 might point to all the live databases for
  final testing, or one dev instance may use the sbeams core database
  but point to a different database for one of the modules (for
  testing), etc.

This should allow for a fairly flexible development and production
environment.


-------------------------------------------------------------------------------
6) Create and populate the database

SBEAMS is being developed on SQL Server and should work quite easily
with either the Sybase or Microsoft versions.  Attempts are being made
to make it work equally well with DB2, Oracle, PostgreSQL, and MySQL;
it's pretty close to working well, but this is not finished so please
contribute to this effort if you try different RDBMS engines.

(You can skip the following 3 steps if you already have a database and login.
 No need to create "sbeams" dB. Use existing login/pwd for both accounts.)

- First, create a database called 'sbeams' or 'sbeamsdev' or similar
  (whatever was referred to in the SBEAMS.conf DBPREFIX{Core} setting)

- Within it, create users "sbeams" and "sbeamsro" as a read/write
  account and a read-only account, respectively.

- You will also need to create an administration account, "sbeamsadmin".
  This account should be the one used to make changes to the schema, i.e.
  create, update, and drop tables and constraints.

- Generate the appropriate schema for your type(s) of database as follows:

(logged in as your account ("user1" above))
(and working in the dev1 area - this is a good habit)

setenv SBEAMS /local/www/html/dev1/sbeams
set DBTYPES="mssql"   #### or one or more of mssql mysql pgsql oracle etc.
cd $SBEAMS/lib/scripts/Core

foreach dbtype ( $DBTYPES )
  ./generate_schema.pl --table_prop ../../conf/Core/Core_table_property.txt \
  --table_col ../../conf/Core/Core_table_column.txt --schema_file \
  ../../sql/Core/Core --destination_type $dbtype
end


- Verify that the SQL CREATE and DROP statements have been correctly
  generated in $SBEAMS/lib/sql/Core/

- Edit the bottom of the $SBEAMS/lib/sql/Core/Core_POPULATE.mssql file
  to include entries for *you* and *your* local username on the SBEAMS
  server.  Give yourself an encrypted temporary password in the SQL
  statements, generated as described the following paragraph.

A Discussion of Passwords:

There are four possibilities for SBEAMS passwords.  The preferred
method for larger sites is to create SBEAMS usernames that match NIS
accounts or Windows domain accounts.  If there exists an SBEAMS
account with a NULL password, the authenticator attempts to run
/bin/ypmatch passwd to try to match a NIS password.  If this does not
produce success, then the supplied Windows domain account is tested.
Although not currently fully coded, it would be possible to use local
UNIX/Linux account passwords; however, this may be severely hampered
by the fact that most modern UNIX/Linux systems use /etc/shadow files
that cannot be read by normal users to hold the encrypted passwords.
There are possible workarounds, but they are not part of the
distribution.  The final possibility is to set a password manually in
the SBEAMS tables.  Only UNIX crypted passwords should be placed in
the tables, never plain passwords.  This may be the best solution for
small sites with only a few users.  You can create encrypted passwords
with the $SBEAMS/lib/scripts/Core/crypt.pl

A Discussion of the 'admin' account:
You should never use the admin account.  At one time, logging into the
admin account seemed like a good idea, but it no longer is.  Rather,
persons who will administer the site should be given Administrator
privileges over the necessary data.  The benefit here is that all
changes are tracked as the user who performed them and situations
where multiple people have "admin" account access and thus changes
cannot be traced to a person are avoided.  The admin account remains
as the owner of various records but other Administrators can modify
those records if necessary, so logging in as admin is discouraged.


- Execute the statements below to create and populate the database with some
  bare bones data where the SBEAMS database has been set:

$SBEAMS/lib/scripts/Core/runsql.pl Core_CREATETABLES.mssql
$SBEAMS/lib/scripts/Core/runsql.pl Core_POPULATE.mssql
$SBEAMS/lib/scripts/Core/runsql.pl Core_CREATECONSTRAINTS.mssql


You should now be able to log in via the web interface, either as the
"admin" account (if you set a password above; not recommended) or with
your user account you added to Core_POPULATE.mssql.  Test your installation
by pointing a browser to the proper location like:

http://db.localdomain.org/dev1/sbeams/

You should see a welcome page with a link inviting a login.  Click there
and you should be challenged with a login page.  Once you login,
don't try to do anything else with the web interface yet; we're not
fully configured yet!

If this doesn't work.  Do not proceed, debug first.

If your password is no accepted, reread the password section above and
try to determine the reason for failure.


-------------------------------------------------------------------------------
7) Populate the driver tables

Logged in as your account (that has a matching SBEAMS account configured
in the Core_POPULATE.mssql file), run the following:

cd $SBEAMS/lib/scripts/Core
set CONFDIR = "../../conf"
./update_driver_tables.pl $CONFDIR/Core/Core_table_property.txt
./update_driver_tables.pl $CONFDIR/Core/Core_table_column.txt

If this doesn't work.  Do not proceed, debug first.

Now that the Core driver tables are loaded, you should be able to
go to the web site again and click on the "Admin" link at the bottom of
the left Nav Bar and explore the tables.  Do not try to run any of the
individual modules yet; they are not configured.

If this doesn't work.  Do not proceed, debug first.


-------------------------------------------------------------------------------
8) Populate core database tables

- Organism table:
cd $SBEAMS/lib/refdata/Core
../../scripts/Core/DataImport.pl --source_file organism.xml

If this doesn't work.  Do not proceed, debug first.


Enable the "Tools" module, which is not really a module, but an extension
to the Core:

cd $SBEAMS/lib/conf/Core
grep '^#' Modules.conf > AvailableModules.conf
echo "Tools" >> AvailableModules.conf



-------------------------------------------------------------------------------
9) Build the POD docs

cd $SBEAMS/doc/POD
./createPOD.csh


-------------------------------------------------------------------------------
10) Install required Modules

Follow the install notes for any required modules, currently BioLink.

SBEAMS/doc/BioLink/BioLink.installnotes

-------------------------------------------------------------------------------
11) Install Individual Modules

Now follow the individual module install notes, e.g.:

$SBEAMS/doc/Proteomics/Proteomics.installnotes

-------------------------------------------------------------------------------
Troubleshooting:

1) All of the setup and cgi scripts use /usr/local/bin/perl as the interpreter.  If
your system doesn't have perl installed there, you have can either create a 
symbolic link from your version of perl to /usr/local/bin, you can install a
new version of perl at that location, or you can modify the #! lines of any 
affected files.  If the following commands are run from the base of your sbeams 
installation they will change the perl from /usr/local/bin/perl to /usr/bin/perl:

find . -name '*.pl' -exec perl -pi -e 's/(\/usr\/)local\/(bin\/perl)/$1$2/' {} \;
find . -name '*.cgi' -exec perl -pi -e 's/(\/usr\/)local\/(bin\/perl)/$1$2/' {} \;

2) As of version 1.70, there may be a problem if the UID of the user executing the
script is the same as the WWW_UID.  If your system requires this setting, 
( generally because the web server is being run by a non-privileged user) it 
is suggested you temporarily set the WWW_UID to another value while running the
setup scripts; once run, you can restore the WWW_UID setting.  If the UIDs are 
not the same this is not an issue.  

3) The --schema_file argument of generate_schema.pl is both a path and a prefix for 
naming the various files created.  If you simply give a path, you will see files such
as _CREATTABLES.mssql instead of Module_CREATETABLES.mssql.  If the command is executed
from the destination directory, need only define filename prefix.
