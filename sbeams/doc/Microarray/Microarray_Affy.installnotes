
Notes installing the SBEAMS - Microarray_Affy module

Background)

ISB developed the microarray module to initially deal with organizing and analyzing 
2-color data from arrays printed in-house.  Starting around July 2004, development started to
extended the Microarray module to organize and analyze the Affymetrix Expression array data.
The install instructions are for setting up just the Affy portion of the module.  You may notice that 
some tables and links are not utilized by the Affy portion of the Microarray module but are still visible 
since both the 2-color and Affy array infrastructure were built out within the same sbeams module.


-------------------------------------------------------------------------------
1) Software and module Dependencies

You must first install the SBEAMS Core.  See the separate installation
notes (sbeams.installnotes) on how to accomplish that. You must also
install the BioLink module; follow the installation instructions
provided with that module first (BioLink.installnotes).


The following Perl Modules often not found on a standard UNIX/Linux
setup are required to successfully use SBEAMS - Microarray_Affy (in addition
to the dependencies for the SBEAMS Core).

XML::LibXML;
Tie::IxHash;
XML::Writer
Archive::Zip
Statistics::R [Optional] Not used in production code.  Only used in a test script Make_R_graph.cgi to demonstrate making a 
	 	graph in using R and Perl
---------------
The following non-Perl software is required:

R -Version 2.0 or greater
R -Bioconductor libraries, see below 
 library(affy)
 library(gcrma)
 library(vsn)

 library(Biobase)
 library(multtest)
 library(annaffy)
 library(webbioc)

 library(siggenes)


-------------------------------------------------------------------------------
2) Installation Location

SBEAMS is designed to live entirely in the "htdocs" area of your Apache
web server.  For the remainder of this installation, it will be assumed
that your installation is configured as follows; compensate for your
specific setup:
  servername: db
  DocumentRoot: /local/www/html
  Primary location: directly located in DocumentRoot,
                   /local/www/html/sbeams  --> http://db/sbeams/
  Development location: In a dev1 tree starting in the DocumentRoot,
                   /local/www/html/dev1/sbeams  -> http://db/dev1/sbeams/

All modules live in the same area and should be unpacked into the
main SBEAMS area.



-------------------------------------------------------------------------------
3) Create and populate the database

It is assumed that you have already created and tested your SBEAMS Core
database.  You may either create a separate database for the Microarray_Affy
database or you can put everything in the same database.

Note that some database engines (rare now) may not permit
cross-database queries in which case your may NOT use separate
databases.  If you do use separate databases, you may not be able to
enforce referential integrity between tables in the different
databases.  This may or may not be a significant concern.

- If you decide on a separate database, create it and within it,
  create users "sbeams" and "sbeamsro" as a read/write
  account and a read-only account, respectively, as done for the Core.

- Generate the appropriate schema for your type(s) of database as follows:

setenv SBEAMS /local/html/dev1/sbeams
cd $SBEAMS/lib/scripts/Core

foreach dbtype ( mssql mysql pgsql oracle )
  ./generate_schema.pl \
    --table_prop ../../conf/Microarray/Microarray_table_property.txt \
    --table_col ../../conf/Microarray/Microarray_table_column.txt \
    --schema_file ../../sql/Microarray/Microarray \
    --destination_type $dbtype
end


- Verify that the SQL CREATE and DROP statements have been correctly
  generated in $SBEAMS/lib/sql/Microarray/

- Execute the statements to create and populate the database with some
  bare bones data and indexes (for faster loading and querying):

SQL Server Example:

To CREATE and POPULATE:
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_CREATETABLES.mssql -D sbeamsdev
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_POPULATE.mssql -D sbeamsdev
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_CREATECONSTRAINTS.mssql -D sbeamsdev

To CREATE indexes:
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_CREATEINDEXES.mssql -D sbeamsdev

To CREATE Manual Constraints (Constraints that could not be auto-generated)
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_ADD_MANUAL_CONSTRAINTS.mssql

To DROP:
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_DROPCONSTRAINTS.mssql -D sbeamsdev
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_DROPTABLES.mssql -D sbeamsdev
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_DROPINDEXES.sql
sqsh -i $SBEAMS/lib/sql/Microarray/Microarray_DROP_MANUAL_CONSTRAINTS.mssql

Note that the Microarray_POPULATE.mssql is not auto-generated and should
probably work for all flavors of database

Examples for table creation for other database flavors can be found in the
Core installation notes and will not be repeated here.

Notes:
A few warnings or errors might be seen while creating the tables and constraints.  The ones
below should be considered normal
#Table not used by the Affy Portion of the module
Error: Foreign key 'fk_array_request_sample_array_request_slide_id' references invalid table 'dbo.MA_array_request_MA_slide'.
#In order for some of the linking table to display correctly on some of the web forms
#the conf file was altered to know how to do certain things.  As a side affect it produced
# a few incorrect sql statements
Error: Column 'dbo.sample_protocol.sample_protocol_id' is not the same data type as referencing column 'array_request_sample.protocol_ids' in foreign key 'fk_array_request_sample_protocol_ids'.
Error: Column 'dbo.affy_array_sample_protocol.affy_array_sample_protocol_id' is not the same data type as referencing column 'affy_array_sample.affy_sample_protocol_ids' in foreign key 'fk_affy_array_sample_affy_sample_protocol_ids'.
Error: Column 'dbo.affy_array_protocol.affy_array_protocol_id' is not the same data type as referencing column 'affy_array.affy_array_protocol_ids' in foreign key 'fk_affy_array_affy_array_protocol_ids'.
#Sizes does not matter..
W (1): Warning: The table 'file_location' has been created but its maximum row size (8080) exceeds the maximum number of bytes per row (8060). INSERT or UPDATE of a row in this table will fail if the resulting row length exceeds 8060 bytes.

-------------------------------------------------------------------------------
Data storage locations and naming conventions

ISB Affymetrix Core facility name it's files with the following convention

All Files generated by the core facility CEL, CHP, XML, RPT files all use the common root name
YYYYMMDD_DD_<SAMPLE_NAME>.<ext>
YYYYMMDD = Date array was scanned
DD       = Unique Scan Number per Day ie 01, 02, 03....
Sample_name = User Sample Name, No Spaces or strange characters

Data Location.
All the data is located within one folder divided into folder named
YYYYMM - <Year><Month>

For external dataset download we have a folder "external" within the main data repository and individual 
experiments to be loaded are separated into a user defined folder

A cron job can be setup (see below) to keep monitoring the default directory for any new files to be uploaded

For inital setup make the following folders
mkdir $SBEAMS/tmp \
$SBEAMS/tmp/Microarray \
$SBEAMS/tmp/Microarray/AFFY_ANNO_LOGS \
$SBEAMS/var \
$SBEAMS/var/Microarray \
$SBEAMS/var/Microarray/Affy_data \
$SBEAMS/var/Microarray/Affy_data/probe_data \
$SBEAMS/var/Microarray/Affy_data/probe_data/external \
$SBEAMS/var/Microarray/Affy_data/delivery \
$SBEAMS/var/Microarray/Affy_data/annotation

chgrp -R sbeams $SBEAMS/tmp; chgrp -R sbeams $SBEAMS/var
chmod -R g+s $SBEAMS/tmp; chmod -R g+s $SBEAMS/var;

-------------------------------------------------------------------------------
4-1) Edit the SBEAMS Configuration files

setenv SBEAMS /local/www/html/dev1/sbeams

cd $SBEAMS/lib/conf
edit SBEAMS.conf

Specifically:

DBPREFIX{Microarray_Affy}    = microarray.dbo.


4-2) Edit the SBEAMS Microarray/Settings.pm file

cd $SBEAMS/lib/perl/SBEAMS/Microarray
edit Settings.pm

Specifically: use the default folders created above and tweak the perl variables
to look like the lines below

$AFFY_DEFAULT_DIR	    = "$PHYSICAL_BASE_DIR/var/Microarray/Affy_data/probe_data";
$BIOCONDUCTOR_DELIVERY_PATH = "$PHYSICAL_BASE_DIR/var/Microarray/Affy_data/delivery";
$ADD_ANNOTATION_OUT_FOLDER  = "$PHYSICAL_BASE_DIR/tmp/Microarray/Add_affy_annotation";

  Notes: $AFFY_DEFAULT_DIR = Full path to a folder that will house all Affy CEL files
  	 $BIOCONDUCTOR_DELIVERY_PATH = Location that all analysis results will be written to
	 $ADD_ANNOTATION_OUT_FOLDER  = Location that errors from loading affy annotation files will be kept 
	 			        
  Notes: The web server user will need read access to the CEL file folders and read/write access to the 
	 $BIOCONDUCTOR_DELIVERY_PATH folder



-------------------------------------------------------------------------------
5) Populate the driver tables and register the module

cd $SBEAMS/lib/scripts/Core
set CONFDIR = "../../conf"
./update_driver_tables.pl $CONFDIR/Microarray/Microarray_table_property.txt
./update_driver_tables.pl $CONFDIR/Microarray/Microarray_table_column.txt
./update_driver_tables.pl $CONFDIR/Microarray/Microarray_table_column_manual.txt

If this doesn't work.  Do not proceed, debug first.

-Register the module:
cd $SBEAMS/lib/conf/Core
echo Microarray >> AvailableModules.conf

-------------------------------------------------------------------------------
6) Add groups

Log in via the web interface as a user with Administrator privileges,
switch to the Admin group using the pull-down menu at the top, and add
three work groups:
[SBEAMS Home] [Admin] [Manage Work Groups] [Add Work Group]
Add entries for (exactly as shown!):
  Microarray_user
  Microarray_admin
  Microarray_readonly
(Note that after INSERTing the first, you can click [Back], edit the previous
information slightly, and click [INSERT] to add another.)

Microarray_admin has privilege over all tables in the Microarray
module, while the Microarray_user only has access to certain tables
and may often not modify other users records.  The Microarray_readonly
group is a separate group for looky loos.

Now go to [Manage User Group Associations], [Add ...], and add
yourself and whoever else to these groups as appropriate.

Now set up the table group securities:
  rowprivate - Microarray_user - data_writer
  rowprivate - Microarray_admin - data_writer
  rowprivate - Microarray_readonly - data_writer
  project - Microarray_user - data_writer
  project - Microarray_admin - data_modifier
  arrays - Microarray_user - data_writer
  arrays - Microarray_admin - data_modifier


Now that the Microarray driver tables are loaded, and the groups have been
established, you should be able to go to the web site again and click on
SBEAMS - Microarray and explore the tables.  They're all going to be empty,
but you shouldn't get any errors, just empty resultsets.

If this doesn't work.  Do not proceed, debug first.


-------------------------------------------------------------------------------
7) Add some sample data

########################
Test Data Background
- Using  a small subset of data (6 of 158 arrays) from http://wombat.gnf.org/

########################
- Unpack the data and annotation file and copy them to the data folders
cd $SBEAMS/lib/refdata/Microarray
gunzip Human_test_data.tar.gz
tar -xvf Human_test_data.tar
 
- Make the folder to hold the CEL files
mkdir $SBEAMS/var/Microarray/Affy_data/probe_data/external/Human_test

- Move the the CEL files And info file to the test folder
mv ./Human_test_data/*.CEL $SBEAMS/var/Microarray/Affy_data/probe_data/external/Human_test/.
mv ./Human_test_data/Master_info_file_test_data.txt $SBEAMS/var/Microarray/Affy_data/probe_data/external/Human_test

-Move the annotation file to annotation directory
mv ./Human_test_data/HG-U133A_annot.csv $SBEAMS/var/Microarray/Affy_data/annotation/.

########################
(logged in as your user account)

Add a Project as follows:

- Switch to the Microarray_user group by using the drop-down box at top
- Click on [SBEAMS Home]
- Under "My Projects" tab, click [Add A New Project].
  Required fields are in red.  If you don't have a budget number, enter NA.
- Make a project using the following information
   Project Name: "Human Gene Atlas"
   Project Tag:  "GeneAtlas_human"
   Description:  "Human microarray data from novartis research foundation's Gene Atlas project
   http://wombat.gnf.org/"
- Fill in the appropriate information and click [INSERT]

########################
Add An Array Type
- Switch to the Microarray_admin group by using the drop-down box at top
- Switch to the the Microarray Module, Click On [Microarray]
- At the bottom of the page, on the Navigation bar click on [Slide Type/Costs] button
- Click On [Add Slide Type]
- Fill in the Data
   Name: "HG-U133A"
   Organism: "Human"
########################
Add Server Info
- Some of the scripts and database tables keep track of files.
- Open the url for the database you are working on.
- The url should be almost the same for the ones above for adding an array, but the TABLE_NAME will = MA_server
http://<server_name>/sbeams/cgi/Microarray/ManageTable.cgi?TABLE_NAME=MA_server
- Enter the server name
- Click [Insert]


########################
Add the external dbxref data

- Add external database id's to dbxref table within the core first.  This data is used to make urls to external
databases
- (Only do this if they have not been loaded via some other SBEAMS Module

cd $SBEAMS/lib/scripts/Core

./DataImport.pl --source_file ../../refdata/Microarray/dbxref.xml

########################
Add the Annotation for this array type

- Annotation are downloaded from Affymetrix on quarterly basis.
- Use the script to upload the annotation into SBEAMS

cd $SBEAMS/lib/scripts/Microarray
./load_affy_annotation_files.pl --run_mode update \
--file_name $SBEAMS/var/Microarray/Affy_data/annotation/HG-U133A_annot.csv

It could take about 10-15 minutes to upload the data...


########################
Add the external arrays to the database

- Adding external arrays is a two step process.
- All the sample annotation is first collected in a "master_info" file which is just a tab
  delimited file.
- This file is then parsed to produce a info_file for each CEL file to be uploaded
- See Below on how to upload data from a MAGE-XML file produced by the Affymetrix GCOS software


- View the template on how to make a master_info file.  [Not need for this example, the info file already exists]
$SBEAMS/usr/Microarray/Example_master_upload_template.xls

- Run the script to parse the master_info file
cd $SBEAMS/lib/scripts/Microarray
./Pre_process_affy_info_file.pl --run_mode make_new \
--info_file $SBEAMS/var/Microarray/Affy_data/probe_data/external/Human_test/Master_info_file_test_data.txt

- Run the script to upload the data into SBEAMS
- This script will scan the default data directory (set in the Settings file) looking for new data
 cd $SBEAMS/lib/scripts/Microarray
 ./load_affy_array_files.pl --run_mode add_new





########################
Array specific things
	
Insert a project into core

Add Protocols
Add Arrays

Load Annotation
Load Arrays

Run R_CHP


Setting up batch Scheduler

 TODO Make up a test data set

########################
Add an Instrument as follows:

- Switch to the Microarray_admin group by using the drop-down box at top
- Click on [Microarray_ Home]
- Click on [Request Management] (under Core Management)
- Click on [Manage Instrument Types]
- Click on [Add Instrument Type]
- Fill in the appropriate information and [INSERT]

- Click on [Manage Instruments]
- Click on [Add Instrument]
- Fill in the appropriate information and [INSERT]


Add an Experiment Type as follows:
- Click on [Microarray Home]
- Click on [Request Management] (under Core Management)
- Click on [Add Experiment Type]
- Fill in the appropriate information and [INSERT]


Add an Experiment as follows:

- Switch back to the Microarray_Affy_user group by using the drop-down box at top
- Click on [Microarray_Affy Home]
- Click on the Project you just created
- Click [Register another Experiment]
- Fill in the appropriate information and [INSERT]


-------------------------------------------------------------------------------
8) Test the Microarray_Affy command line functionality

- Populate the dbxref table:

cd $SBEAMS/lib/scripts/Core

./DataImport.pl --source_file ../../refdata/Microarray_Affy/dbxref.xml


- Load a biosequence set:

cd $SBEAMS/lib/scripts/Microarray_Affy

./load_biosequence_set.pl --check

./load_proteomics_experiment.pl --list

These two programs should list the entries for the BioSequence Set and
Experiment you have loaded above.

Now try loading a biosequence set:

./load_biosequence_set.pl --set_tag YeastORF

This should load the biosequence set called YeastORF.  Replace YeastORF with
the tag of your Biosequence Set as defined in step 7.

If this doesn't work.  Do not proceed, debug first.


-------------------------------------------------------------------------------
9) Add a Gradient Program

If you didn't already in step 7 as part of adding an experiment add a
gradient program, it is recommended that you do so now.  It is not necessary.


-------------------------------------------------------------------------------
10) Load the data products for a sample experiment.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
Troubleshooting

1) How to re-generate and update table schemas

- Drop table and (firstly) its constraints, via SQL commands. Look under 
  DOMAIN_DROPCONSTRAINTS.mssql and DOMAIN_DROPTABLES.mssql.
  e.g. look under Core_DROPCONSTRAINTS.mssql and Core_DROPTABLES.mssql

- Edit the appropriate $DOMAIN_table_column.txt file
  e.g. make a field in conf/Core/Core_table_property.txt nullable=N

- Generate new schema files using generate_schema.pl
  e.g.  cd $SBEAMS/lib/scripts/Core
	./generate_schema.pl \
          --table_prop ../../conf/Core/Core_table_property.txt \
          --table_col ../../conf/Core/Core_table_column.txt \
          --schema_file ../../sql/Core/Core \
          --destination_type mssql

- Now re-create table and its constraints using the new (updated) ll.
  e.g. look under Core_CREATETABLES.mssql and Core_CREATECONSTRAINTS.mssql

- Populate the table, if required.
  e.g. look in Core_POPULATE.mssql

-------------------------------------------------------------------------------
2) 
