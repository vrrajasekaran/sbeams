#!/usr/local/bin/perl

###############################################################################
# Program     : PASS_View
# $Id: GetPeptide 6798 2011-07-05 21:35:27Z tfarrah $
#
# Description : PeptideAtlas Submission System main dataset viewer page
#
# SBEAMS is Copyright (C) 2000-2005 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
#
###############################################################################


###############################################################################
# Set up all needed modules and objects
###############################################################################
use strict;
use Getopt::Long;
use FindBin;

use POSIX qw(ceil);

use lib "$FindBin::Bin/../../lib/perl";
use vars qw ($sbeams $sbeamsMOD $q $current_contact_id $current_username
             $PROG_NAME $USAGE %OPTIONS $QUIET $VERBOSE $DEBUG $DATABASE
             $TABLE_NAME $PROGRAM_FILE_NAME $CATEGORY $DB_TABLE_NAME
             @MENU_OPTIONS);
##use CGI::Carp qw(fatalsToBrowser croak);

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::TabMenu;
use SBEAMS::Connection::Utilities;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::PeptideAtlas::ConsensusSpectrum;
use SBEAMS::PeptideAtlas::ModificationHelper;
use SBEAMS::PeptideAtlas::Utilities;

use SBEAMS::Proteomics::Tables;

$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);
my $modification_helper = new SBEAMS::PeptideAtlas::ModificationHelper();

my $current_page = { organism => '', atlas_build_id => '' };

#$q = new CGI;


###############################################################################
# Set program name and usage banner for command like use
###############################################################################
$PROG_NAME = $FindBin::Script;
$USAGE = <<EOU;
Usage: $PROG_NAME [OPTIONS] key=value key=value ...
Options:
  --verbose n         Set verbosity level.  default is 0
  --quiet             Set flag to print nothing at all except errors
  --debug n           Set debug flag

 e.g.:  $PROG_NAME [OPTIONS] [keyword=value],...

EOU

#### Process options
unless (GetOptions(\%OPTIONS,"verbose:s","quiet","debug:s")) {
  print "$USAGE";
  exit;
}

$VERBOSE = $OPTIONS{"verbose"} || 0;
$QUIET = $OPTIONS{"quiet"} || 0;
$DEBUG = $OPTIONS{"debug"} || 0;

if ($DEBUG) {
  print "Options settings:\n";
  print "  VERBOSE = $VERBOSE\n";
  print "  QUIET = $QUIET\n";
  print "  DEBUG = $DEBUG\n";
}

     my @datasetTypes = ( 'MSMS' => 'MS/MS dataset',
			  'SRM' => 'SRM dataset',
			  'MS1' => 'MS1 dataset',
			  'QC' => 'Ongoing QC dataset',
			  'Other' => 'Other',
			);

###############################################################################
# Set Global Variables and execute main()
###############################################################################
main();
exit(0);


###############################################################################
# Main Program:
#
# Call $sbeams->Authenticate() and exit if it fails or continue if it works.
###############################################################################
sub main {

    #### Do the SBEAMS authentication and exit if a username is not returned
    exit unless ($current_username = $sbeams->Authenticate(
        permitted_work_groups_ref=>['PeptideAtlas_user','PeptideAtlas_admin',
        'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
        #connect_read_only=>1,
        allow_anonymous_access=>1,
    ));

    #### Read in the default input parameters
    my %parameters;
    my $n_params_found = $sbeams->parse_input_parameters(
        q=>$q,
        parameters_ref=>\%parameters
        );

    #### Decide what action to take based on information so far
    if (defined($parameters{filename}) && $parameters{filename} ne '') {
      handle_request(ref_parameters=>\%parameters);
    } else {
        my $project_id = $sbeamsMOD->getProjectID(
            atlas_build_id => $parameters{atlas_build_id}
        );

        $sbeamsMOD->display_page_header(project_id => $project_id,
				                                init_tooltip => 1);

        handle_request(ref_parameters=>\%parameters);

        $sbeamsMOD->display_page_footer();
    }
    $sbeams->profile_sql( list => 0 );

} # end main


###############################################################################
# Handle Request
###############################################################################
sub handle_request {

  my %args = @_;
  $log->debug( "Start page " . time() );

  #### Process the arguments list
  my $ref_parameters = $args{'ref_parameters'}
      || die "ref_parameters not passed";

  my %parameters = %{$ref_parameters};

  my $output_mode = $sbeams->output_mode();
  if (defined($parameters{filename}) && $parameters{filename} ne '') {
    $output_mode = 'direct';
  }


  #### Show current user context information
  print "<BR>\n" if ($output_mode eq 'html');
  #$sbeams->printUserContext();

  #### Get the HTML to display the tabs
  my $tabMenu = $sbeamsMOD->getTabMenu(
     parameters_ref => \%parameters,
     program_name => $PROG_NAME,
  ) if ($output_mode eq 'html');

  print $tabMenu->asHTML() . '<BR>' if ($output_mode eq 'html');


  #### Define some generic variables
  my ($i,$element,$key,$value,$line,$result,$sql);

  #### Define some variables for a query and resultset
  my %resultset = ();
  my $resultset_ref = \%resultset;
  my (%url_cols,%hidden_cols,%max_widths,$show_sql);


  #### Read in the standard form values
  my $action  = $parameters{'action'} || $parameters{'apply_action'};
  #print "action='$action'<BR>\n";

  my $TABLE_NAME = $parameters{'QUERY_NAME'};

  #### Set some specific settings for this program
  my $CATEGORY="PASS_View";
  my $PROGRAM_FILE_NAME = $PROG_NAME;
  my $base_url = "$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME";
  my $help_url = "$CGI_BASE_DIR/help_popup.cgi";


  #### Check the session cookie for a PASS_emailaddress
  my $cachedEmailAddress = $sbeams->getSessionAttribute( key => 'PASS_emailAddress' );
  my $cachedPassword = $sbeams->getSessionAttribute( key => 'PASS_xx' );
  my $emailAddress = $parameters{'emailAddress'};
  $emailAddress = $cachedEmailAddress if (!$emailAddress && $cachedEmailAddress);
  my $password = $parameters{'password'};
  $password = $cachedPassword if (!$password && $cachedPassword);
  my $firstName;
  my $lastName;

  #### Compile any error we encounter in an array
  my @errors;


  #### If the request was to LOGOUT, then purge everything
  if ($action =~ /LOGOUT/i ) {
    $sbeams->setSessionAttribute( key => 'PASS_emailAddress', value => '' );
    $sbeams->setSessionAttribute( key => 'PASS_xx', value => ''  );
    $emailAddress = '';
    $password = '';
  }


  #### See if we're already logged in
  my $authentication;
  if ($emailAddress && $password) {
    $authentication = authenticateUser(emailAddress=>$emailAddress,password=>$password);
    if ($authentication->{result} eq 'Success') {
      $firstName = $authentication->{firstName};
      $lastName = $authentication->{lastName};
    }
  }


  #### Check authentication parameters and warn of any problems
  if ($action =~ /SUBMIT/i || $action =~ /LOGIN/i ) {
    unless ($emailAddress) {
      push(@errors,"The submitter email address is not filled in");
    }
    unless ($password) {
      push(@errors,"The submitter password is not filled in");
    }
  }


  #### Check authentication parameters and warn of any problems
  if ($action =~ /LOGIN/i && ! @errors ) {
    if ($authentication->{result} eq 'Success') {
      $sbeams->setSessionAttribute( key => 'PASS_emailAddress', value => $emailAddress );
      $sbeams->setSessionAttribute( key => 'PASS_xx', value => $password  );
    } else {
      push(@errors,@{$authentication->{errors}});
    }
  }


  #### If a dataset identifier was supplied, get the metadata for this dataset
  #### and check to see if current user is the owner
  my $datasetIdentifier = $parameters{'identifier'};
  my $datasetMetadata;
  my $isOwner = 0;
  my $isAccessible = 0;
  my $isAdmin = 0;
  if ($datasetIdentifier) {
    $datasetMetadata = getPASSMetaData(identifier=>$datasetIdentifier);
    if ($datasetMetadata->{result} eq 'Success' && $emailAddress eq $datasetMetadata->{emailAddress}) {
      $isOwner = 1;
      $isAccessible = 1;
    } elsif ($parameters{datasetPassword} && $datasetMetadata->{datasetPassword} eq $parameters{datasetPassword}) {
      $isAccessible = 1;
    } else {
      my ($date) = `date '+%F'`;
      chomp($date);
      #print "Is '$date' ge '$datasetMetadata->{publicReleaseDate}'?<BR>\n";
      if ($datasetMetadata->{publicReleaseDate} && substr($date,0,10) ge substr($datasetMetadata->{publicReleaseDate},0,10)) {
	#print "INFO: Current date '$date' is greater than release date '$datasetMetadata->{publicReleaseDate}'<BR>\n";
	$isAccessible = 1;
      }
    }

    #### If the current session is logged in via SBEAMS as a user with Admin rights, set flag
    if ($sbeams->isAdminUser(current_group=>0)) {
      $isAccessible = 1;
      $isAdmin = 1;
    }
    push(@errors,@{$datasetMetadata->{errors}}) if ($datasetMetadata->{errors});

  }


  #### If the desired action was to finalize the dataset
  if ($action eq "FINALIZE" && ! @errors ) {
    if ( ( $authentication->{result} eq 'Success' &&
           $emailAddress eq $datasetMetadata->{emailAddress} ) || $isAdmin) {
      finalizeDataset(
	authentication=>$authentication,
	identifier=>$parameters{'identifier'},
        emailAddress=>$datasetMetadata->{emailAddress},
      );
      $datasetMetadata = getPASSMetaData(identifier=>$datasetIdentifier);
    } else {
      push(@errors,@{$authentication->{errors}}) if ($authentication->{errors});
    }
  }


  #### If the desired action was to finalize the dataset
  if ($action eq "UNFINALIZE" && ! @errors ) {
    if ( ( $authentication->{result} eq 'Success' &&
           $emailAddress eq $datasetMetadata->{emailAddress} ) || $isAdmin) {
      unFinalizeDataset(
	authentication=>$authentication,
	identifier=>$parameters{'identifier'},
        emailAddress=>$datasetMetadata->{emailAddress},
      );
      $datasetMetadata = getPASSMetaData(identifier=>$datasetIdentifier);
    } else {
      push(@errors,@{$authentication->{errors}}) if ($authentication->{errors});
    }
  }


  #### If the desired action was to reset the password
  if ($action eq 'SET' && ! @errors ) {
    if (($authentication->{result} eq 'Success' && $isOwner) || $isAdmin) {
      my $result = setNewDatasetPassword(
        authentication => $authentication,
        identifier => $parameters{'identifier'},
        newDatasetPassword => $parameters{'newDatasetPassword'},
      );
      if ($result->{errors}) {
	push(@errors,@{$result->{errors}});
      }
      $datasetMetadata = getPASSMetaData(identifier=>$datasetIdentifier);
    } else {
      push(@errors,@{$authentication->{errors}}) if ($authentication->{errors});
    }
  }


  #### If the desired action was to reset the Public Release Date
  if ($action eq 'SETDATE' && ! @errors ) {
    if (($authentication->{result} eq 'Success' && $isOwner) || $isAdmin) {
      my $result = setNewPublicReleaseDate(
        authentication => $authentication,
        identifier => $parameters{'identifier'},
        newPublicReleaseDate => $parameters{'newPublicReleaseDate'},
      );
      if ($result->{errors}) {
	push(@errors,@{$result->{errors}});
      }
      $datasetMetadata = getPASSMetaData(identifier=>$datasetIdentifier);
    } else {
      push(@errors,@{$authentication->{errors}}) if ($authentication->{errors});
    }
  }


  #### Logging
  $log->debug( "end param handling " . time() );


  if (defined($parameters{filename}) && $parameters{filename} ne '') {
    unless ($isAccessible) {
      print "Content-type: text/plain\n\n";
      print "ERROR: This file is not accessible\n";
      return;
    }
    showFile(identifier=>$datasetIdentifier,
      baseURL=>$base_url,
      browseArea=>$parameters{browseArea},
      path=>$parameters{path},
      filename=>$parameters{filename},
    );
    return;
  }




  #########################################################################
  #### Print the form
  if ($sbeams->output_mode() eq 'html') {
     print "<H3>View Dataset</H3>";

     if (@errors) {
     print "<HR>\n";
       print "<TABLE cellpadding=\"5\"><TR><TD bgcolor=\"#ff9999\">";
       foreach my $error ( @errors ) {
	 print "<LI>$error\n";
       }
       print "</TD></TR></TABLE>\n";
     }


     print "<HR>\n";
     print "<nobr>";
     print $q->start_form(-method=>"POST",
                          -action=>"$base_url",
                          -name=>"MainForm",
			 );

     if ($isAdmin) {
       my $current_username = $sbeams->getCurrent_username;
       print "<B><font color=\"blue\">Your SBEAMS authentication is $current_username, which has Admin rights. Viewing in Admin mode</B></font><BR>\n";
     }


     if ($authentication->{result} eq 'Success') {
       print "<B><font color=\"red\">Welcome $firstName $lastName</B></font>\n";
       print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
       print $q->submit(-name => "action",
			-value => 'LOGOUT',
			-label => 'LOGOUT');
     } else {

       print "<B>Email address</B>\n";
       print qq~<input type="text" name="emailAddress" value="$emailAddress" size=50 maxlength=80/>~;
       print "&nbsp;&nbsp;&nbsp;&nbsp;\n";

       print "<B>Password</B>";
       print qq~<input type="password" name="password" value="$password" size=10 maxlength=50/>~;
       print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";

       print $q->submit(-name => "action",
			-value => 'LOGIN',
			-label => 'LOGIN');
     }
     print "<BR>\n";

     print "<B><font color=\"red\">Dataset Identifier</B></font>\n";
     print $q->textfield( "identifier", $datasetIdentifier, 10, 10);

     if (! $isAccessible || $parameters{datasetPassword}) {
       print "<B>Dataset Password</B>\n";
       print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
       print qq~<input type="password" name="datasetPassword" value="$parameters{datasetPassword}" size=10 maxlength=10/>~;
     }

     print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
     print $q->submit(-name => "action",
		      -value => 'VIEW',
		      -label => 'VIEW');
     print "<BR>\n";
     print "<HR>\n";

     unless ($datasetIdentifier) {
       print "<BR><BR>Please provide a dataset identifier above and click [View].<P>";
       return;
     }
     if (@errors) {
       print "<BR><BR>Please provide a valid dataset identifier above and click [View].<P>";
       return;
     }

     unless ($isAccessible) {
       print "<BR><BR>$datasetIdentifier is not accessible with current credentials.<P>";
       print "If you are the owner of this dataset and have not logged in, please provide credentials above.<P>";
       print "The dataset is scheduled to become public on $datasetMetadata->{publicReleaseDate}, at which point you can access it.<P>";
       print "To access the dataset in advance of this date, enter the dataset password if it has been given to you,<BR>or you may contact the dataset owner $datasetMetadata->{submitterStr} to request the dataset password.<P>";
       return;
     }

     if ($parameters{browseArea}) {
       print "<BR>\n";
       print "<a href=\"$base_url?identifier=$datasetIdentifier\">Back to main dataset view</a>\n";
       print "<BR>\n";
       print DisplayPASSDirListing(identifier=>$datasetIdentifier,
         baseURL=>$base_url,
         browseArea=>$parameters{browseArea},
         path=>$parameters{path},
       );
       return(1);
     }


     if ($datasetMetadata->{result} eq 'Success' &&
         ($emailAddress eq $datasetMetadata->{emailAddress}) || $isAdmin) {
       if ($datasetMetadata->{finalizedDate}) {
       } else {
         print "<B><font color=\"red\">Notice:</B></font> This dataset has not yet been marked as finalized!<BR>";
         print "If the upload is now done and you are happy with the result: ";
         print $q->submit(-name => "action",
		      -value => 'FINALIZE',
		      -label => 'FINALIZE');
         print "<BR>\n";
         print "<HR>\n";
       }
     } else {
     }


     #### Display the password if the user is the owner or an admin
     if ($isOwner || $isAdmin) {
       print "<B><font color=\"blue\">datasetPassword:</B></font> $datasetMetadata->{datasetPassword}";
       print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
       print "change to ";
       print qq~<input type="password" name="newDatasetPassword" value="" size=10 maxlength=10/>~;
       print $q->submit(-name => "action",
			-value => 'SET',
			-label => 'SET');
       print "<BR>\n";

       print "<font color=\"blue\"><B>Reset publicReleaseDate</B></font> ";
       my $publicReleaseDate = substr($datasetMetadata->{publicReleaseDate},0,10);
       print qq~<input type="text" name="newPublicReleaseDate" value="$publicReleaseDate" size=10 maxlength=10/>~;
       print $q->submit(-name => "action",
			-value => 'SETDATE',
			-label => 'SETDATE');
       print qq~
         <SCRIPT LANGUAGE="JavaScript">
         function ClickedTodayButton(input_field) {
           today = new Date();
           month = today.getMonth()+1;
           if (month < 10) { month = "0" + month; }
           date = today.getDate();
           if (date < 10) { date = "0" + date; }
           date_value =
             today.getFullYear() + "-" + month + "-" + date;
           document.MainForm.newPublicReleaseDate.value = date_value;
           return;
         }
         </SCRIPT>
       ~;
       print "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
       print qq~<INPUT TYPE="button" NAME="publicReleaseDateToday_button" VALUE="TODAY" onClick="ClickedTodayButton(newPublicReleaseDate)">\n~;

       if ($datasetMetadata->{finalizedDate}) {
         print "<BR><B><font color=\"blue\">This dataset has been finalized, which means the data cannot be changed now. However, as the owner, you may </B></font>";
         print $q->submit(-name => "action",
	  		  -value => 'UNFINALIZE',
		  	  -label => 'UNFINALIZE');
         print "<font color=\"blue\"><B> if you find you must now make changes.</B></font><BR>\n";
         print "<HR>\n";
       }
     }


     print "<TABLE width=\"800\"><TR><TD>\n";
     print "<B>Metadata:</B><P>\n";
     print DisplayPASSMetaData(identifier=>$datasetIdentifier);
     print "<BR>\n";
     print "</TR></TD></TABLE>\n";
     print "<HR>\n";

     print "<B>Official URL for this dataset:</B> http://www.peptideatlas.org/PASS/$datasetIdentifier<BR>\n";
     print "<B>To access files via FTP, use credentials:</B><PRE>\n";
     print "Servername: ftp.peptideatlas.org\nUsername: $datasetIdentifier\nPassword: $datasetMetadata->{datasetPassword}\n</PRE><BR>\n";
     print "Or use your browser's FTP mode: <a target=\"_blank\" href=\"ftp://$datasetIdentifier:$datasetMetadata->{datasetPassword}\@ftp.peptideatlas.org/\">ftp://$datasetIdentifier:$datasetMetadata->{datasetPassword}\@ftp.peptideatlas.org/</a><BR><BR>\n";
     print "<HR>\n";

     print "<B>Listing of files:</B><P>\n";
     print DisplayPASSDirListing(identifier=>$datasetIdentifier,
             baseURL=>$base_url,
           );
     print "<BR>\n";
     print "<a href=\"$base_url?identifier=$datasetIdentifier&browseArea=upload&path=/\">Browse FTP upload area</a><BR>\n";
     #print "<a href=\"$base_url?identifier=$datasetIdentifier&browseArea=processing&path=/\">Browse AutoQCprocessing area</a><BR>\n";
     print "<BR>\n";
     print "<HR>\n";

  }

} # end handle_request



#######################################################################
# authenticateUser
#######################################################################
sub authenticateUser {
  my %args = @_;
  my $SUB_NAME = 'authenticateUser';

  #### Decode the argument list
  my $emailAddress = $args{'emailAddress'} || die "[$SUB_NAME] ERROR:emailAddress  not passed";
  my $password = $args{'password'} || die "[$SUB_NAME] ERROR:password  not passed";

  my $response;

  my $sql = qq~
        SELECT submitter_id,firstName,lastName,password
        FROM $TBAT_PASS_SUBMITTER
        WHERE emailAddress = '$emailAddress'
    ~;

    my @rows = $sbeams->selectSeveralColumns($sql);
    if ( @rows ) {
      if (scalar(@rows) == 1) {
	my $databasePassword = $rows[0]->[3];
	if ($password eq $databasePassword) {
	  $response->{result} = 'Success';
	  $response->{firstName} = $rows[0]->[1];
	  $response->{lastName} = $rows[0]->[2];
	  $response->{submitter_id} = $rows[0]->[0];
	} else {
	  $response->{result} = 'IncorrectPassword';
	  push(@{$response->{errors}},'Incorrect password for this email address');
	}

      } else {
	die("ERROR: Too many rows returned for email address '$emailAddress'");
      }

    } else {
      $response->{result} = 'NoSuchUser';
      push(@{$response->{errors}},"There is not any user registered to '$emailAddress'");
    }

    return $response;
}


#######################################################################
# registerUser
#######################################################################
sub registerUser {
  my %args = @_;
  my $SUB_NAME = 'registerUser';

  #### Decode the argument list
  my $emailAddress = $args{'emailAddress'} || die "[$SUB_NAME] ERROR: emailAddress  not passed";
  my $password = $args{'password'} || die "[$SUB_NAME] ERROR: password not passed";
  my $firstName = $args{'firstName'} || die "[$SUB_NAME] ERROR: firstName not passed";
  my $lastName = $args{'lastName'} || die "[$SUB_NAME] ERROR: lastName not passed";

  my $response;
  my $readyToRegister = 0;

  my $authentication = authenticateUser(emailAddress=>$emailAddress,password=>$password);
  if ($authentication->{result} eq 'Success') {
    $response->{result} = 'UserAlreadyExists';
    push(@{$response->{errors}},"This user '$emailAddress' already exists. Login instead.");

  } elsif ($authentication->{result} eq 'IncorrectPassword') {
    $response->{result} = 'UserAlreadyExists';
    push(@{$response->{errors}},"This user '$emailAddress' already exists, although the password provided is incorrect.");

  } elsif ($authentication->{result} eq 'NoSuchUser') {
    $readyToRegister = 1;

  } else {
    $response->{result} = 'UnknownError';
    push(@{$response->{errors}},"Unknown error 456. Please report.");
  }


  my $PK;
  if ($readyToRegister) {
    my %rowdata = (
      emailAddress => $emailAddress,
      password => $password,
      firstName => $firstName,
      lastName => $lastName,
      emailReminders => 'YES',
      emailPasswords => 'YES',
    );

    $PK = $sbeams->updateOrInsertRow(
					insert => 1,
					table_name => $TBAT_PASS_SUBMITTER,
					rowdata_ref => \%rowdata,
					PK => 'submitter_id',
					return_PK => 1,
					add_audit_parameters => 1
				       );

  }

  if ($PK && $PK > 0) {
    $response->{result} = 'Success';
  } else {
    $response->{result} = 'Failed';
  }


  return $response;

}


#######################################################################
# validateDatasetAnnotations
#######################################################################
sub validateDatasetAnnotations {
  my %args = @_;
  my $SUB_NAME = 'validateDatasetAnnotations';

  #### Decode the argument list
  my $formParameters = $args{'formParameters'} || die "[$SUB_NAME] ERROR: formParameters not passed";

  my $response;
  my $test;
  $response->{result} = 'Success';

  $test = $formParameters->{datasetType};
  my $result = 0;
  for (my $i=0; $i < scalar(@datasetTypes); $i+=2) {
    my ($key,$label) = @datasetTypes[$i..$i+1];
    $result = 1 if ($test eq $key);
  }
  unless ($result) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Dataset type is not a legal option");
  }


  $test = $formParameters->{datasetTag};
  unless (defined($test) && $test =~ /^[A-Za-z0-9\_\-]+$/ && length($test) > 5 && length($test) <= 20) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Dataset Tag must be an alphanumeric string with length more than 5 up to 20");
  }

  $test = $formParameters->{datasetTitle};
  unless (defined($test) && length($test) > 20 && length($test) <= 200) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Dataset Title must be a string with length more than 20 up to 200");
  }

  $test = $formParameters->{publicReleaseDate};
  unless (defined($test) && $test =~ /^(\d\d\d\d)\-(\d\d)\-(\d\d)$/ && $1>=2000 && $2>0 && $2<12 && $3>0 && $3<32) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Public release data must be a valid date of the form YYYY-MM-DD like 2011-10-25");
  }

  $test = $formParameters->{contributors};
  unless (defined($test) && length($test) > 10 && length($test) <= 10000) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Contributors must be a string with length more than 10 up to 10000");
  }

  $test = $formParameters->{publication};
  unless (defined($test) && length($test) > 5 && length($test) <= 1000) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Publication must be a string with length more than 5 up to 1000");
  }

  $test = $formParameters->{instruments};
  unless (defined($test) && length($test) > 5 && length($test) <= 1000) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Instruments must be a string with length more than 5 up to 1000");
  }

  $test = $formParameters->{species};
  unless (defined($test) && length($test) > 3 && length($test) <= 1000) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Species must be a string with length more than 3 up to 1000");
  }

  $test = $formParameters->{massModifications};
  unless (defined($test) && length($test) > 3 && length($test) <= 1000) {
    $response->{result} = 'Failed';
    push(@{$response->{errors}},"Mass modidications must be a string with length more than 3 up to 1000");
  }


  return $response;

}


#######################################################################
# getPASSMetaData
#######################################################################
sub getPASSMetaData {
  my %args = @_;
  my $SUB_NAME = 'getPASSMetaData';

  #### Decode the argument list
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";

  my $response;

  my $sql = qq~
    SELECT datasetIdentifier,submitter_id,datasetType,datasetPassword,datasetTag,datasetTitle,publicReleaseDate,finalizedDate
      FROM $TBAT_PASS_DATASET
     WHERE datasetIdentifier = '$identifier'
  ~;
  my @rows = $sbeams->selectSeveralColumns($sql);
  if (@rows) {
    my ($datasetIdentifier,$submitter_id,$datasetType,$datasetPassword,$datasetTag,$datasetTitle,$publicReleaseDate,$finalizedDate) = 
      @{$rows[0]};

    my $sql2 = qq~
      SELECT firstName,lastName,emailAddress
        FROM $TBAT_PASS_SUBMITTER
       WHERE submitter_id = '$submitter_id'
    ~;

    my @rows2 = $sbeams->selectSeveralColumns($sql2);
    my $submitterStr = '';
    if (@rows2) {
      my ($firstName,$lastName,$emailAddress) = @{$rows2[0]};
      $submitterStr = "$firstName $lastName &lt;$emailAddress&gt;";
      $response->{emailAddress} = $emailAddress;
      $response->{submitterStr} = $submitterStr;
    } else {
      $response->{results} = 'Failed';
      push(@{$response->{errors}},"ERROR: Query<PRE>\n$sql2</PRE> failed to return any rows.<BR>");
    }

    $response->{datasetIdentifier} = $datasetIdentifier;
    $response->{datasetType} = $datasetType;
    $response->{submitter} = $submitterStr;
    $response->{datasetPassword} = $datasetPassword;
    $response->{datasetTag} = $datasetTag;
    $response->{datasetTitle} = $datasetTitle;
    $response->{publicReleaseDate} = $publicReleaseDate;
    $response->{finalizedDate} = $finalizedDate;

  } else {
    if ($identifier =~ /^PASS\d{5}$/) {
      push(@{$response->{errors}},"ERROR: Nonexistent PASS accession number $identifier. Please enter the correct accession number.<BR>");
      return($response);
    } else {
      push(@{$response->{errors}},"ERROR: Malformed PASS accession number '$identifier'. It should be PASSnnnnn, where nnnnn is a 5-digit number. Please enter the correct accession number.<BR>");
      return($response);
    }
  }

  my $PASS_ACCOUNTS_BASE = '/prometheus/u1/home';
  unless ( -d "$PASS_ACCOUNTS_BASE/${identifier}" ) {
    $PASS_ACCOUNTS_BASE = '/regis/passdata/home';
  }

  my $infile = "$PASS_ACCOUNTS_BASE/${identifier}/${identifier}_DESCRIPTION.txt";
  unless (open(INFILE,$infile)) {
    print "ERROR: Unable to read description file for this submission: '$infile'";
    $response->{result} = 'Success';
    return $response;
  }

  my ($key,$value);
  my $prevKey = '';
  while (my $line = <INFILE>) {
    $line =~ s/[\r\n]//g;
    if ($line =~ /^\s*(\S+):\s*(.*)$/) {
      $key = $1;
      $value = $2;
      $response->{$key} = $value;
      $prevKey = $key;
    } else {
      $key = $prevKey;
      $response->{$key} .= "<BR>\n$line";
    }
  }

  close(INFILE);

  $response->{result} = 'Success';
  return $response;

}


#######################################################################
# DisplayPASSMetaData
#######################################################################
sub DisplayPASSMetaData {
  my %args = @_;
  my $SUB_NAME = 'DisplayPASSMetaData';

  #### Decode the argument list
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";

  my $response;

  my $result = getPASSMetaData(identifier=>$identifier);

  if ($result->{result} eq 'Success') {
    print "<B><font color=red>datasetIdentifier:</font></B> $result->{datasetIdentifier}<BR>\n";
    print "<B><font color=red>datasetType:</font></B> $result->{datasetType}<BR>\n";
    print "<B><font color=red>submitter:</font></B> $result->{submitterStr}<BR>\n";
    print "<B><font color=red>datasetTag:</font></B> $result->{datasetTag}<BR>\n";
    print "<B><font color=red>datasetTitle:</font></B> $result->{datasetTitle}<BR>\n";
    print "<B><font color=red>publicReleaseDate:</font></B> $result->{publicReleaseDate}<BR>\n";
    print "<B><font color=red>finalizedDate:</font></B> $result->{finalizedDate}<BR>\n";

    print "<B><font color=red>summary:</font></B> $result->{summary}<BR>\n";
    print "<B><font color=red>contributors:</font></B> $result->{contributors}<BR>\n";
    print "<B><font color=red>publication:</font></B> $result->{publication}<BR>\n";
    print "<B><font color=red>growth:</font></B> $result->{growth}<BR>\n";
    print "<B><font color=red>treatment:</font></B> $result->{treatment}<BR>\n";
    print "<B><font color=red>extraction:</font></B> $result->{extraction}<BR>\n";
    print "<B><font color=red>separation:</font></B> $result->{separation}<BR>\n";
    print "<B><font color=red>digestion:</font></B> $result->{digestion}<BR>\n";
    print "<B><font color=red>acquisition:</font></B> $result->{acquisition}<BR>\n";
    print "<B><font color=red>informatics:</font></B> $result->{informatics}<BR>\n";
    print "<B><font color=red>instruments:</font></B> $result->{instruments}<BR>\n";
    print "<B><font color=red>species:</font></B> $result->{species}<BR>\n";
    print "<B><font color=red>massModifications:</font></B> $result->{massModifications}<BR>\n";

  } else {
    print "ERROR: Unable to get dataset metadata.<BR>\n";
  }


  return $response;

}


#######################################################################
# DisplayPASSDirListing
#######################################################################
sub DisplayPASSDirListing {
  my %args = @_;
  my $SUB_NAME = 'DisplayPASSDirListing';

  #### Decode the argument list
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $baseURL = $args{'baseURL'};
  my $browseArea = $args{'browseArea'};
  my $path = $args{'path'};

  my $response;

  my $PASS_ACCOUNTS_BASE = '/prometheus/u1/home';
  unless ( -d "$PASS_ACCOUNTS_BASE/${identifier}" ) {
    $PASS_ACCOUNTS_BASE = '/regis/passdata/home';
  }

  my $PASS_PROCESSING_BASE = '/regis/sbeams/PASS';

  my $base = $PASS_ACCOUNTS_BASE;
  if ($browseArea eq 'processed') {
    $base = $PASS_PROCESSING_BASE;
    print "<BR>\n";
    print "<a href=\"$baseURL?identifier=$identifier&browseArea=upload&path=$path\">[View upload area]</a><BR>\n";
  } else {
    $base = $PASS_ACCOUNTS_BASE;
    print "<BR>\n";
    #print "<a href=\"$baseURL?identifier=$identifier&browseArea=processed&path=$path\">[View processing area]</a><BR>\n";
  }
  print "<BR>\n";

  $path = '/' unless ($path);
  $path =~ s/\.\.//g;

  my $fullPath = "$base/$identifier$path";

  if ( ! -d $fullPath ) {
    return $response;
  }

  my @listing = `ls -lh '$fullPath'`;

  print "<PRE>\n";

  if ($path ne '/') {
    my $parentPath = '/';
    if ($path =~ /^(.+)\//) {
      $parentPath = $1;
    }
    print "<a href=\"$baseURL?identifier=$identifier&browseArea=$browseArea&path=/\">-- Back to top --</a>\n";
    print "<a href=\"$baseURL?identifier=$identifier&browseArea=$browseArea&path=$parentPath\">-- Back up one level --</a>\n";
    print "\n";
    print "$path\n\n";
  }

  foreach my $line ( @listing ) {
    chomp($line);
    my @fields = split(/\s+/,$line);
    my $offset = index($line," $fields[4] ") + length($fields[4]) - 4;

    my $hlink = '';
    my $aclose = '';
    if (length($line) > 32) {
      if ($line =~ /^d/) {
	my $dirname = substr($line,$offset+19,999);
	my $tmpPath = $path;
	$tmpPath = '' if ($path eq '/');
	$hlink = "<a href=\"$baseURL?identifier=$identifier&browseArea=$browseArea&path=$tmpPath/$dirname\">";
	print substr($line,$offset,19).$hlink.$dirname."</a>\n";
      } else {
	my $filename = substr($line,$offset+19,999);
	if (isSupportedFile(filename=>$filename)) {
	  $hlink = "<a href=\"$baseURL?identifier=$identifier&browseArea=$browseArea&path=$path&filename=$filename\">";
	  $aclose="</a>";
	} else {
	  $hlink="";
	}
	print substr($line,$offset,19).$hlink.$filename.$aclose."\n";
      }
    }
  }
  print "</PRE>\n";

  return $response;

}


#######################################################################
# isSupportedFile
#######################################################################
sub isSupportedFile {
  my %args = @_;
  my $SUB_NAME = 'isSupportedFile';

  #### Decode the argument list
  my $filename = $args{'filename'};

  my %supportedFiles = (
    'summary.txt' => 1,
    'summary.peptides.txt' => 1,
    'summary.proteins.txt' => 1,
    'summary.tsv' => 1,
    'summary.html' => 1,
    'summary.QCruns' => 1,
    'tandem.params' => 1,
    'interact-ipro.pep.summary.txt' => 1,
    'interact-ipro.peptides.out' => 1,
    'interact-ipro.proteins.out' => 1,
  );

  return($supportedFiles{$filename});
}


#######################################################################
# showFile
#######################################################################
sub showFile {
  my %args = @_;
  my $SUB_NAME = 'showFile';

  #### Decode the argument list
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $browseArea = $args{'browseArea'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $path = $args{'path'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $filename = $args{'filename'};

  my $response;

  my $PASS_ACCOUNTS_BASE = '/prometheus/u1/home';
  unless ( -d "$PASS_ACCOUNTS_BASE/${identifier}" ) {
    $PASS_ACCOUNTS_BASE = '/regis/passdata/home';
  }

  my $PASS_PROCESSING_BASE = '/regis/sbeams/PASS';

  my $base = $PASS_ACCOUNTS_BASE;
  if ($browseArea eq 'processed') {
    $base = $PASS_PROCESSING_BASE;
  } else {
    $base = $PASS_ACCOUNTS_BASE;
  }

  $path = '/' unless ($path);
  $path =~ s/\.\.//g;

  my $fullPath = "$base/$identifier$path/$filename";

  if ( ! -f $fullPath ) {
    return $response;
  }

  if ($fullPath =~ /html$/i) {
    print "Content-type: text/html\n\n";
  } else {
    print "Content-type: text/plain\n\n";
  }
  open(INFILE,$fullPath) || die("ERROR: Unable to open file $fullPath");

  foreach my $line ( <INFILE> ) {
    print $line;
  }

  close(INFILE);

  return $response;

}



#######################################################################
# finalizeDataset
#######################################################################
sub finalizeDataset {
  my %args = @_;
  my $SUB_NAME = 'finalizeDataset';

  #### Decode the argument list
  my $authentication = $args{'authentication'} || die "[$SUB_NAME] ERROR: authentication not passed";
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $emailAddress = $args{'emailAddress'};

  my $PK;
  if ($identifier =~ /^PASS(\d+)$/) {
    $PK = $1;
    my %rowdata = ( finalizedDate => 'CURRENT_TIMESTAMP' );
    my $result = $sbeams->updateOrInsertRow(
					  update => 1,
					  table_name => $TBAT_PASS_DATASET,
					  rowdata_ref => \%rowdata,
					  PK => 'dataset_id',
					  PK_value => $PK,
					 );

    my $PASS_FTP_AGENT_BASE = '/prometheus/u1/home/PASSftpAgent';

    my $cmdfile = "$PASS_FTP_AGENT_BASE/commands.queue";
    open(CMDFILE,">>$cmdfile") || die("ERROR: Unable to append to '$cmdfile'");
    print CMDFILE "FinalizeDataset $identifier\n";
    close(CMDFILE);


  } else {
    print "ERROR: Unable to parse identifier '$identifier'. Please report this. ERROR449<BR>\n";
  }

  #### Email PeptideAtlas team about the finalization
  my @toRecipients = (
    'Eric Deutsch','eric.deutsch@systemsbiology.org',
    'Terry Farrah','terry.farrah@systemsbiology.org',
    'Zhi Sun','zhi.sun@systemsbiology.org',
  );
  my @ccRecipients = ();
  my @bccRecipients = ();
  my $adminMessage = qq~PASS submission PASS$PK has been finalized.\n
  To view the dataset, go to https://db.systemsbiology.net/sbeams/cgi/PeptideAtlas/PASS_View?identifier=PASS$PK
~;
  SBEAMS::Connection::Utilities::sendEmail(
    toRecipients=>\@toRecipients,
    ccRecipients=>\@ccRecipients,
    bccRecipients=>\@bccRecipients,
    subject=>"PeptideAtlas dataset PASS$PK finalized",
    message=>"$adminMessage\n\n",
  );

  #### Send a nice thank you note to the submitter
  my $confirmationMessage = qq~Your PeptideAtlas submission PASS$PK is now finalized.  The data are now stored on our ftp server, and you may use your username and password to conveniently provide access to anyone you wish.

If for some reason you need to modify your data or add additional data, email us using the form at http://www.peptideatlas.org/feedback.php so that we can un-finalize your submission.

The PeptideAtlas receives many data submissions, and only a portion of them are actually processed and incorporated into the PeptideAtlas database. You may see your dataset at www.PeptideAtlas.org sometime in the future. Unfortunately, we do not currently have a system for informing submitters whether and when their data will be incorporated. Feel free to email us using the form at http://www.peptideatlas.org/feedback.php .

Again, many thanks for offering your data to our compendium of proteomics results and adding to the world's global proteomics knowledge store.

Sincerely,
The PeptideAtlas team at the Institute for Systems Biology
~;
  my (@toRecipients,@ccRecipients,@bccRecipients);
  @toRecipients = (
    'PeptideAtlas Dataset Submitter',$emailAddress,
  );
  @ccRecipients = ();
  @bccRecipients = (
    'Eric Deutsch','eric.deutsch@systemsbiology.org',
  );
  SBEAMS::Connection::Utilities::sendEmail(
    toRecipients=>\@toRecipients,
    ccRecipients=>\@ccRecipients,
    bccRecipients=>\@bccRecipients,
    subject=>"PeptideAtlas dataset submission PASS$PK",
    message=>$confirmationMessage,
  );


  return;
}


#######################################################################
# unFinalizeDataset
#######################################################################
sub unFinalizeDataset {
  my %args = @_;
  my $SUB_NAME = 'unFinalizeDataset';

  #### Decode the argument list
  my $authentication = $args{'authentication'} || die "[$SUB_NAME] ERROR: authentication not passed";
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $emailAddress = $args{'emailAddress'};

  my $PK;
  if ($identifier =~ /^PASS(\d+)$/) {
    $PK = $1;
    my %rowdata = ( finalizedDate => 'NULL' );
    my $result = $sbeams->updateOrInsertRow(
					  update => 1,
					  table_name => $TBAT_PASS_DATASET,
					  rowdata_ref => \%rowdata,
					  PK => 'dataset_id',
					  PK_value => $PK,
					 );

    my $PASS_FTP_AGENT_BASE = '/prometheus/u1/home/PASSftpAgent';

    my $cmdfile = "$PASS_FTP_AGENT_BASE/commands.queue";
    open(CMDFILE,">>$cmdfile") || die("ERROR: Unable to append to '$cmdfile'");
    print CMDFILE "UnFinalizeDataset $identifier\n";
    close(CMDFILE);


  } else {
    print "ERROR: Unable to parse identifier '$identifier'. Please report this. ERROR449<BR>\n";
  }

  #### Email PeptideAtlas team about the finalization
  my @toRecipients = (
    'Eric Deutsch','eric.deutsch@systemsbiology.org',
    'Terry Farrah','terry.farrah@systemsbiology.org',
    'Zhi Sun','zhi.sun@systemsbiology.org',
  );
  my @ccRecipients = ();
  my @bccRecipients = ();
  my $adminMessage = qq~PASS submission PASS$PK has been unfinalized.\n
  To view the dataset, go to https://db.systemsbiology.net/sbeams/cgi/PeptideAtlas/PASS_View?identifier=PASS$PK
~;
  SBEAMS::Connection::Utilities::sendEmail(
    toRecipients=>\@toRecipients,
    ccRecipients=>\@ccRecipients,
    bccRecipients=>\@bccRecipients,
    subject=>"PeptideAtlas dataset PASS$PK unfinalized",
    message=>"$adminMessage\n\n",
  );

  #### Send a nice thank you note to the submitter
  my $confirmationMessage = qq~Your PeptideAtlas submission PASS$PK has been unfinalized.  This means that you may now update the data files via FTP as necessary again.

When you have finished making changes to the files via FTP, FINALIZE your data again by going to:

http://www.peptideatlas.org/PASS/PASS$PK

Again, many thanks for using the PeptideAtlas PASS data repository.

Sincerely,
The PeptideAtlas team at the Institute for Systems Biology
~;
  my (@toRecipients,@ccRecipients,@bccRecipients);
  @toRecipients = (
    'PeptideAtlas Dataset Submitter',$emailAddress,
  );
  @ccRecipients = ();
  @bccRecipients = (
    'Eric Deutsch','eric.deutsch@systemsbiology.org',
  );
  SBEAMS::Connection::Utilities::sendEmail(
    toRecipients=>\@toRecipients,
    ccRecipients=>\@ccRecipients,
    bccRecipients=>\@bccRecipients,
    subject=>"PeptideAtlas dataset submission PASS$PK",
    message=>$confirmationMessage,
  );


  return;
}


#######################################################################
# setNewDatasetPassword
#######################################################################
sub setNewDatasetPassword {
  my %args = @_;
  my $SUB_NAME = 'setNewDatasetPassword';

  #### Decode the argument list
  my $authentication = $args{'authentication'} || die "[$SUB_NAME] ERROR: authentication not passed";
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $newDatasetPassword = $args{'newDatasetPassword'};

  my $response;
  $response->{result} = 'Failure';

  #### Check to make sure the password is not empty
  if (!defined($newDatasetPassword) || $newDatasetPassword eq '') {
    push(@{$response->{errors}},"ERROR: You may not set a blank password.<BR>");
    return $response;
  }

  #### Check to make sure the password is not too long
  if (length($newDatasetPassword) > 10) {
    push(@{$response->{errors}},"ERROR: Password may only be up to 10 characters.<BR>");
    return $response;
  }


  #### If the identifier is valid, set the new password
  if ($identifier =~ /^PASS(\d+)$/) {
    my $PK = $1;
    my %rowdata = ( datasetPassword => $newDatasetPassword );
    my $result = $sbeams->updateOrInsertRow(
					  update => 1,
					  table_name => $TBAT_PASS_DATASET,
					  rowdata_ref => \%rowdata,
					  PK => 'dataset_id',
					  PK_value => $PK,
					 );

    my $PASS_FTP_AGENT_BASE = '/prometheus/u1/home/PASSftpAgent';

    my $cmdfile = "$PASS_FTP_AGENT_BASE/commands.queue";
    open(CMDFILE,">>$cmdfile") || die("ERROR: Unable to append to '$cmdfile'");
    print CMDFILE "UpdatePassword for user $identifier to password $newDatasetPassword\n";
    close(CMDFILE);


  } else {
    push(@{$response->{errors}},"ERROR: Unable to parse identifier '$identifier'. Please report this. ERROR450");
    return $response;
  }

  $response->{result} = 'Success';
  return $response;
}




#######################################################################
# setNewPublicReleaseDate
#######################################################################
sub setNewPublicReleaseDate {
  my %args = @_;
  my $SUB_NAME = 'setNewPublicReleaseDate';

  #### Decode the argument list
  my $authentication = $args{'authentication'} || die "[$SUB_NAME] ERROR: authentication not passed";
  my $identifier = $args{'identifier'} || die "[$SUB_NAME] ERROR: identifier not passed";
  my $newPublicReleaseDate = $args{'newPublicReleaseDate'};

  my $response;
  $response->{result} = 'Failure';

  #### Check to make sure the newPublicReleaseDate is not empty
  if (!defined($newPublicReleaseDate) || $newPublicReleaseDate eq '') {
    push(@{$response->{errors}},"ERROR: You may not set a blank public release date.<BR>");
    return $response;
  }

  #### Check to make sure the newPublicReleaseDate is formed correctly
  unless ($newPublicReleaseDate =~ /^\d{4}\-\d{2}-\d{2}\S*$/) {
    push(@{$response->{errors}},"ERROR: Malformed date. Please use format like 2012-01-01.<BR>");
    return $response;
  }


  #### If the identifier is valid, set the new password
  if ($identifier =~ /^PASS(\d+)$/) {
    my $PK = $1;
    my %rowdata = ( publicReleaseDate => $newPublicReleaseDate );
    my $result = $sbeams->updateOrInsertRow(
					  update => 1,
					  table_name => $TBAT_PASS_DATASET,
					  rowdata_ref => \%rowdata,
					  PK => 'dataset_id',
					  PK_value => $PK,
					 );

  } else {
    push(@{$response->{errors}},"ERROR: Unable to parse identifier '$identifier'. Please report this. ERROR451");
    return $response;
  }

  $response->{result} = 'Success';
  return $response;
}


