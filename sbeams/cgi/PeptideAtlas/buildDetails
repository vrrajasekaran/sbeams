#!/usr/local/bin/perl

###############################################################################
# $Id$
#
# SBEAMS is Copyright (C) 2000-2019 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
#use vars qw ($sbeams);

use lib qw (../../lib/perl);
#use CGI::Carp qw(fatalsToBrowser croak);
use vars qw($PROGRAM_FILE_NAME);

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;
use SBEAMS::Connection::GoogleVisualization;
use SBEAMS::Connection::TabMenu;


use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;


###############################################################################
# Global Variables
###############################################################################
my $sbeams = new SBEAMS::Connection;
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);
my $atlas = new SBEAMS::PeptideAtlas;
$atlas->setSBEAMS($sbeams);

# Read input parameters
my $params = process_params();
$|++;

my $show_image = 0;

{ # Main
    # Authenticate or exit
    my $username = $sbeams->Authenticate( permitted_work_groups_ref => 
                                                      ['PeptideAtlas_user',
                                                      'PeptideAtlas_admin', 
                                                      'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
                                                      # connect_read_only=>1,
                                                      allow_anonymous_access=>1,
                                              ) || exit;


    ## get current settings
    my $project_id = $sbeams->getCurrent_project_id();

    my $build_help = get_table_help( table => 'build' );
    my $batch_help = get_table_help( table => 'batch' );
    my $mayu_help = get_table_help( table => 'mayu' );
    my %resultset = ();
    my $resultset_ref = \%resultset;
    my $section = $params->{section} || '';

    my $page = $sbeams->getGifSpacer( 700 ) . "<BR>\n";
  #### Get the HTML to display the tabs
    my $tabMenu = $atlas->getTabMenu(
      parameters_ref => $params,
      program_name => 'buildDetails',
    );
#		my $back = $sbeams->getBackForm();
    $page .=<<"    END";
		$tabMenu

    <P>
    <!--This shows some information about the currently selected build.
    <!--You can view the details of other builds by selecting an 
    item in the list below.  Although this will change build whose statistics 
    are to be displayed, it will not change your currently selected build.-->
    </P>
    $build_help
    END

    # We are not forcing the user into the new build - is that correct?
    my $build_id = $params->{atlas_build_id} || $atlas->getCurrentAtlasBuildID(parameters_ref => $params);
    my $valid_build = 1;
    if ( !grep /^$build_id$/, $atlas->getAccessibleBuilds() ) {
#      die( "Access to specified build is not allowed" );
       $atlas->display_page_header();
       $build_id = $atlas->getCurrentAtlasBuildID(parameters_ref => $params);
		   $atlas->display_page_footer();
       exit;
    }

    if (! $params->{caching} && ! $section){
				my $page_url = 'http';
				if ($ENV{HTTPS} = "on") {
					$page_url .= "s";
				}
				$page_url .= "://$ENV{SERVER_NAME}$ENV{REQUEST_URI}";
				#my $url_mdsum = md5_hex( $page_url ); 
        $page_url =~ /(atlas_build_id=\d+)/;
        my $html_cache_name = $1; 
				my $html_cache_loc  = '';
				if ($PHYSICAL_BASE_DIR !~ /dev\w+\/sbeams/){
					$html_cache_loc = "/net/dblocal/www/html/sbeamscommon/htmlcache/buildDetails";
				}else{
					$html_cache_loc = "$PHYSICAL_BASE_DIR/htmlcache/buildDetails";
				}
       
        if ( -e "$html_cache_loc/$html_cache_name"){
           if (open (IN,"<$html_cache_loc/$html_cache_name")){
             print "Content-type: text/html\n\n";
             print $_ while (<IN>);
             close IN; 
             exit;
           }
        }
    } 

    # Add general section 
    if (! $section  || $section =~ /overview/i){
      $page .= get_build_overview ( $build_id );
    }
    if (! $section || $section =~ /what.*new/i){
				my $what_is_new = fetchResultset(atlas_build_id => $build_id,
                                         rs_table => 'buildDetail-new',
                                         params => $params,
                                         resultset_ref => $resultset_ref,
                                         module_ref => sub{ $atlas->get_what_is_new(@_)});
				$page .= "<BR>\n$what_is_new<BR>\n" if($what_is_new);
    }
    if (! $section || $section =~ /ProteomeCoverage/i){
      my $proteome_cover = fetchResultset(atlas_build_id => $build_id,
                                         rs_table => 'buildDetail-ProteomeCoverage',
                                         params => $params,
                                         resultset_ref => $resultset_ref,
                                         module_ref => sub{$atlas->get_proteome_coverage(@_)});
      
			if($proteome_cover){
				$page .= "<BR>\n$proteome_cover<BR>\n";
			}
    }
    my ( $chart_div, $header );
		my ( $sample_table, $sample_arrayref ,$column_name_ref ) = get_sample_info( $build_id );
    if (! $section || $section =~ /SampleContribution/i){
      if ($params->{output_mode} =~ /tsv/i && $section){
        $atlas->print_html_table_to_tsv( data_ref => $sample_arrayref,
                                         column_name_ref => $column_name_ref,
                                         filename=>'SampleContribution.tsv'); 
      }else{
			  ( $chart_div, $header ) = get_draw_chart_function( $sample_arrayref );
			  $page .= "<BR>$batch_help\n";
			  $page .= $sample_table;
			  $page .= "<BR>\n";
      }
    }
    
    # Print what we already have, speed up apparent page loading time.
    if (! $section){

      $atlas->display_page_header( header_info => $header, project_id => $project_id, onload => 'sortables_init()', sortable => 1 );
		  print $page;
      $page = "<BR>";
      $page .= get_datasetContri_info( build_id => $build_id);
			my $build_path = get_build_path( build_id => $build_id );
			my $mayu_data_path = "$build_path/analysis/Mayu_out.csv";
			if ( -e $mayu_data_path ) {
				$page .= "<BR>$mayu_help\n";
				$page .= get_mayu_info( $mayu_data_path );
			}
			print $page;

	#  print STDERR 'showtime ' . time() . "\n";
			# Add peptide stats section
			# Add graphic

			if ( $show_image ) {
				my $plots = $page = get_build_plots ( build_id => $build_id, 
                                              chart_div => $chart_div,
                                              sample_arrayref => $sample_arrayref, 
                                              column_name_ref => $column_name_ref); 
				print $plots;
			}
		
 
	
			if ( 1 ) {
				my $map_display = getSampleMapDisplay ( %{$params}, build_id => $build_id );
				print $map_display;
			}
    
    print $atlas->tableHeatMap(table_id => 'datasetContri_info');
    $atlas->display_page_footer();
  }
} # end main

sub fetchResultset {
  my %args = @_;
  my $build_id = $args{atlas_build_id};
  my $rs_table = $args{rs_table};
  my $params = $args{params};
  my $resultset_ref = $args{resultset_ref}; 
  my $module_ref = $args{module_ref};
	#### Fetch the results from the database server
  my $result;
	$atlas->fetchResultHTMLTable(
		table_name => $rs_table,
		key_value => $build_id,	
		resultset_ref=>$resultset_ref,
		use_caching => 1
	);

	if ( $resultset_ref->{from_cache} ) {
 		$log->info( "Skipping post-processing with cached RS" );
	}else{
		$resultset_ref->{data} = $module_ref->($build_id);
		my %rs_params;
		$rs_params{set_name} = 'SETME';
		my %write_params = ( rs_table => $rs_table,
				     key_field => 'atlas_build_id',
				     key_value => $build_id );

		$sbeams->writeResultSet(
			resultset_file_ref=>\$rs_params{set_name},
			resultset_ref=>$resultset_ref,
			query_parameters_ref=>$params,
			resultset_params_ref=>\%rs_params,
			query_name=>"$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME",
			%write_params
		 );
	}
  return $resultset_ref->{data};
} 
 
sub get_table_help {
  my %args = @_;
  my $name = $args{table};
  return '' unless $name;
  $args{mode} ||= 'section';
  my @entries;
  my $hidetext;
  my $showtext;
  my $heading;
  my $description;

  if ( $name eq 'build' ) {  
    @entries = ( { key => 'Build Name', value => 'The simple name for this build, usually contains organism, prophet cutoff, and other information. ' },
                 { key => 'Build Description', value => 'More detailed information about build. ' },
                 { key => 'Reference Database', value => 'Database to which peptides were mapped, generally different than search database.  This mapping is done by running BLAST, and allows the peptides to be mapped the the organism\'s genomic sequence. ' },
                 { key => 'Build Date', value => 'Date upon which build was finished. ' },
                 { key => '# Experiments', value => 'The number of individual experiments which comprise this build.  Each experiment contains one or more LCMS/MS runs, and generally corresponds to a single scientific experiment.' } ,
                 { key => 'Total Observations ', value => 'The total number of spectra that yeilded identifications above the build threshold.  Observations of the same base peptide sequences multiple times or in various charge states/modifications, whould each contribute to the total' },
                 { key => 'Distinct Peptides', value => 'This shows the number of distinct peptide sequences that were seen in this build.  Observations of the peptide in different charge states or with different modifications are coalesced.' } ,
                 { key => 'Probability threshold', value => 'iProphet probability threshold applied to each experiment in this build' },
                 { key => 'PSM FDR threshold', value => 'PSM (peptide-spectrum match) level FDR threshold applied to each experiment in this build' },
                 { key => 'Canonical Proteins', value => 'Minimally redunant set of proteins required to explain (virtually) all non-decoy peptides observed in build (<a target=_termdefs href="http://www.peptideatlas.org/docs/protein_ident_terms.php">more info</a>)' },
                 { key => 'Indistinguishable Representative Protein', value=>'Indistinguishable representative means that there are peptides that map uniquely to a set of non-canonical proteins, thereby indicating that at least one of the proteins in the set must be present, but it cannot be determined which it is.'},
                 { key => 'Marginally Distinguished Proteins', value=>'Marginally distinguished means that this protein has peptides that are shared with a canonical peptide, but it also has a small number of peptides that appear to distinguish it from the canonical identification.'},
                 { key => 'Representative Proteins', value=>'Representative means that there are peptides that map uniquely to a set of non-canonical proteins, thereby indicating that at least one of the proteins in the set must be present, but it cannot be determined which it is.'},
                 { key => 'Insufficient evidence', value=>'Protein has one or more apparently uniquely mapping peptides but none are 9AA or greater'},
                 { key => 'weak', value=>'Protein has one peptide that is uniquely mapping and at least 9 AA long, but is missing a second peptide that meets HPP guidelines'},
        );
                 
    $showtext = 'show row descriptions';
    $hidetext = 'hide row descriptions';
    $heading = 'Build Overview';
    $description= 'These values pertain to the atlas build as a whole';


  } elsif ( $name eq 'batch' ) {
    @entries = ( { key => 'ID', value => 'Database ID for this experiment (search batch) ' },
                 { key => 'Experiment_Name', value => 'Simple name for this experiment. ' },
                 { key => '#_Runs', value=>'The total number of runs for this experiment.'},
                 { key => '#_Spectra_Searched', value => 'The total number of spectra searched in the experiment. ' },
                 { key => "#_Spectra_ID'd", value => 'The number of spectra identifed with a probability greater than the atlas threshold ' },
                 { key => "%_Spectra_ID'd", value => ''},
                 { key => '#_Distinct', value => 'The number of distinct peptide sequences, seen more than once (multiobs), in this build that are seen in this experiment. ' },
                 { key => '#_Unique', value => "The number of distinct, multiobs peptides that are seen only in this experiment (unique contribution).  This discriminates against smaller experiments, and is less useful in atlas' with a large number of experiments. " },
                 { key => '#_Progressive', value => 'Order-dependent unique multiobs peptides contributed by a given experiment.  The contribution for each experiment is based on the experiments that have gone before it, so later experiments tend to have a lower progressive contribution. ' },
                 { key => '#_Cumulative', value => 'Order-dependent cumulative number of unique multiobs peptides contributed to build by this and previous experiments. ' },
                 { key => '#_Proteins', value => 'The number of canonical (highly distinguishable, non-redundant) protein sequences identified from the peptides in this experiment.' },
                 { key => '#_Cum_Prots', value => 'Order-dependent cumulative number of canonical proteins contributed to build by this and previous experiments.<br>Counts non-human contaminants, so final tally may be greater than Canonical Proteins count in Build Overview. ' },
#                 { key => 'Sens', value => 'The sensitivity of the Peptide Prophet model at a probablility of 0.9, the percent of true positives that would be included at that threshold was used as a cutoff. ' },
                 { key => '#_Unique_Prots', value => 'The number of proteins that have peptides observed in the sample only.'},
                 { key => 'Experiment_Date', value => ''},
                 { key => 'Pubmed/DOI', value => ''}, 
                 { key => 'Other_Repos', value=>''}
        );
    $heading = 'Experiment Overview'; 
    $description = 'These values pertain to individual experiments within the atlas';

  } elsif ( $name eq 'mayu' ) {
   @entries = ( { key => 'nr_runs', value => 'Number of MS runs contributing to this build '},
  
		{ key => 'nr_files', value => 'Always 1 '},
  
		{ key => 'mFDR', value => 'Data in current row applies to all data meting this PSM (spectrum) FDR threshold. '},
		{ key => 'target_PSM', value => 'Number of non-decoy PSMs at this mFDR (counts peptides mappable to protein reference set only)'},
  
		{ key => 'decoy_PSM', value => 'Number of decoy PSMs at this mFDR '},
  
		{ key => 'FP_PSM', value => 'Number of false positive PSMs predicted by Mayu for this mFDR. Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'TP_PSM', value => 'target_PSM - FP_PSM '},
  
		{ key => 'target_pepID', value => 'Number of non-decoy unique peptides at this mFDR (counts peptides mappable to protein reference set only) '},
  
		{ key => 'decoy_pepID', value => 'Number of decoy unique peptides at this mFDR '},
  
		{ key => 'FP_pepID', value => 'Number of false positive unique peptides predicted by Mayu for this mFDR. Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'FP_pepID_stdev', value => ' '},
  
		{ key => 'TP_pepID', value => 'target_pepID - FP_pepID '},
  
		{ key => 'pepFDR', value => 'Peptide FDR (unique peptides)'},
  
		{ key => 'target_protID', value => 'Number of non-decoy protein identifications at this mFDR. Applied to the covering set of proteins -- a set that is close to the smallest necessary to explain all the pepIDs. Includes all canonicals and some possibly_distinguished. '},
  
		{ key => 'decoy_protID', value => 'Number of decoy protein identifications at this mFDR. '},
  
		{ key => 'FP_protID', value => 'Number of false postiive protein identifications predicted by Mayu for this mFDR.  Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'FP_protID_stdev', value => ' '},
  
		{ key => 'TP_protID', value => 'target_protID - FP_protID '},
  
		{ key => 'protFDR', value => 'Protein FDR. The largest value in this column is the protein FDR for the entire build. '},
		{ key => 'lFDR1, lFDR5, lFDR10,2 lFDR5', value => 'Local protein FDR, computed over the previous step (i.e. between the previous row in the table and the current row), the previous 5 steps, the previous 10 steps, and the previous 25 steps.<br>Often there are fewer than 25 rows in the table, in which case column lFDR25 is uninformative. '},
  
		{ key => 'target_protIDs, decoy_protIDs, etc.', value => 'Same as above, except for singleton proteins (those identified by only one PSM) only. '},
		{ key => 'target_protIDns, decoy_protIDns, etc.', value => 'Same as above, except for multiply-observed proteins only. '},
  
        );
    $heading = 'Mayu'; 
    $description = 'Reiter L, Claassen M, et al., Protein identification false discovery rates for very large proteomics data sets generated by tandem mass spectrometry, Mol Cell Proteomics. 2009 Nov;8(11):2405-17 ';
  }


  return unless @entries;
  return \@entries if $args{mode} eq 'entries_only';

  my $help = $atlas->get_table_help_section( name => $name,
                                             description => $description,
                                             heading => $heading,
                                             entries => \@entries,
                                             showtext => $showtext,
                                             hidetext => $hidetext  );
  return $help;

} # end get_table_help
sub get_mayu_info {
  my $mayu_data_path = shift;
  my $table = "<table width=600>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'mayu_info',
                                                  visible => 1,
                                                  tooltip => 'show/hide section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      LMTABS => 1,
      no_toggle => 1,
      divname => 'mayu_div',
      text => 'mayu decoy-based fdr analysis',
      link => $link,
      width => 920,
  );
  open (mayu, $mayu_data_path);
  my $line = <mayu>;
  my @headings = split(",",$line);
  my @sortable;
  for my $col ( @headings ) {
    push @sortable, $col, $col;
  }

  my $headings_ref = $atlas->make_sort_headings( headings => \@sortable, default => 'mfdr' );
  my @records = ();
  for $line (<mayu>) {
    chomp ($line);
    my @fields = split(",",$line);
    push @records, \@fields;
  }
  $table .= $atlas->encodeSectionTable( rows => [ $headings_ref, @records ], 
					header => 1, 
					align => [ qw(center center left
right center center right right center center left center left center center
center left center left center center center center left center center center
center left) ], 
					tr_info => $tr,
					bg_color => '#eaeaea',
          table_id => 'mayu_data',
					sortable => 1 );
  $table .= "\n</table>\n";
  return ($table);
}

sub get_datasetContri_info {
  my %args = @_;
  my $build_id = $args{build_id};
  my $table = "<table width=900>\n";
  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'datasetContri_info',
                                                  visible => 1,
                                                  tooltip => 'show/hide section',
                                                  imglink => 1,
                                                  sticky  => 1 );
  $table .= $atlas->encodeSectionHeader(
      LMTABS => 1,
      no_toggle => 1,
      divname => 'datasetContri_info_div',
      text => 'Dataset Specific Protein Identification',
      link => $link,
      width => 920,
  );

  my $sql = qq~
   SELECT A.repository_id , A.NAME, count (distinct A.ID) as cnt
   FROM (
     SELECT PID.dataset_specific_id as repository_id,
            PRL.LEVEL_NAME AS NAME,
            PID.biosequence_id as ID
     FROM $TBAT_PROTEIN_IDENTIFICATION PID 
     JOIN  $TBAT_PROTEIN_PRESENCE_LEVEL PRL
     ON (PID.PRESENCE_LEVEL_ID = PRL.PROTEIN_PRESENCE_LEVEL_ID)
     WHERE 1 = 1
           AND atlas_build_id IN ($build_id)
           AND dataset_specific_id IS NOT NULL
           AND dataset_specific_id != ''
           AND dataset_specific_id != 'OTHERS'
     UNION
     SELECT BR.DATASET_SPECIFIC_ID AS  repository_id, 
            BRT.RELATIONSHIP_NAME AS NAME, 
            BR.RELATED_BIOSEQUENCE_ID as ID 
     FROM $TBAT_BIOSEQUENCE_RELATIONSHIP BR
     JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP_TYPE BRT
     ON (BR.RELATIONSHIP_TYPE_ID = BRT.BIOSEQUENCE_RELATIONSHIP_TYPE_ID)
     WHERE 1 = 1
           AND atlas_build_id IN ($build_id)
           AND dataset_specific_id IS NOT NULL
           AND dataset_specific_id != '' 
           AND dataset_specific_id != 'OTHERS'
   ) AS A
   GROUP BY A.repository_id, A.NAME
   order by cnt DESC  
  ~;
  my @rows = $sbeams->selectSeveralColumns($sql);
  return '' if (@rows < 1);
  my %unique_prot2dataset_cnt;
  my %presence_level_names = ();
  foreach my $row(@rows){
    my ($repository_id, $name,$cnt) =@$row;
    $presence_level_names{$name} =1;
    $unique_prot2dataset_cnt{$repository_id}{$name} = $cnt;
 } 
  my @level_names = sort {$a cmp $b} keys %presence_level_names;
  $sql =qq~;
    SELECT LEVEL_NAME AS NAME, PROTEIN_PRESENCE_LEVEL_ID AS ID
    FROM $TBAT_PROTEIN_PRESENCE_LEVEL
    UNION 
    SELECT RELATIONSHIP_NAME AS NAME, BIOSEQUENCE_RELATIONSHIP_TYPE_ID AS ID
    FROM $TBAT_BIOSEQUENCE_RELATIONSHIP_TYPE 
  ~;
  my %protein_level_ids = $sbeams->selectTwoColumnHash($sql);

  my @headings =('Dataset', @level_names);
  my @sortable=();
  my @align=();
  for my $col ( @headings ) {
    $col =~ s/(\w+)/\u$1/g;
    push @sortable, $col,$col;
    push @align, 'center';
  }
  $align[0] = 'left';
  my $headings_ref = $atlas->make_sort_headings( headings => \@sortable);
  my @records = ();
  my $sql = qq~
  SELECT S.repository_identifiers 
  FROM $TBAT_SEARCH_BATCH_STATISTICS SBS
  JOIN $TBAT_ATLAS_BUILD_SEARCH_BATCH ABSB ON ABSB.atlas_build_search_batch_id = SBS.atlas_build_search_batch_id
  JOIN $TBAT_ATLAS_SEARCH_BATCH ASB ON ( ASB.atlas_search_batch_id = ABSB.atlas_search_batch_id )
  JOIN $TBAT_SAMPLE S ON (S.sample_id = ASB.sample_id)
  WHERE ABSB.atlas_build_id = $build_id
  ORDER BY rownum
  ~;

  my @repository_ids = $sbeams->selectOneColumn($sql);
  my %processed = ();
  foreach my $repository_id (@repository_ids){ 
  #foreach my $repository_id ( sort {$unique_prot2dataset_cnt{$b}{$level_names[0]} <=> $unique_prot2dataset_cnt{$a}{$level_names[0]}} keys %unique_prot2dataset_cnt){
    next if (not defined $unique_prot2dataset_cnt{$repository_id} && not defined $processed{$repository_id});
    $processed{$repository_id} =1;
    my @row =();
    push @row , $repository_id;
    foreach my $level_name (@level_names){
      my $cnt = $unique_prot2dataset_cnt{$repository_id}{$level_name} || '';
      if (defined $unique_prot2dataset_cnt{$repository_id}{$level_name}){
         my $cnt = $unique_prot2dataset_cnt{$repository_id}{$level_name};
         my $level_id = $protein_level_ids{$level_name};
         my $constraint = '';
         if($level_name =~ /^indistinguishable$/i){
            $constraint = "redundancy_constraint=1";
         }elsif ($level_name =~ /(subsumbed_by|identical)/i){
            $constraint = "redundancy_constraint=$level_id";
         }else{
           $constraint = "presence_level_constraint=$level_id&redundancy_constraint=4";
        }
         my $str  = $atlas->make_pa_tooltip( tip_text => $cnt,
           link_text => "<a href='$CGI_BASE_DIR/PeptideAtlas/GetProteins?atlas_build_id=$build_id&dataset_specific_id=$repository_id&$constraint&apply_action=QUERY'>$cnt</a>" );
         push @row , $str;
      }else{
         push @row ,'';
      }
    }
    push @records, \@row;
  }
  $table .="<p class=plot_caption>Table below shows proteins that have peptides identified in a single dataset</p>";
  $table .= $atlas->encodeSectionTable( rows => [ $headings_ref, @records ], 
					header => 1, 
					align => [ @align], 
          width => 'auto', 
          nowrap => [1..scalar(@headings)],
					tr_info => $tr,
          bg_color => '#EAEAEA',
          rows_to_show => 25,
					sortable => 1 );
  $table .= "\n</table>\n";
  return ($table);
}

# less informative sample contribution plot
sub get_build_plots {
  my %args = @_;
  my $build_id = $args{build_id};
  my $chart_div = $args{chart_div};
  my $sample_arrayref = $args{sample_arrayref};
  my $column_name_ref = $args{column_name_ref};
  my $table = "<TABLE WIDTH=900>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'build_plot',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      text => 'Experiment Contribution Plot',
      span => 4,
      trinfo => "class=hoverable",
      LMTABS => 1,
      divname => 'experiment_contribution_div',
      no_toggle => 1,
      link => $link,
  );

  my $chart = $atlas->displayExperiment_contri_plotly(
      tr => $tr,
      data_ref=>$sample_arrayref,
      column_name_ref => $column_name_ref, 
  );

  $table .= qq~
    $chart
    </TABLE>
  ~;
 
  return $table;
}

###############################################################################
# displaySampleMap
###############################################################################
sub getSampleMapDisplay {
#  my $self = shift;
#  my $sbeams = $self->getSBEAMS();
  my %args = @_;

  return unless $args{build_id};
  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'BD_sample_map',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  my $header .= $atlas->encodeSectionHeader( text => 'Experiment Protein Map:',
      LMTABS => 1,
      no_toggle => 1,
      divname => 'experiment_protein_map_div',
     'link' => $link );

  my $html = '';

  my $top = ( $args{show_all_prots} ) ? 20000 : 200;
  my $prot_sql = qq~
	SELECT TOP $top matched_biosequence_id, CAST(biosequence_seq AS VARCHAR(2000)) seq, biosequence_name
  FROM  $TBAT_PEPTIDE_INSTANCE PI 
  JOIN $TBAT_PEPTIDE_MAPPING PM ON PM.peptide_instance_id = PI.peptide_instance_id
  JOIN $TBAT_BIOSEQUENCE B ON PM.matched_biosequence_id = B.biosequence_id
	WHERE PI.atlas_build_id = $args{build_id}
	GROUP BY matched_biosequence_id,  CAST(biosequence_seq AS VARCHAR(2000)), biosequence_name
	ORDER BY SUM(PI.n_observations) DESC 
	~;

  my $t1 = time;
  my @prots = $sbeams->selectSeveralColumns($prot_sql);
  my $t2 = time;
  my $td = $t2 - $t1;
  $log->debug( "Top 200 proteins SQL: $td" );
  my @ordered_prots;
  my %seen_sequences;
  my @bioseq_ids;
  my $cntr;
  for my $row ( @prots ) {
      # no dups
      next if $seen_sequences{$row->[1]};
      $seen_sequences{$row->[1]}++;
      $cntr++;
      push @ordered_prots, $row->[2];
      push @bioseq_ids, $row->[0];
      last if scalar( @ordered_prots ) >= 25 && !$args{show_all_prots};
      $cntr++;
  }
  my $bioseq_ids = join( ',', @bioseq_ids );
  return '' unless $bioseq_ids;
  
  my $sql = qq~
	SELECT biosequence_name, SUM(PISB.n_observations) total_cnts,
	SB.atlas_search_batch_id, sample_tag 
  FROM $TBAT_ATLAS_SEARCH_BATCH SB
  JOIN $TBAT_SAMPLE S ON s.sample_id = SB.sample_id
  JOIN $TBAT_PEPTIDE_INSTANCE_SEARCH_BATCH PISB ON PISB.atlas_search_batch_id = SB.atlas_search_batch_id
  JOIN $TBAT_PEPTIDE_INSTANCE PI ON PI.peptide_instance_id = PISB.peptide_instance_id
  JOIN $TBAT_PEPTIDE_MAPPING PM ON PM.peptide_instance_id = PI.peptide_instance_id
  JOIN $TBAT_BIOSEQUENCE B ON B.biosequence_id = PM.matched_biosequence_id
  JOIN $TBAT_ATLAS_BUILD AB ON ( AB.biosequence_set_id = B.biosequence_set_id AND AB.atlas_build_id = PI.atlas_build_id ) 
  WHERE AB.atlas_Build_id = $args{build_id}
	AND biosequence_id IN ( $bioseq_ids )
	GROUP BY biosequence_name, SB.atlas_search_batch_id, sample_tag
  ~;


  my $t1 = time;
  my @samples = $sbeams->selectSeveralColumns($sql);
  my $t2 = time;
  my $td = $t2 - $t1;
  $log->debug( "Sum observations SQL: $td" );
  
  my %samples;
  my %proteins;
  for my $row ( @samples ) {
      my $key = $row->[3] . '::::' . $row->[2];
      $samples{$key}++;
      $proteins{$row->[0]} ||= {};
      $proteins{$row->[0]}->{$key} += $row->[1];
  }

  my @prot_order;

  my $array_def = qq~
  <script type="text/javascript">
  google.setOnLoadCallback(drawHeatMap);
  function drawHeatMap() {
  var data = new google.visualization.DataTable();
  data.addColumn('string', 'Sample Name');
  ~;

  my $ie_max = 50;
  my $ie = ( $ENV{HTTP_USER_AGENT} =~ /MSIE/i ) ? 1 : 0;

  my @peps;
  my $cnt = 0;
  my @sample_names = ( 'Protein_Accession' );
  for my $sa ( sort( keys( %samples ) ) ) {
      my ( $name, $id ) = split "::::", $sa;
      push @sample_names, $name;
      $array_def .= "    data.addColumn('number', '$name');\n";
      last if $ie && $cnt++ >= $ie_max;
  }
  $array_def .= "DEFINE_ROWS_HERE\n";
  
  my $content = join( "\t", @sample_names ) . "\n";
  my $row = 0;
  my $col = 0;
  my $max = 0;
  my %output;
  if ( $args{show_all_prots} ) {
      for my $protein ( @ordered_prots ) {
	  $col = 0;
	  $array_def .= "    data.setValue( $row, $col, '$protein' );\n";
	  $col++;
	  my $colcnt = 0;
	  my @row = ($protein);
	  for my $sample ( sort( keys( %samples ) ) ) {
	      my ( $name, $id ) = split "::::", $sample;
#        last if $ie && $colcnt++ > $ie_max;
	      my $cnt = 0;
	      if ( $proteins{$protein}->{$sample} ) {
		  #        my $cnt = $proteins{$protein}->{$sample};
		  $cnt = log( 1+ $proteins{$protein}->{$sample} )/log(10);
		  $max = ( $cnt > $max ) ? $cnt : $max;
#          $array_def .= "    data.setValue( $row, $col, $cnt );\n";
	      }
	      push @row, $cnt;
	      $col++;
	  }
	  $content .= join( "\t", @row ) . "\n";
	  $row++;
      }
      my $filename = $sbeams->writeSBEAMSTempFile( content => $content );
      $log->error( "TSVFILE is $filename!" );
  } else {
      for my $protein ( @ordered_prots ) {
	  $col = 0;
	  $array_def .= "    data.setValue( $row, $col, '$protein' );\n";
	  $col++;
	  my $colcnt = 0;
	  for my $sample ( sort( keys( %samples ) ) ) {
	      my ( $name, $id ) = split "::::", $sample;
	      last if $ie && $colcnt++ > $ie_max;
	      if ( $proteins{$protein}->{$sample} ) {
		  #        my $cnt = $proteins{$protein}->{$sample};
		  my $cnt = log( 1+ $proteins{$protein}->{$sample} )/log(10);
		  $max = ( $cnt > $max ) ? $cnt : $max;
		  $array_def .= "    data.setValue( $row, $col, $cnt );\n";
	      }
	      $col++;
	  }
	  $row++;
      }
  }
  $array_def =~ s/DEFINE_ROWS_HERE/data.addRows($row);/;
  my $num_colors = ( $max > 64 ) ? 64 : $max;
  my $num_colors = 256;
  $array_def .= qq~
  heatmap = new org.systemsbiology.visualization.BioHeatMap(document.getElementById('heatmapContainer'));
  heatmap.draw(data, {numberOfColors:$num_colors,passThroughBlack:false,startColor:{r:255,g:255,b:255,a:1},endColor:{r:100,g:100,b:100,a:1},emptyDataColor:{r:256,g:256,b:256,a:1}});
  }
  </script>
  ~;
  
  my $content = qq~
  <BR><BR>
  <TABLE WIDTH=800>
  $header

  <script type="text/javascript" src="$HTML_BASE_DIR/usr/javascript/jsapi"></script>
  <script type="text/javascript" src="$HTML_BASE_DIR/usr/javascript/ga.js"></script>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/prototype/1.6.1.0/prototype.js"></script>
  <script type="text/javascript">
  google.load("visualization", "1", {});
  </script>
  <script type="text/javascript" src="$HTML_BASE_DIR/usr/javascript/main/js/load.js"></script>
  <script type="text/javascript">
  systemsbiology.load("visualization", "1.0", {packages:["bioheatmap"]});
  </script>
  
  $array_def
  <TR $tr><TD> <DIV ID="heatmapContainer"></DIV> </TD></TR>  
  </TABLE>
  ~;
  
  return $content;
} # end getSampleMapDisplay


# General build info, date, name, organism, specialty, default
sub get_build_overview {
  my $build_id = shift;
  
  # Get a list of accessible project_ids
  my @project_ids = $sbeams->getAccessibleProjects();
  my $project_ids = join( ",", @project_ids ) || '0';

  my $build_info = $sbeams->selectrow_hashref( <<"  BUILD" );
  SELECT atlas_build_name, probability_threshold, atlas_build_description, 
  build_date, set_name, protpro_PSM_FDR_per_expt
  FROM $TBAT_ATLAS_BUILD AB JOIN $TBAT_BIOSEQUENCE_SET BS 
  ON AB.biosequence_set_id = BS.biosequence_set_id
  WHERE atlas_build_id = $build_id 
  AND AB.record_status <> 'D'
  BUILD

#  for my $k ( keys( %$build_info ) ) { print STDERR "$k => $build_info->{$k}\n"; }

  my $pep_count = $sbeams->selectrow_hashref( <<"  PEP" );
  SELECT COUNT(*) cnt,  SUM(n_observations) obs
  FROM $TBAT_PEPTIDE_INSTANCE 
  WHERE atlas_build_id = $build_id 
  PEP

  my $pep_count = $sbeams->selectrow_hashref( <<"  PEP" );
  SELECT COUNT(*) cnt,  SUM(n_observations) obs
	FROM (
		SELECT DISTINCT PI.PEPTIDE_INSTANCE_ID, PI.N_OBSERVATIONS
		FROM $TBAT_PEPTIDE_INSTANCE PI
		JOIN $TBAT_PEPTIDE_MAPPING PM ON (PI.PEPTIDE_INSTANCE_ID = PM.PEPTIDE_INSTANCE_ID)
		JOIN $TBAT_BIOSEQUENCE B ON (PM.MATCHED_BIOSEQUENCE_ID = B.BIOSEQUENCE_ID)
		WHERE  ATLAS_BUILD_ID= $build_id AND B.BIOSEQUENCE_NAME NOT LIKE 'DECOY%'
          AND B.BIOSEQUENCE_NAME NOT LIKE 'CONTAM%'
	) A
  PEP

  my $multi_pep_count = $sbeams->selectrow_hashref( <<"  MPEP" );
  SELECT COUNT(*) cnt, SUM(n_observations) obs
  FROM $TBAT_PEPTIDE_INSTANCE  
  WHERE atlas_build_id = $build_id 
  AND n_observations > 1 
  MPEP

  my $smpl_count = $sbeams->selectrow_hashref( <<"  SMPL" );
  SELECT COUNT(*) cnt FROM $TBAT_ATLAS_BUILD_SAMPLE 
  WHERE atlas_build_id = $build_id
  SMPL

  my %prot_count = $sbeams->selectTwoColumnHash( <<"  PROT" );
  SELECT PPL.level_name, COUNT(BS.biosequence_name) cnt
  FROM $TBAT_PROTEIN_IDENTIFICATION PID
  JOIN $TBAT_PROTEIN_PRESENCE_LEVEL PPL
  ON PPL.protein_presence_level_id = PID.presence_level_id
  JOIN $TBAT_BIOSEQUENCE BS
  ON BS.biosequence_id = PID.biosequence_id
  WHERE PID.atlas_build_id = $build_id
  AND PPL.level_name in 
      ('canonical', 'indistinguishable representative', 
       'marginally distinguished', 'representative',
       'possibly_distinguished','weak', 'insufficient evidence')
  AND BS.biosequence_name NOT LIKE 'DECOY%'
  AND BS.biosequence_name NOT LIKE '%UNMAPPED%'
  AND BS.biosequence_name NOT LIKE '%CONTAM%'
  AND BS.biosequence_desc NOT LIKE '%common contaminant%'
  GROUP BY PPL.level_name 
  PROT


  my $table = "<TABLE WIDTH=800>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'build_overview',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      LMTABS => 1,
      no_toggle => 1,
      divname => 'build_overview_div',
      text => 'Build Overview',
      span => 4,
      link => $link
  );

  my $spc = $sbeams->getGifSpacer(500);
  $build_info->{build_date} =~ s/^([0-9-]+).*$/$1/;
#  $/mpl_count->{cnt} = sprintf( "% 10i", $smpl_count->{cnt} );
#  $smpl_count->{cnt} =~ s/ /&nbsp;/g;
#  $multi_pep_count->{cnt} = sprintf( "% 10i", $multi_pep_count->{cnt} );
#  $multi_pep_count->{cnt} =~ s/ /&nbsp;/g;
#  $multi_pep_count->{obs} = sprintf( "% 10i", $multi_pep_count->{obs} );
# $multi_pep_count->{obs} =~ s/ /&nbsp;/g;
  
  
#  my $deltacnt = $multi_pep_count->{cnt} - $pep_count->{cnt};
#  my $deltaobs = $multi_pep_count->{obs} - $pep_count->{obs};
#  $table .= $atlas->encodeSectionItem( key   => 'Deltas ', tr_info => $tr,
#                                          value => "$deltacnt ( $deltaobs )" ) . "\n";

  if ($build_info->{protpro_PSM_FDR_per_expt} <= 0) {
    $build_info->{protpro_PSM_FDR_per_expt} =  $sbeams->makeInactiveText( 'n/a' );
  } else {
    $build_info->{protpro_PSM_FDR_per_expt} = sprintf( "%0.7f", $build_info->{protpro_PSM_FDR_per_expt} );
    $build_info->{protpro_PSM_FDR_per_expt} =~ s/ /&nbsp;/g;
  }
  if ($build_info->{probability_threshold} <= 0) {
    $build_info->{probability_threshold} = $sbeams->makeInactiveText( 'n/a' );
  } else {
    $build_info->{probability_threshold} = sprintf( "%0.4f", $build_info->{probability_threshold} );
    $build_info->{probability_threshold} =~ s/ /&nbsp;/g;
  }

  $table .= $atlas->encodeSectionItem( key   => 'Build Name', tr_info => $tr,
                            value => $build_info->{atlas_build_name} . $spc, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Build Description', tr_info => $tr,
                            value => $build_info->{atlas_build_description}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Reference Database', tr_info => $tr,
                            value => $build_info->{set_name}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Build Date', tr_info => $tr,
                            value => $build_info->{build_date} ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => '# Experiments', tr_info => $tr,
                            value => $smpl_count->{cnt}, align => 'right' ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'PSM FDR threshold', tr_info => $tr,
                            value => $build_info->{protpro_PSM_FDR_per_expt}, align => 'right' ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Probability threshold', tr_info => $tr,
                            value => $build_info->{probability_threshold}, align => 'right' ) . "\n";

  $table .= $atlas->encodeSectionItem( key   => 'Total Observations', tr_info => $tr,
                                          #value => "$multi_pep_count->{obs} ( $pep_count->{obs}* )" ) . "\n";
                                          value => "$pep_count->{obs}", align => 'right' ) . "\n";

  $table .= $atlas->encodeSectionItem( key   => 'Distinct Peptides', tr_info => $tr,
                                          #value => "$multi_pep_count->{cnt} ( $pep_count->{cnt}* )" ) . "\n";
                                          value => "$pep_count->{cnt}", align => 'right' ) . "\n";

  $table .= $atlas->encodeSectionItem( key   => 'Protein Presence Levels', tr_info => $tr, value => '', align => 'right' ) . "\n";
  foreach my $key (sort {$a cmp $b} keys %prot_count){
     my $level = $key;
     $level =~ s/\_/ /g;
     $level =~ s/(\w+)/\u$1/g; 
     $table .= $atlas->encodeSectionItem( key   => "&#8195;$level", tr_info => $tr, value => $prot_count{$key}, align => 'right' ) . "\n";
  }
#  $table .= $atlas->encodeSectionDblItem( key   => ['Build Date', '# Samples'], tr_info => $tr,
#                            value => [$build_info->{build_date}, $smpl_count->{cnt}] ) . "\n";
#  $table .= $atlas->encodeSectionDblItem( key   => ['Total Observations', 'Distinct Peptides'], 
#                                          tr_info => $tr,
#                                          value => [$pep_count->{obs}, $pep_count->{cnt}] ) . "\n";
#  $table .= $atlas->encodeSectionDblItem( key   => ['Total Observations n_obs > 1', 'Distinct Peptides n_obs > 1'], 
#                                          tr_info => $tr,
#                                          value => [$multi_pep_count->{obs}, $multi_pep_count->{cnt}] ) . "\n";

  $table .= "</TABLE>\n";
  return $table;

}

# Peptide build stats
sub get_sample_info {

  my $build_id = shift;

  # Get a list of accessible project_ids
  my @project_ids = $sbeams->getAccessibleProjects();
  my $project_ids = join( ",", @project_ids ) || '0';

  my $table = "<TABLE WIDTH=600>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'sample_contribution',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  my $sql =<<"  END";
  SELECT S.sample_id, sample_tag, SBS.n_runs, SBS.n_searched_spectra,
         n_good_spectra, FORMAT((n_good_spectra*1.00)/SBS.n_searched_spectra/1.00, 'P2') , n_distinct_multiobs_peptides,
         n_uniq_contributed_peptides, n_progressive_peptides,
         cumulative_n_peptides, n_canonical_proteins, cumulative_n_proteins,
         model_90_error_rate,CONVERT(VARCHAR(10), PE.date_created, 126) AS [YYYY-MM-DD],
         A.Pubmed_ID, S.repository_identifiers
  FROM $TBAT_SEARCH_BATCH_STATISTICS SBS 
  JOIN $TBAT_ATLAS_BUILD_SEARCH_BATCH ABSB ON ABSB.atlas_build_search_batch_id = SBS.atlas_build_search_batch_id
  JOIN $TBAT_ATLAS_SEARCH_BATCH ASB ON ( ASB.atlas_search_batch_id = ABSB.atlas_search_batch_id )
  JOIN $TBAT_SAMPLE S ON (S.sample_id = ASB.sample_id)
  LEFT JOIN (
		SELECT DISTINCT SAMPLE_ID, 
		STUFF(
			(SELECT DISTINCT ',' + CONVERT (VARCHAR , P.PUBMED_ID )
			FROM $TBAT_SAMPLE_PUBLICATION F2
			JOIN $TBAT_PUBLICATION P ON (P.PUBLICATION_ID = F2.PUBLICATION_ID)
			WHERE F1.SAMPLE_ID = F2.SAMPLE_ID
			FOR XML PATH ('')),1, 1, '') AS Pubmed_ID
		FROM $TBAT_SAMPLE_PUBLICATION F1
  ) AS A ON (A.SAMPLE_ID = S.SAMPLE_ID) 
  JOIN PROTEOMICS.DBO.SEARCH_BATCH PSB  ON (PSB.SEARCH_BATCH_ID = ASB.PROTEOMICS_SEARCH_BATCH_ID)
  JOIN PROTEOMICS.DBO.PROTEOMICS_EXPERIMENT PE ON (PE.EXPERIMENT_ID = PSB.EXPERIMENT_ID)
  WHERE ABSB.atlas_build_id = $build_id
  ORDER BY rownum, cumulative_n_peptides, ABSB.atlas_build_search_batch_id ASC
  END

	my $t1 = time;
  my @sample_info = $sbeams->selectSeveralColumns ( $sql );
	my $t2 = time;
	my $td = $t2 - $t1;
  $log->debug( "build table SQL: $td" );

  $sql = qq~
   SELECT A.sample_id , count (distinct A.id)
   FROM (
		 SELECT sample_specific_id as sample_id, biosequence_id as id 
		 FROM $TBAT_PROTEIN_IDENTIFICATION 
		 WHERE 1 = 1
					 AND atlas_build_id IN ($build_id)
					 AND sample_specific_id is not null
		 UNION 
		 SELECT sample_specific_id as sample_id, related_biosequence_id as id 
		 FROM $TBAT_BIOSEQUENCE_RELATIONSHIP
		 WHERE 1 = 1
					 AND atlas_build_id IN ($build_id)
					 AND sample_specific_id is not null
   ) AS A
   GROUP BY A.sample_id
	~;
	my %unique_prot2sample_cnt = $sbeams->selectTwoColumnHash($sql);
  # Massage/format some of the columns in the sample info just retrieved
  my @samples;
  for my $batch ( @sample_info ) {
    $show_image++;
    # if these aren't defined, set to zero
    for my $idx ( 7, 8, 9,10,11 ) { $batch->[$idx] ||= 0; }
    for my $idx ( 12 ) {
      if (defined $unique_prot2sample_cnt{$batch->[0]}){
         $batch->[$idx] = $unique_prot2sample_cnt{$batch->[0]};
         $batch->[$idx] = $atlas->make_pa_tooltip( tip_text => $batch->[$idx],
           link_text => "<a href='$CGI_BASE_DIR/PeptideAtlas/GetProteins?atlas_build_id=$build_id&sample_specific_id=$batch->[0]&apply_action=QUERY'>$batch->[$idx]</a>" );
      }else{
        $batch->[$idx] = '';
      }
    }
    for my $idx (1) {
      $batch->[$idx] = $atlas->make_pa_tooltip( tip_text => $batch->[$idx],
          link_text => "<a href='$CGI_BASE_DIR/$SBEAMS_PART/ManageTable.cgi?TABLE_NAME=AT_SAMPLE&sample_id=$batch->[0]'>$batch->[$idx]</a>" );
    }
    for my $idx (14) {
      next if ( ! $batch->[$idx]);
      my @ids = split(",", $batch->[$idx]);
      $batch->[$idx] ='';
      foreach my $id(@ids){
        if ($id =~ /^\d+$/){
          $batch->[$idx] .= "<a href='http://www.ncbi.nlm.nih.gov/pubmed/?term=$id'>$id</a>,";
        }else{
          $batch->[$idx] .= "<a href='https://doi.org/$id'>$id</a>,";
        }
      }
      $batch->[$idx] =~ s/,$//;
    }
    for my $idx (15) {
      next if ( ! $batch->[$idx]);
      my @ids = split(/[,;]/, $batch->[$idx]);
      $batch->[$idx] ='';
      foreach my $id(@ids){
        my $link = '';
        $id =~ s/\s+//g;
        if ($id =~ /PXD/){
          $link = "http://proteomecentral.proteomexchange.org/cgi/GetDataset?ID=";
        }elsif($id =~ /PASS/){
          $link = "http://www.peptideatlas.org/PASS/";
        }elsif($id =~ /S\d+/){
          $link = "https://cptac-data-portal.georgetown.edu/study-summary/";
        }

        $batch->[$idx] .= "<a href='$link$id'>$id</a>,";
      }
      $batch->[$idx] =~ s/,$//;
    }

    push @samples, $batch;

  }

  my $dag = '<sup>&dagger;</sup>';
  
  my $heading_info = get_table_help( table => 'batch', mode => 'entries_only' );
  my @headings;
  my @column_names;
  for my $row ( @$heading_info ) {
    push @headings, $row->{key}, $row->{value};
    push @column_names, $row->{key};
  }
#  for my $h ( @headings ) {
#    $log->info( $h );
#  }

  my $headings_ref = $atlas->make_sort_headings( headings => \@headings, default => '#_Cumulative' );

  $table .= $atlas->encodeSectionHeader(
      LMTABS => 1,
      no_toggle => 1,
      text => 'Experiment Contribution',
      divname => 'experiment_contribution_div',
      link => $link,
      width => 920
  );


  $table .= $atlas->encodeSectionTable( rows => [ $headings_ref, @samples ], 
                                        header => 1, 
                                        nowrap => [1..scalar(@headings)], 
                                        table_id => 'sample_contribution',
                                        align => [ qw(center left center center center center center center center center center center center center) ], 
                                        tr_info => $tr,
                                        bg_color => '#EAEAEA',
                                        rows_to_show => 25,
                                        sortable => 1 );
  $table .= '</TABLE>';
  return ( $table, \@samples, \@column_names);

}


sub process_params {
  my $params = {};
  $sbeams->parse_input_parameters( q => $q, parameters_ref => $params );
  $sbeams->processStandardParameters( parameters_ref => $params );
  return( $params );
}

sub get_build_path {
  my %args = @_;
  return unless $args{build_id};
  my $path = $atlas->getAtlasBuildDirectory( atlas_build_id => $args{build_id} );
  $path =~ s/DATA_FILES//;
  return $path;
}

sub get_draw_chart_function {
	my $sample_arrayref = shift || return '';

	my @samples;
	for my $s ( @{$sample_arrayref} ) {
		push @samples, [ $s->[1], $s->[6], $s->[9] ];
	}
	my $GV = SBEAMS::Connection::GoogleVisualization->new();
  my ( $chart ) = $GV->setDrawBarChart(  samples => \@samples,
                                    	data_types => [ 'string', 'number', 'number' ],
                                      	headings => [ 'Sample', 'Distinct peptides (n_obs > 1)', 'Cumulative peptides (n_obs > 1)' ],
                                      show_table => 0,
                                 truncate_labels => 24
 	);
	my $header = $GV->getHeaderInfo();
  return ( $chart, $header );
}
