#!/usr/local/bin/perl

###############################################################################
# $Id: $
#
# SBEAMS is Copyright (C) 2000-2007 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
#use vars qw ($sbeams);
use lib qw (../../lib/perl);
#use CGI::Carp qw(fatalsToBrowser croak);

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;
use SBEAMS::Connection::GoogleVisualization;
use SBEAMS::Connection::TabMenu;


use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;


###############################################################################
# Global Variables
###############################################################################
my $sbeams = new SBEAMS::Connection;
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);
my $atlas = new SBEAMS::PeptideAtlas;
$atlas->setSBEAMS($sbeams);

# Read input parameters
my $params = process_params();

my $show_image = 0;


{ # Main 

    # Authenticate or exit
    my $username = $sbeams->Authenticate( permitted_work_groups_ref => 
                                                      ['PeptideAtlas_user',
                                                      'PeptideAtlas_admin', 
                                                      'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
                                                      # connect_read_only=>1,
                                                      allow_anonymous_access=>1,
                                              ) || exit;


    ## get current settings
    my $project_id = $sbeams->getCurrent_project_id();

    my $build_help = get_table_help( 'build' );
    my $batch_help = get_table_help( 'batch' );

    my $page = $sbeams->getGifSpacer( 700 ) . "<BR>\n";
  #### Get the HTML to display the tabs
    my $tabMenu = $atlas->getTabMenu(
      parameters_ref => $params,
      program_name => 'buildDetails',
    );
#		my $back = $sbeams->getBackForm();
    $page .=<<"    END";
		$tabMenu

    <P>
    This shows some information about the currently selected build.  Peptide
    numbers are for peptides seen more than once, except as denoted by an
    asterisk (*).
    <!--You can view the details of other builds by selecting an 
    item in the list below.  Although this will change build whose statistics 
    are to be displayed, it will not change your currently selected build.-->
    </P>
    $build_help
    END

    # We are not forcing the user into the new build - is that correct?
    my $build_id = $params->{atlas_build_id} || $atlas->getCurrentAtlasBuildID(parameters_ref => $params);
    my $valid_build = 1;
    if ( !grep /^$build_id$/, $atlas->getAccessibleBuilds() ) {
#      die( "Access to specified build is not allowed" );
       $atlas->display_page_header();
       $build_id = $atlas->getCurrentAtlasBuildID(parameters_ref => $params);
		   $atlas->display_page_footer();
       exit;
    }


    # Add general section 
#  print STDERR 'build overV ' . time() . "\n";
    $page .= get_build_overview ( $build_id );
#  print STDERR 'sample info ' . time() . "\n";
    $page .= "<BR>$batch_help\n";
		my ( $sample_table, $sample_arrayref ) = get_sample_info( $build_id );
    $page .= $sample_table;
    $page .= "<BR>\n";

    # Print what we already have, speed up apparent page loading time.
    my ( $chart_div, $header ) = get_draw_chart_function( $sample_arrayref );
    $atlas->display_page_header( header_info => $header, project_id => $project_id, onload => 'sortables_init()', sortable => 1 );
		print $page;

#  print STDERR 'showtime ' . time() . "\n";
    # Add peptide stats section
    # Add graphic

    $page = get_build_plots ( $build_id, $chart_div ) if $show_image;
		print $page;
    $page = getSampleMapDisplay ( build_id => $build_id );
		print $page;

		$atlas->display_page_footer();

} # end main

sub get_table_help {
  my $name = shift;
  return '' unless $name;
  my @entries;
  my $hidetext;
  my $showtext;
  my $heading;
  my $description;

  if ( $name eq 'build' ) {  
    @entries = ( { key => 'Build Name', value => 'The simple name for this build, usually contains organism, prophet cutoff, and other information. ' },
                 { key => 'Build Description', value => 'More detailed information about build. ' },
                 { key => 'Reference Database', value => 'Database to which peptides were mapped, generally different than search database.  This mapping is done by running BLAST, and allows the peptides to be mapped the the organism\'s genomic sequence. ' },
                 { key => 'Build Date', value => 'Date upon which build was finished. ' },
                 { key => '# Samples', value => 'The number of individual samples which comprise this build.  Each sample contains one or more LCMS/MS runs, and generally corresponds to a single scientific experiment.' } ,
                 { key => 'Distinct Peptides', value => 'This shows the number of distinct peptide sequences that were seen in this build.  Observations of the peptide in different charge states or with different modifications are coalesced.  The first number shows the distinct sequences that were seen more than once, the asterisked number in parenthesis shows a count of all distinct observed peptide sequences  ' } ,
                 { key => 'Total Observations ', value => 'The total number of spectra that yeilded identifications above the build threshold, generally 0.9.  Observations of the same base peptide sequences multiple times or in various charge states/modifications, whould each contribute to the total' }
        );
                 
    $showtext = 'show row descriptions';
    $hidetext = 'hide row descriptions';
    $heading = 'Build Overview';
    $description= 'These values pertain to the atlas build as a whole';


  } elsif ( $name eq 'batch' ) {
    @entries = ( { key => 'ID', value => 'Database ID for this sample (search batch) ' },
                 { key => 'Sample Name', value => 'Simple name for this sample/experiment. ' },
                 { key => '# Spectra Searched', value => 'The total number of spectra searched in the sample. ' },
                 { key => "# Spectra ID'd", value => 'The number of spectra identifed with a probability greater than the atlas threshold ' },
                 { key => '# Distinct', value => 'The number of distinct peptide sequences, seen more than once (multiobs), in this build that are seen in this sample. ' },
                 { key => '# Unique', value => "The number of distinct, multiobs peptides that are seen only in this sample (unique contribution).  This discriminates against smaller samples, and is less useful in atlas' with a large number of samples. " },
                 { key => '# Progressive', value => 'Order-dependant unique multiobs peptides contributed by a given sample.  The contribution for each sample is based on the samples that have gone before it, so later samples tend to have a lower progressive contribution. ' },
                 { key => '# Cumulative', value => 'Order-dependant cumulative number of unique multiobs peptides contributed to build by this and previous samples. ' },
#                 { key => 'Sens', value => 'The sensitivity of the Peptide Prophet model at a probablility of 0.9, the percent of true positives that would be included at that threshold was used as a cutoff. ' },
                 { key => 'FDR (%)', value => 'The error rate of peptides above the threshold Peptide Prophet model at a probablility of 0.9, the percent of false positives that would be included at the build threshold. ' }
        );
    $heading = 'Build Overview';
    $description= 'These values pertain to the atlas build as a whole';
    $heading = 'Sample Overview'; 
    $description = 'These values pertain to individual samples within the atlas';

  }

  return unless @entries;
  my $help = $atlas->get_table_help_section( name => $name,
                                             description => $description,
                                             heading => $heading,
                                             entries => \@entries,
                                             showtext => $showtext,
                                             hidetext => $hidetext  );
  return $help;

} # end get_table_help

sub get_build_plots {
  my $build_id = shift;
  my $chart_div = shift;
  my $table = "<TABLE WIDTH=900>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'build_plot',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      text => 'Sample Contribution Plot',
      span => 4,
      link => $link
  );

#		<DIV ALIGN=center><H3>Experiment Contribution Plot</H3></DIV>
#  <TR $tr><TD><IMG SRC=buildPlot?atlas_build_id=$build_id></IMG></TD></TR>
#    $chart_div
  $table .=<<"  END";
  <TR $tr><TD>&nbsp;</TD></TR>
  <TR $tr><TD class=plot_caption>Plot showing the number of distinct (n_obs > 1) peptides contributed by each sample, and the cumulative number of distinct (n_obs > 1) peptides for the build as of that sample.</TD></TR>
  <TR $tr><TD>&nbsp;</TD></TR>
  <TR $tr><TD>$chart_div</TD></TR>
  <TR $tr><TD>&nbsp;</TD></TR>
  END
   
  my $cp_img_path = "$PHYSICAL_BASE_DIR/images/tmp";
  my $img_path = "$HTML_BASE_DIR/images/tmp";
  my $build_path = get_build_path( build_id => $build_id );
  my $build_image_rows =<<"  END";
  <TR $tr><TD class=plot_caption>Plot showing the cumulative number of multiply observed peptides contributed by each sample.  Height of bar is cumulative number of n_obs > 1 peptides, blue color is number of n_obs > 1 peptides above threshold, width of the bar (x-axis) shows the number of spectra identified above the threshold, for each samle</TD></TR>
  <TR $tr><TD><IMG WIDTH=800 SRC=$img_path/${build_id}_ncumpep_vs_nspec-multobs.gif></IMG></TD></TR> 
  END
	if ( -e "$build_path/analysis/ncumpep_vs_nspec-multobs.gif" ) {
    system "cp  $build_path/analysis/ncumpep_vs_nspec-multobs.gif $cp_img_path/${build_id}_ncumpep_vs_nspec-multobs.gif";
  }

  if ( -e "$cp_img_path/${build_id}_ncumpep_vs_nspec-multobs.gif" ) {
    $table .= $build_image_rows;
  } 

  $table .= "\n</TABLE>\n";
	
  return $table;
}

###############################################################################
# displaySampleMap
###############################################################################
sub getSampleMapDisplay {
#  my $self = shift;
#  my $sbeams = $self->getSBEAMS();
  my %args = @_;
  
	return unless $args{build_id};
  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'BD_sample_map',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  my $header .= $atlas->encodeSectionHeader( text => 'Sample Protein Map:',
                                             'link' => $link );
  
  my $html = '';
  
  my $prot_sql = qq~
	SELECT TOP 250 matched_biosequence_id, CAST(biosequence_seq AS VARCHAR(2000)) seq, biosequence_name
  FROM  $TBAT_PEPTIDE_INSTANCE PI 
  JOIN $TBAT_PEPTIDE_MAPPING PM ON PM.peptide_instance_id = PI.peptide_instance_id
  JOIN $TBAT_BIOSEQUENCE B ON PM.matched_biosequence_id = B.biosequence_id
	WHERE PI.atlas_build_id = $args{build_id}
	GROUP BY matched_biosequence_id,  CAST(biosequence_seq AS VARCHAR(2000)), biosequence_name
	ORDER BY SUM(PI.n_observations) DESC 
	~;
	my $t1 = time;
  my @prots = $sbeams->selectSeveralColumns($prot_sql);
	my $t2 = time;
	my $td = $t2 - $t1;
	$log->debug( "prots query $td" );
	my @ordered_prots;
	my %seen_sequences;
  my @bioseq_ids;
	my $cntr;
	for my $row ( @prots ) {
		# no dups
		next if $seen_sequences{$row->[1]};
		$seen_sequences{$row->[1]}++;
		$cntr++;
		push @ordered_prots, $row->[2];
		push @bioseq_ids, $row->[0];
		last if scalar( @ordered_prots ) >= 100;
		$cntr++;
	}
#	$log->debug( "looped a while? $cntr" );
  my $bioseq_ids = join( ',', @bioseq_ids );
#	$log->debug( "bioseq ids $bioseq_ids?, scalar bio is " . scalar(@bioseq_ids ) . ' scalar ordered is ' . scalar( @ordered_prots) );
  
  my $sql = qq~
	SELECT biosequence_name, SUM(PISB.n_observations) total_cnts,
	SB.atlas_search_batch_id, sample_tag -- , peptide_accession
  FROM $TBAT_ATLAS_SEARCH_BATCH SB
  JOIN $TBAT_SAMPLE S ON s.sample_id = SB.sample_id
  JOIN $TBAT_PEPTIDE_INSTANCE_SEARCH_BATCH PISB ON PISB.atlas_search_batch_id = SB.atlas_search_batch_id
  JOIN $TBAT_PEPTIDE_INSTANCE PI ON PI.peptide_instance_id = PISB.peptide_instance_id
--  JOIN $TBAT_PEPTIDE P ON P.peptide_id = PI.peptide_id
  JOIN $TBAT_PEPTIDE_MAPPING PM ON PM.peptide_instance_id = PI.peptide_instance_id
  JOIN $TBAT_BIOSEQUENCE B ON B.biosequence_id = PM.matched_biosequence_id
  JOIN $TBAT_ATLAS_BUILD AB ON ( AB.biosequence_set_id = B.biosequence_set_id AND AB.atlas_build_id = PI.atlas_build_id ) 
  WHERE AB.atlas_Build_id = $args{build_id}
	AND biosequence_id IN ( $bioseq_ids )
	GROUP BY biosequence_name, SB.atlas_search_batch_id, sample_tag
--	ORDER BY biosequence_name, SB.atlas_search_batch_id, sample_tag
  ~;
  
	$log->debug( $sql );
	my $t1 = time;
  my @samples = $sbeams->selectSeveralColumns($sql);
	my $t2 = time;
	my $td = $t2 - $t1;
	$log->debug( "prot_expr query $td " );
  
  my %samples;
  my %proteins;
  for my $row ( @samples ) {
    my $key = $row->[3] . '::::' . $row->[2];
		$samples{$key}++;
    $proteins{$row->[0]} ||= {};
    $proteins{$row->[0]}->{$key} += $row->[1];
  }

	my @prot_order;

  my $array_def = qq~
  <script type="text/javascript">
  google.setOnLoadCallback(drawHeatMap);
  function drawHeatMap() {
  var data = new google.visualization.DataTable();
  data.addColumn('string', 'Sample Name');
  ~;
  my @peps;
  for my $sa ( sort( keys( %samples ) ) ) {
    my ( $name, $id ) = split "::::", $sa;
    $array_def .= "    data.addColumn('number', '$name');\n";
  }
  $array_def .= "DEFINE_ROWS_HERE\n";
  
  my $row = 0;
  my $col = 0;
  my $max = 0;
	my %output;
  for my $protein ( @ordered_prots ) {
    $col = 0;
    $array_def .= "    data.setValue( $row, $col, '$protein' );\n";
    $col++;
   for my $sample ( sort( keys( %samples ) ) ) {
      my ( $name, $id ) = split "::::", $sample;
		  if ( $proteins{$protein}->{$sample} ) {
#        my $cnt = $proteins{$protein}->{$sample};
        my $cnt = log( 1+ $proteins{$protein}->{$sample} )/log(10);
        $max = ( $cnt > $max ) ? $cnt : $max;
        $array_def .= "    data.setValue( $row, $col, $cnt );\n";
			}
      $col++;
    }
    $row++;
  }
  $array_def =~ s/DEFINE_ROWS_HERE/data.addRows($row);/;
  my $num_colors = ( $max > 64 ) ? 64 : $max;
  my $num_colors = 256;
  $log->debug( "Max is $max, numcol is $num_colors" );
  $array_def .= qq~
  heatmap = new org.systemsbiology.visualization.BioHeatMap(document.getElementById('heatmapContainer'));
  heatmap.draw(data, {numberOfColors:$num_colors,passThroughBlack:false,startColor:{r:255,g:255,b:255,a:1},endColor:{r:100,g:100,b:100,a:1},emptyDataColor:{r:256,g:256,b:256,a:1}});
  }
  </script>
  ~;
  
  my $content = qq~
	<BR><BR>
  <TABLE WIDTH=800>
	$header
  <script type="text/javascript" src="http://www.google.com/jsapi"></script>
  <script type="text/javascript">
  google.load("visualization", "1", {});
  google.load("prototype", "1.6");
  </script>
  <script type="text/javascript" src="http://systemsbiology-visualizations.googlecode.com/svn/trunk/src/main/js/load.js"></script>
  <script type="text/javascript">
  systemsbiology.load("visualization", "1.0", {packages:["bioheatmap"]});
  </script>
  
  $array_def
  
  <TR $tr><TD> <DIV ID="heatmapContainer"></DIV>  </TD></TR>
  
  </TABLE>
  ~;
  
  return $content;
  
} # end getSampleMapDisplay
  
  


# General build info, date, name, organism, specialty, default
sub get_build_overview {

  my $build_id = shift;
  
  # Get a list of accessible project_ids
  my @project_ids = $sbeams->getAccessibleProjects();
  my $project_ids = join( ",", @project_ids ) || '0';

  my $build_info = $sbeams->selectrow_hashref( <<"  BUILD" );
  SELECT atlas_build_name, probability_threshold, atlas_build_description, 
  build_date, set_name
  FROM $TBAT_ATLAS_BUILD AB JOIN $TBAT_BIOSEQUENCE_SET BS 
  ON AB.biosequence_set_id = BS.biosequence_set_id
  WHERE atlas_build_id = $build_id 
  AND AB.record_status <> 'D'
  BUILD

#  for my $k ( keys( %$build_info ) ) { print STDERR "$k => $build_info->{$k}\n"; }

  my $pep_count = $sbeams->selectrow_hashref( <<"  PEP" );
  SELECT COUNT(*) cnt,  SUM(n_observations) obs
  FROM $TBAT_PEPTIDE_INSTANCE 
  WHERE atlas_build_id = $build_id 
  PEP

  my $multi_pep_count = $sbeams->selectrow_hashref( <<"  MPEP" );
  SELECT COUNT(*) cnt, SUM(n_observations) obs
  FROM $TBAT_PEPTIDE_INSTANCE  
  WHERE atlas_build_id = $build_id 
  AND n_observations > 1 
  MPEP

  my $smpl_count = $sbeams->selectrow_hashref( <<"  SMPL" );
  SELECT COUNT(*) cnt FROM $TBAT_ATLAS_BUILD_SAMPLE 
  WHERE atlas_build_id = $build_id
  SMPL

  my $table = "<TABLE WIDTH=800>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'build_overview',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      text => 'Build Overview',
      span => 4,
      link => $link
  );

  my $spc = $sbeams->getGifSpacer(500);
  $build_info->{build_date} =~ s/^([0-9-]+).*$/$1/;
#  $/mpl_count->{cnt} = sprintf( "% 10i", $smpl_count->{cnt} );
#  $smpl_count->{cnt} =~ s/ /&nbsp;/g;
#  $multi_pep_count->{cnt} = sprintf( "% 10i", $multi_pep_count->{cnt} );
#  $multi_pep_count->{cnt} =~ s/ /&nbsp;/g;
#  $multi_pep_count->{obs} = sprintf( "% 10i", $multi_pep_count->{obs} );
# $multi_pep_count->{obs} =~ s/ /&nbsp;/g;
  
  
#  my $deltacnt = $multi_pep_count->{cnt} - $pep_count->{cnt};
#  my $deltaobs = $multi_pep_count->{obs} - $pep_count->{obs};
#  $table .= $atlas->encodeSectionItem( key   => 'Deltas ', tr_info => $tr,
#                                          value => "$deltacnt ( $deltaobs )" ) . "\n";


  $table .= $atlas->encodeSectionItem( key   => 'Build Name', tr_info => $tr,
                            value => $build_info->{atlas_build_name} . $spc, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Build Description', tr_info => $tr,
                            value => $build_info->{atlas_build_description}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Reference Database', tr_info => $tr,
                            value => $build_info->{set_name}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Build Date', tr_info => $tr,
                            value => $build_info->{build_date} ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => '# Samples', tr_info => $tr,
                            value => $smpl_count->{cnt}, align => 'right' ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Distinct Peptides', tr_info => $tr,
                                          value => "$multi_pep_count->{cnt} ( $pep_count->{cnt}* )" ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Total Observations', tr_info => $tr,
                                          value => "$multi_pep_count->{obs} ( $pep_count->{obs}* )" ) . "\n";
#  $table .= $atlas->encodeSectionDblItem( key   => ['Build Date', '# Samples'], tr_info => $tr,
#                            value => [$build_info->{build_date}, $smpl_count->{cnt}] ) . "\n";
#  $table .= $atlas->encodeSectionDblItem( key   => ['Total Observations', 'Distinct Peptides'], 
#                                          tr_info => $tr,
#                                          value => [$pep_count->{obs}, $pep_count->{cnt}] ) . "\n";
#  $table .= $atlas->encodeSectionDblItem( key   => ['Total Observations n_obs > 1', 'Distinct Peptides n_obs > 1'], 
#                                          tr_info => $tr,
#                                          value => [$multi_pep_count->{obs}, $multi_pep_count->{cnt}] ) . "\n";

  $table .= "</TABLE>\n";
  return $table;

}

# Peptide build stats
sub get_sample_info {

  my $build_id = shift;

  # Get a list of accessible project_ids
  my @project_ids = $sbeams->getAccessibleProjects();
  my $project_ids = join( ",", @project_ids ) || '0';


  my $table = "<TABLE WIDTH=600>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'sample_contribution',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  my $sql =<<"  END";
  SELECT ASB.atlas_search_batch_id, sample_tag, SBS.n_searched_spectra,
         n_good_spectra, n_distinct_multiobs_peptides,
         n_uniq_contributed_peptides, n_progressive_peptides, cumulative_n_peptides,
         model_90_error_rate
  FROM $TBAT_SEARCH_BATCH_STATISTICS SBS JOIN $TBAT_ATLAS_BUILD_SEARCH_BATCH ABSB 
    ON ABSB.atlas_build_search_batch_id = SBS.atlas_build_search_batch_id
  JOIN $TBAT_SAMPLE S ON s.sample_id = ABSB.sample_id
  JOIN $TBAT_ATLAS_BUILD_SAMPLE ABS ON ( s.sample_id = ABS.sample_id )
  JOIN $TBAT_ATLAS_SEARCH_BATCH ASB ON ( ASB.atlas_search_batch_id = ABSB.atlas_search_batch_id )
  WHERE ABS.atlas_build_id = $build_id
  AND ABSB.atlas_build_id = $build_id
  ORDER BY rownum, cumulative_n_peptides, ABSB.atlas_build_search_batch_id ASC
  END
	my $t1 = time;
  my @sample_info = $sbeams->selectSeveralColumns ( $sql );
	my $t2 = time;
	my $td = $t2 - $t1;
	$log->debug( "SB query $td" );

  # Format loop
  my @samples;
  for my $batch ( @sample_info ) {
    $show_image++;
    for my $idx ( 5,6, 7 ) { $batch->[$idx] ||= 0; }
    for my $idx ( 8 ) {
      $batch->[$idx] = $sbeams->makeInactiveText('ND') if !defined $batch->[$idx];
      $batch->[$idx] = sprintf( "%0.1f", (100 * $batch->[$idx]))  if $batch->[$idx] !~ /FONT/; 
    }
    push @samples, $batch;

  }

  my $dag = '<sup>&dagger;</sup>';
  my @headings = ( 'ID',
                   'Sample Name',
                   '# Spectra Searched', 
                   "# Spectra ID'd", 
                   '# Distinct', 
                   '# Unique', 
                   '# Progressive',
                   '# Cumulative',
                   'FDR (%)'
      );

  $table .= $atlas->encodeSectionHeader(
      text => 'Sample Contribution',
      link => $link,
      width => 920
  );


  $table .= $atlas->encodeSectionTable( rows => [ \@headings, @samples ], 
                                        header => 1, 
                                        nowrap => [1..scalar(@headings)], 
                                        align => [ qw(center left right right right right right right right) ], 
                                        tr_info => $tr,
                                        bg_color => '#EAEAEA',
                                        sortable => 1 );
  $table .= '</TABLE>';
  return ( $table, \@samples );

}


sub process_params {
  my $params = {};
  $sbeams->parse_input_parameters( q => $q, parameters_ref => $params );
  $sbeams->processStandardParameters( parameters_ref => $params );
  return( $params );
}

sub get_build_path {
  my %args = @_;
  return unless $args{build_id};
  my $path = $atlas->getAtlasBuildDirectory( atlas_build_id => $args{build_id} );
  $path =~ s/DATA_FILES//;
  return $path;
}

sub get_draw_chart_function {
	my $sample_arrayref = shift || return '';

	my @samples;
	for my $s ( @{$sample_arrayref} ) {
		push @samples, [ $s->[1], $s->[4], $s->[7] ];
	}
	my $GV = SBEAMS::Connection::GoogleVisualization->new();
  my ( $chart ) = $GV->setDrawBarChart(  samples => \@samples,
                                    	data_types => [ 'string', 'number', 'number' ],
                                      	headings => [ 'Sample', 'Distinct peptides (n_obs > 1)', 'Cumulative peptides (n_obs > 1)' ],
                                      show_table => 0,
                                 truncate_labels => 24
 	);
	my $header = $GV->getHeaderInfo();
  return ( $chart, $header );
}

