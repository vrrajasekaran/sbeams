#!/usr/local/bin/perl

###############################################################################
# Program     : ShowObservedSpectrum
#
# Description : This CGI program displays a single spectrum in PeptideAtlas
#
# Based upon the ShowSpectrum.cgi in the Proteomics module by
# Kerry & Eric Deutsch
#
###############################################################################


###############################################################################
# Basic SBEAMS setup
###############################################################################
use strict;
use FindBin;

use lib "$FindBin::Bin/../../lib/perl";
use vars qw ($q $sbeams $sbeamsMOD $PROG_NAME
             $current_username $massCalculator $TESTONLY $VERBOSE );

use SBEAMS::Connection qw($q);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::PeptideAtlas::PeptideFragmenter;

use SBEAMS::Proteomics::PeptideMassCalculator;
#$massCalculator = new SBEAMS::Proteomics::PeptideMassCalculator;
use SBEAMS::Proteomics::SpecViewer;
use SBEAMS::PeptideAtlas::ProtInfo;

use File::Basename;

use Carp;
$SIG{__DIE__} = sub { &Carp::confess };
use CGI::Carp qw (fatalsToBrowser);

#$q = new CGI;
$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);

$PROG_NAME="ShowObservedSpectrum";

# Allowable neutral losses
my @neutral_loss_masses = ();

###############################################################################
# Define global variables if any and execute main()
###############################################################################
main();


###############################################################################
# Main Program:
#
# If $sbeams->Authenticate() succeeds, print header, process the CGI request,
# print the footer, and end.
###############################################################################
sub main {

  #### Do the SBEAMS authentication and exit if a username is not returned
  exit unless ($current_username = $sbeams->Authenticate(
    permitted_work_groups_ref=>['PeptideAtlas_user','PeptideAtlas_admin',
      'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
    #connect_read_only=>1,
    allow_anonymous_access=>1,
  ));


  #### Process certain actions, then print the header, figure and do what the user wants, and print footer
  processDatabaseActions();
  $sbeamsMOD->display_page_header();
  processRequest();
  $sbeamsMOD->display_page_footer();

  $sbeams->display_page_footer(close_tables=>'YES',
    separator_bar=>'YES',display_footer=>'NO');

} # end main


###############################################################################
# Process insert/update/delete, if any, then redirect
###############################################################################
sub processDatabaseActions {
    my $redirect = 0;
    my %parameters;

    $sbeams->parse_input_parameters(q=>$q,parameters_ref=>\%parameters);
    $sbeams->processStandardParameters(parameters_ref=>\%parameters);

    my $apply_action  = $q->param('apply_action');

    my $prot_info = new SBEAMS::PeptideAtlas::ProtInfo;
    $VERBOSE = 0;
    $TESTONLY = 0;
		$prot_info->setSBEAMS($sbeams);
		$prot_info->setVERBOSE($VERBOSE);
		$prot_info->setTESTONLY($TESTONLY);

    ## get original value 
    my $orig_spectrum_annotation_level = 0; 
    if($parameters{spectrum_annotation_id}){
      my $spectrum_annotation_id = $parameters{spectrum_annotation_id};
      my $sql = qq~ 
        SELECT max(spectrum_annotation_level_id)
        FROM $TBAT_SPECTRUM_ANNOTATION 
        WHERE spectrum_annotation_id = $spectrum_annotation_id
      ~;
      my @result = $sbeams->selectOneColumn($sql);
      $orig_spectrum_annotation_level = $result[0];
    }
    if ($apply_action eq "UPDATE ANNOTATION") {
			my %rowdata = (
		       spectrum_annotation_level_id => $parameters{user_spectrum_annotation},
		       comment => $parameters{user_spectrum_commment}
		       );
			my $PK = $sbeams->updateOrInsertRow(
					    update => 1,
					    table_name => $TBAT_SPECTRUM_ANNOTATION,
					    rowdata_ref => \%rowdata,
					    PK => 'spectrum_annotation_id',
					    PK_value => $parameters{spectrum_annotation_id},
					    return_PK => 1,
					    add_audit_parameters => 1
					    );

			if ($PK) { 
        my $action = '';
        if ($orig_spectrum_annotation_level <= 2 && $parameters{user_spectrum_annotation} > 2 ){
				  $action = 'remove';
        }elsif($orig_spectrum_annotation_level > 2 && $parameters{user_spectrum_annotation} <= 2 ){
           $action = 'add';
        }
        if($action){
					$prot_info -> update_protInfo (
						spectrum_annotation_id => $parameters{spectrum_annotation_id}, 
						atlas_build_id=>$parameters{atlas_build_id},
						action => $action);
        }
        $sbeams->set_page_message( type => 'Info',  msg => "Your annotation record has been updated." ); 
      }
			else     { $sbeams->set_page_message( type => 'Error', msg => "ERROR: There was a problem updating your annotation record." ); }

			$redirect++;
    } elsif ($apply_action eq "ADD ANNOTATION") {
			my %rowdata = (
		       annotator_contact_id => $sbeams->getCurrent_contact_id(),
		       spectrum_identification_id => $parameters{spectrum_identification_id},
		       spectrum_id => $parameters{spectrum_id},
		       identified_peptide_sequence => $parameters{peptide},
		       identified_peptide_charge => $parameters{assumed_charge},
		       spectrum_annotation_level_id => $parameters{user_spectrum_annotation},
		       comment => $parameters{user_spectrum_commment}
		       );

			my $PK = $sbeams->updateOrInsertRow(
				   insert => 1,
				   table_name => $TBAT_SPECTRUM_ANNOTATION,
				   rowdata_ref => \%rowdata,
				   return_PK => 1,
				   add_audit_parameters => 1
				   );

			if ($PK) { 
        if ($parameters{user_spectrum_annotation} > 2 ){
					$prot_info -> update_protInfo (
						spectrum_annotation_id => $PK,
						atlas_build_id=>$parameters{atlas_build_id},
						action => 'remove',
          );
        }
        $sbeams->set_page_message( type => 'Info',  msg => "Your annotation record has been added." ); 
      }
			else     { $sbeams->set_page_message( type => 'Error', msg => "ERROR: There was a problem inserting your annotation record." ); }

			$redirect++;

    } elsif ($apply_action eq "DELETE ANNOTATION") {
			my %rowdata = (
		       record_status => 'D'
		       );

			my $PK = $sbeams->updateOrInsertRow(
					    update => 1,
					    table_name => $TBAT_SPECTRUM_ANNOTATION,
					    rowdata_ref => \%rowdata,
					    PK => 'spectrum_annotation_id',
					    PK_value => $parameters{spectrum_annotation_id},
					    return_PK => 1,
					    add_audit_parameters => 1
					    );

			if ($PK) { 
        ## annotation has low value, need to add back obs
        if ($orig_spectrum_annotation_level > 2){
					$prot_info -> update_protInfo (
						spectrum_annotation_id => $PK,
						atlas_build_id=>$parameters{atlas_build_id},
						action => 'add',
					);
        }
        $sbeams->set_page_message( type => 'Info',  msg => "Your annotation record has been deleted." ); 
      }
			else     { $sbeams->set_page_message( type => 'Error', msg => "ERROR: There was a problem deleting your annotation record." ); }

			$redirect++;

		}

		if ($redirect) {
			$q->delete( 'apply_action' );
			print $q->redirect( $q->self_url() );
			exit;
		}

}


###############################################################################
# Print Entry Form
###############################################################################
sub processRequest {

    #### Define some general variables
    my ($i,$element,$key,$value,$sql);

    my %parameters;

    $sbeams->parse_input_parameters(q=>$q,parameters_ref=>\%parameters);

    $sbeams->processStandardParameters(parameters_ref=>\%parameters);

    my $apply_action  = $q->param('apply_action');

    unless ($parameters{'atlas_build_id'}) {
      print "ERROR: need atlas_build_id parameter.\n";
      return;
    }

    #$sbeams->printDebuggingInfo($q);

    my $assumed_charge = $parameters{'assumed_charge'};

    my $displayCharges = $parameters{'charge'};
    my @displayCharges;
    if ($displayCharges) {
      @displayCharges = split(',',$displayCharges);
    } elsif ($assumed_charge) {
      my $icharge = 1;
      while ($icharge <= $assumed_charge && $icharge < 4) {
        push(@displayCharges,$icharge);
				$icharge++;
      }
      $displayCharges = join(",",@displayCharges);
    }

    my $neutral_loss = $parameters{'neutral_loss'};
    my @neutral_loss;
    if ($neutral_loss) {
      @neutral_loss = split(',',$parameters{'neutral_loss'});
    }
    for my $nl (@neutral_loss) {
      if ($nl eq '17') {
				push (@neutral_loss_masses, 17.031);
      } elsif ($nl eq '18') {
				push (@neutral_loss_masses, 18.015);
      } elsif ($nl eq '35') {
				push (@neutral_loss_masses, 35.046);
      } elsif ($nl eq '45') {
				push (@neutral_loss_masses, 45.04);
      }
    }


    #### If we have a spectrum_id, find the mass modifications
    
    if ($parameters{'spectrum_identification_id'})
    {
        my $sql = qq~
            SELECT peptide_sequence,peptide_charge,average_parent_mz,
                   MPI.modified_peptide_sequence,
	           S.spectrum_id, S.spectrum_name, S.start_scan, S.fragmentation_type_id
              FROM $TBAT_SPECTRUM_IDENTIFICATION SI
              JOIN $TBAT_MODIFIED_PEPTIDE_INSTANCE MPI
                   ON ( SI.modified_peptide_instance_id = MPI.modified_peptide_instance_id )
              JOIN $TBAT_PEPTIDE_INSTANCE PI
                   ON ( MPI.peptide_instance_id = PI.peptide_instance_id )
             INNER JOIN $TBAT_PEPTIDE P
                   ON ( PI.peptide_id = P.peptide_id )
              LEFT JOIN $TBAT_SPECTRUM S
                   ON ( SI.spectrum_id = S.spectrum_id )
            WHERE spectrum_identification_id = '$parameters{spectrum_identification_id}'
        ~;

        my @rows = $sbeams->selectSeveralColumns($sql);

        foreach my $row (@rows)
        {
            my ($seq, $chg, $mz, $mod_seq, $spectrum_id, $spectrum_name, $start_scan,$fragmentation_type_id) = @{$row};
            $parameters{'peptide'} = $mod_seq;
            $parameters{'assumed_charge'} = $chg;
            $parameters{'precursor_mass'} = $mz;
            $parameters{'protein_name'} = 'foo';
            $parameters{'protein_name_alt'} = 'bar';
            $parameters{'modified_sequence'} = $mod_seq;
            $parameters{'spectrum_id'} = $spectrum_id;
            $parameters{'spectrum_name'} = $spectrum_name;
            $parameters{'start_scan'} = $start_scan;
            $parameters{'fragmentation_type_id'} = $fragmentation_type_id;
        }
    } else {
      print "ERROR: need spectrum_identification_id\n";
      return;
    }

    if ( $parameters{peptide} ) {
			print "<H2 CLASS=section_description ALIGN=CENTER>Spectrum for $parameters{modified_sequence} <SUP>+$parameters{assumed_charge}</SUP></H2>\n";
			print '<h3 ID="annotations_head" style="display:none"><div ID="annotations_summary" COLSPAN="2">-- No annotations here --</div></h3>';
    }

    # still some lint here...
    my $peptide = $parameters{peptide};
    $peptide =~ s/^.\.//;
    $peptide =~ s/\..$//;
    my $precursor_mass = $parameters{'precursor_mass'};
    my $charge = $parameters{'assumed_charge'};
    my $protein_name = $parameters{'protein_name'};
    my $protein_name_alt = $parameters{'protein_name_alt'};
    my $modified_sequence = $parameters{'modified_sequence'};

    # default ion series
    my $series = '1,1,0';
    if ($charge == 2){
      $series = "1,0,0";
    }

    $parameters{'ShowA'} ||= '[0,0,0]';
    $parameters{'ShowB'} ||= "[$series]";
    $parameters{'ShowC'} ||= '[0,0,0]';
    $parameters{'ShowX'} ||= '[0,0,0]';
    $parameters{'ShowY'} ||= "[$series]";
    $parameters{'ShowZ'} ||= '[0,0,0]';


    # 2: HR IT ETD 6: LR IT ETD
    if($parameters{'fragmentation_type_id'} == 2 || $parameters{'fragmentation_type_id'} == 6){
      $parameters{'ShowA'} = '[0,0,0]';
      $parameters{'ShowB'} = '[0,0,0]';
      $parameters{'ShowC'} = "[$series]";
      $parameters{'ShowX'} = '[0,0,0]';
      $parameters{'ShowY'} = '[0,0,0]';
      $parameters{'ShowZ'} = "[$series]";
    }
    $parameters{assumed_charge} = $charge;

    my ($proteomics_search_batch_id, %spectrum) = get_spectrum(
        spectrum_identification_id=>$parameters{spectrum_identification_id},
        atlas_build_id=>$parameters{atlas_build_id}
    );

    unless (%spectrum) 
    {
      print "ERROR: Unable to load spectrum\n";
      return;
    }

    my ($i,$mass,$intensity,$massmin);
    my ($massmax,$intenmax)=(0,0);
    my @spectrum_array;

    for ($i=0; $i<$spectrum{n_peaks}; $i++) {
      $mass = $spectrum{mz}->[$i];
      $intensity = $spectrum{intensities}->[$i];
      push(@spectrum_array,[$mass,$intensity]);
      $massmin = $mass if ($i == 0);
      $massmax = $mass if ($mass > $massmax);
      $intenmax = $intensity if ($intensity > $intenmax);
    }

    ### Run the heuristic PSM evaluator if requested
    if ($parameters{'eval'}) {
      print "<b>Heuristic PSM evaluation:</b><br>\n";

      #### Get the expected fragments for this peptide
      #### returns \@sortedProductIons where each ion is a hash ref
      #### with mz, series (e.g. y), ordinal, charge, label, label_st,
      #### bond (dipeptide)
      #### label has ^2 notation. label_st has ++ notation.
      my $fragmenter = new SBEAMS::PeptideAtlas::PeptideFragmenter;
      my $sortedProductIons_aref = $fragmenter->getExpectedFragments(
				modifiedSequence =>$modified_sequence,
				charge=>$charge,
      );
      my @sortedProductIons = @{$sortedProductIons_aref};


      #### Get the observed fragments for this spectrum from the spectrast file.

      #### Get the data_location of the spectrum and raw speclib file
      use SBEAMS::PeptideAtlas::Spectrum;
      my $spectrum = new SBEAMS::PeptideAtlas::Spectrum;
      my $data_location = $spectrum->get_data_location(
				proteomics_search_batch_id => $proteomics_search_batch_id,
      );
      ($data_location) = $spectrum->groom_data_location(
				data_location => $data_location,
      );
      #### Get peaks and annotations from raw library text file, if exists
      use SBEAMS::PeptideAtlas::PSMEvaluator;
      my $evaluator = new SBEAMS::PeptideAtlas::PSMEvaluator;
      my @annotated_peaks = $evaluator->get_annotated_peaks_from_speclib(
				data_location => $data_location,
				spectrum_name => $parameters{spectrum_name},
      );

      #### Hand the expected and observed fragments to the heuristic PSM
      #### evaluator!!!
      if (scalar @annotated_peaks) {
				my $evaluation = $evaluator->evaluate_PSM_heuristically(
				annotated_peaks_aref => \@annotated_peaks,
				sorted_product_ions_aref => $sortedProductIons_aref,
				modified_sequence => $modified_sequence,
				charge => $charge,
				);
				print "$evaluation<br>\n";
      } else {
				print "Cannot retrieve annotated peaks; cannot evaluate.<br>\n";
      }
    }

    my $prec = sprintf ("%0.1f", $precursor_mass);

    # ToDo: should check these values for integrity
    my $seq = $parameters{'alt_sequence'} ? $parameters{'alt_sequence'} : $parameters{'modified_sequence'};
    my $chg = $parameters{'alt_charge'}   ? $parameters{'alt_charge'}   : $parameters{'assumed_charge'};

    #### Lorikeet me! ##################################################
    my $lorikeet = new SBEAMS::Proteomics::SpecViewer;
    print $lorikeet->generateSpectrum(
				      charge            => $chg,
				      modified_sequence => $seq,
				      precursor_mass    => $parameters{'precursor_mass'},
				      scan              => $parameters{'start_scan'},
				      name              => $parameters{'spectrum_name'},
				      a_ions            => $parameters{'ShowA'},
				      b_ions            => $parameters{'ShowB'},
				      c_ions            => $parameters{'ShowC'},
				      x_ions            => $parameters{'ShowX'},
				      y_ions            => $parameters{'ShowY'},
				      z_ions            => $parameters{'ShowZ'},
				      spectrum          => \@spectrum_array
				      );

    #### Store the observed spectrum data as a recallable resultset
    my %dataset;
    $dataset{data_ref} = \@spectrum_array;
    $dataset{column_list_ref} = ['m/z','intensity'];
    my $rs_set_name = "SETME";
    $sbeams->writeResultSet(resultset_file_ref=>\$rs_set_name,
      resultset_ref=>\%dataset,
      file_prefix=>'spec_',
      query_parameters_ref=>\%parameters);

    print qq~
        <BR>Download spectrum in Format: 
        <a href="$CGI_BASE_DIR/GetResultSet.cgi/$rs_set_name.tsv?rs_set_name=$rs_set_name&format=tsv">TSV</a>,
        <a href="$CGI_BASE_DIR/GetResultSet.cgi/$rs_set_name.xls?rs_set_name=$rs_set_name&format=excel">Excel</a>
        <BR><BR>
	~;

    my $hidden_form_fields = qq~
        <INPUT TYPE="hidden" NAME="spectrum_identification_id" VALUE="$parameters{spectrum_identification_id}">
        <INPUT TYPE="hidden" NAME="assumed_charge" VALUE="$parameters{assumed_charge}">
        <INPUT TYPE="hidden" NAME="peptide" VALUE="$parameters{peptide}">
        <INPUT TYPE="hidden" NAME="atlas_build_id" VALUE="$parameters{atlas_build_id}">
	~;

    my $spectext = '(enter alternate sequence)';
    print qq~
	<FORM METHOD="post" action="$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROG_NAME">
	$hidden_form_fields
        <INPUT TYPE="text" NAME="alt_sequence" SIZE="40" ONCLICK="if(this.value=='$spectext'){this.value='';}" ONBLUR="if(this.value==''){this.value='$spectext';}" ONFOCUS="this.select();" VALUE="$spectext"></INPUT>
	<SELECT NAME="alt_charge"><OPTION VALUE="1">+1</OPTION><OPTION VALUE="2">+2</OPTION><OPTION VALUE="3">+3</OPTION></SELECT>
	<INPUT TYPE='submit' VALUE='GO!'>
	</FORM>
    ~;


    print &printUserAnnotations(
				spectrum_id => $parameters{'spectrum_id'},
				modified_sequence => $parameters{'modified_sequence'},
				charge => $parameters{'assumed_charge'},
				spectrum_identification_id => $parameters{'spectrum_identification_id'},
				form_fields => $hidden_form_fields
				) if ($parameters{'spectrum_identification_id'});

} # end processRequest


###############################################################################
# get_spectrum
###############################################################################
sub get_spectrum
{
  my %args = @_;

  my $spectrum_identification_id = $args{'spectrum_identification_id'};
  my $atlas_build_id = $args{'atlas_build_id'};
  unless ($spectrum_identification_id) {
    print "\nERROR: get_spectrum needs spectrum_identification_id. ".
          "Got atlas_build_id $atlas_build_id.\n\n";
    return;
  }
  unless ($atlas_build_id) {
    print "\nERROR: get_spectrum needs atlas_build_id. ".
          "Got spectrum_identification_id $spectrum_identification_id.\n\n";
    return;
  }

  my $sql = qq~
    SELECT proteomics_search_batch_id,spectrum_name,ab.data_path
      FROM $TBAT_SPECTRUM S
      JOIN $TBAT_SPECTRUM_IDENTIFICATION SI
           ON (S.spectrum_id = SI.spectrum_id )
      JOIN $TBAT_ATLAS_SEARCH_BATCH ASB
           ON (SI.atlas_search_batch_id = ASB.atlas_search_batch_id )
      JOIN $TBAT_ATLAS_BUILD_SAMPLE ABS ON (ABS.SAMPLE_ID = ASB.SAMPLE_ID)
      JOIN $TBAT_ATLAS_BUILD AB ON (AB.ATLAS_BUILD_ID = ABS.ATLAS_BUILD_ID)
     WHERE SI.spectrum_identification_id = $spectrum_identification_id 
     AND   ab.atlas_build_id = $atlas_build_id
  ~;

  my @rows = $sbeams->selectSeveralColumns($sql);
  unless (@rows) {
    print "\nERROR: Unable to get search batch information for ".
      "spectrum_identification_id '$spectrum_identification_id'.\n\n";
    return;
  }
  my $search_batch_id = $rows[0]->[0];
  my $spectrum_name = $rows[0]->[1];
  my $build_path = $rows[0]->[2];
  my $fraction_tag;
  if ($spectrum_name =~ /^(.+)\.(\d+)\.(\d+)\.\d$/) {
    $fraction_tag = $1;
  } else {
    die("ERROR: Unable to parse fraction name from '$spectrum_name'");
  }

  #print "search_batch_id = $search_batch_id\n";
  #print "spectrum_name = $spectrum_name\n";
  #print "fraction_tag = $fraction_tag\n";


  use SBEAMS::PeptideAtlas::Spectrum;
  my $spectra = new SBEAMS::PeptideAtlas::Spectrum;
  $spectra->setSBEAMS($sbeams);

  my @mass_intensities = ();
 
  #### Get the data_location of the spectrum
  my $data_location = $spectra->get_data_location(
    proteomics_search_batch_id => $search_batch_id,
  );
  if ($data_location =~ /.*archive\//){
    $data_location =~ s/.*archive\///;
  }

  my $library_idx_file = "/regis/sbeams/archive/$data_location/RAW.specidx";
  my $comp_idx_file = "/regis/sbeams/archive/$data_location/RAW.compspecidx";
  if ( !-e $library_idx_file && !-e $comp_idx_file ) { 
    $build_path ="/net/db/projects/PeptideAtlas/pipeline/output/$build_path"; 
    $build_path =~ /.*\/(.*)\/DATA_FILES/;
    $library_idx_file ="$build_path/$1_all_raw.specidx";
    $comp_idx_file ="$build_path/$1_all_raw.compspecidx";
  }

  if (-e $library_idx_file || -e $comp_idx_file ){
    @mass_intensities = $spectra->getSpectrumPeaks_Lib(
    spectrum_name => $spectrum_name,
    library_idx_file => $library_idx_file,
   );
  }else{
   @mass_intensities = $spectra->getSpectrumPeaks(
    proteomics_search_batch_id => $search_batch_id,
    spectrum_name => $spectrum_name,
    fraction_tag => $fraction_tag,
    );
  }


  #### If we still have no spectrum data, then bail out
  unless (@mass_intensities) {
    print "\nERROR: Unable to get m/z,intensity pairs for ".
      "spectrum_identification_id '$spectrum_identification_id'.\n\n";
    return;
  }

  #### Extract rows into two arrays of masses and intensities
  my (@masses,@intensities);
  for (my $i=0; $i<=$#mass_intensities; $i++) {
    push(@masses,$mass_intensities[$i]->[0]);
    push(@intensities,$mass_intensities[$i]->[1]);
  }

  my %spectrum;
  $spectrum{n_peaks} = $#mass_intensities + 1;


  #### Put data into hash and return
  $spectrum{mz} = \@masses;
  $spectrum{intensities} = \@intensities;


  # have to return scalar before hash
  return ($search_batch_id, %spectrum);

}


###############################################################################
# printUserAnnotations
# get and display user annotations, if any
###############################################################################
sub printUserAnnotations {
    my %args = @_;

    my $buffer;
    my $total = 0; # this starts as a counter, then becomes a string
    my $show_form = 1;
    my $line_sep = "<tr><td colspan='2'><hr size='1' noshade></td></tr>";

    my $sql = qq~
	SELECT SA.spectrum_annotation_id, SA.comment, SA.date_modified,
	       SA.spectrum_identification_id, SA.identified_peptide_sequence, SA.identified_peptide_charge,
	       SL.spectrum_annotation_level_id, SL.level_name,
	       C.first_name, C.last_name,
	       UL.username
	  FROM $TBAT_SPECTRUM_ANNOTATION SA
    INNER JOIN $TBAT_SPECTRUM_ANNOTATION_LEVEL SL
            ON ( SA.spectrum_annotation_level_id = SL.spectrum_annotation_level_id )
    INNER JOIN $TB_CONTACT C
            ON ( annotator_contact_id = C.contact_id )
    INNER JOIN $TB_USER_LOGIN UL
            ON ( UL.contact_id = annotator_contact_id )
	 WHERE spectrum_id = '$args{spectrum_id}'
	   AND SA.record_status = 'N'
      ORDER BY SA.date_modified DESC
        ~;

    my @rows = $sbeams->selectSeveralColumns($sql);

    $buffer = qq~
	<table width="100%" class="table_setup">
	<tr class="orange_bg"><th>User annotations</th><td><a name="user_annotations">&nbsp;</a></td></tr>
	~;

    if (@rows) {
	foreach my $row (@rows)
	{
	    my ($annot_id, $comment, $date, $ident_id, $sequence, $charge, $level_id, $level, $first, $last, $uname) = @{$row};
	    $total++;

	    if ($args{modified_sequence}.$args{charge} eq $sequence.$charge) {
		$buffer .= "<tr id='${uname}${annot_id}_annot_tr'><th valign='top'>$level</th><td>$first $last ($date)<br />\n";
	    } else {
		my $link = $q->self_url();
		$link =~ s/\?.*//;  # clear querystring
		$link .= "?spectrum_identification_id=$ident_id;peptide=$sequence;assumed_charge=$charge";

		$buffer .= "<tr bgcolor='#dddddd' id='${uname}${annot_id}_annot_tr'><th valign='top'>$level<br /><a href='$link' style='color:red'>$sequence +$charge</a></th><td>$first $last ($date)<br />\n";
	    }

	    my $disp_comment = $comment;
	    $disp_comment =~ s|\n|<BR />\n|g; # display carriage returns
	    $buffer .= "$disp_comment\n";

	    if ( ($uname eq $current_username) &&
		 ($args{modified_sequence}.$args{charge} eq $sequence.$charge) ) {
		$show_form = 0;

		$buffer .= qq~
		    <br /><div align='right'><a href='javascript:showEditForm();'>Edit my annotation</a> | <a href='javascript:confirm_delete();'>Delete</a>
		    <FORM NAME="delete_annotation" METHOD="post" action="$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROG_NAME">
		    $args{form_fields}
		    <INPUT TYPE='hidden' NAME='spectrum_annotation_id' VALUE='$annot_id'>
   		    <INPUT TYPE='hidden' NAME='apply_action' VALUE='DELETE ANNOTATION'></FORM>
		    </div>
		    ~;

		$buffer .= "</td></tr>\n";

		$buffer .= &printUserAnnotationsForm(
						     form_type => 'update',
						     uname => $uname,
						     default_level_id => $level_id,
						     default_comment => $comment,
						     annot_id => $annot_id,
						     extra_form_fields => $args{form_fields}
						     );
	    }

	    $buffer .= "</td></tr>\n$line_sep\n";
	}

    } else {
	$buffer .= qq~
	    <tr><td>&nbsp;</td>
	    <td class='section_heading'>There are no user annotations for this spectrum<br /></td></tr>
	    $line_sep
	    ~;
    }


    if ($current_username eq 'guest') {
	my $url = $q->self_url();
	$url .= '&force_login=yes';

	$buffer .= qq~
	    <tr><td>&nbsp;</td>
	    <td><a href='$url'>Log into PeptideAtlas</a> to add an annotation for this spectrum<br /></td></tr>
	    $line_sep
	    ~;

    } elsif ($show_form) {
	$buffer .= "<tr id='${current_username}add_annot_tr'><th valign='top'><a href='javascript:showEditForm();'>Add annotation</a></th><td>&nbsp;</td></tr>\n";

	$buffer .= &printUserAnnotationsForm(
					     form_type => 'add',
					     uname => $current_username,
					     spectrum_id => $args{spectrum_id},
					     extra_form_fields => $args{form_fields}
					     );

	$buffer .= "</td></tr>\n$line_sep\n";
    }

    $buffer .= "</table>\n";

    # get average
    $sql = qq~
 	SELECT ROUND(AVG(SL.level_probability)*100,0) AS avg_prob_pct,
	       COUNT(*)
	  FROM $TBAT_SPECTRUM_ANNOTATION_LEVEL SL
    INNER JOIN $TBAT_SPECTRUM_ANNOTATION SA
            ON ( SA.spectrum_annotation_level_id = SL.spectrum_annotation_level_id )
	 WHERE spectrum_id = '$args{spectrum_id}'
	   AND identified_peptide_sequence = '$args{modified_sequence}'
	   AND identified_peptide_charge = '$args{charge}'
	   AND SA.record_status = 'N'
        ~;

    @rows = $sbeams->selectSeveralColumns($sql);

    my ($avg, $num) = @{$rows[0]};
    if ($total != $num) {
	$total = "($total total)";
    } else {
	$total = '';
    }

    my $innerHTML;

    if ($num == 1) {
	$innerHTML = "There is <a href=\"#user_annotations\">one user annotation</a> $total for this spectrum, with a score of <b>$avg%</b>";
    } elsif ($num > 1) {
	$innerHTML = "There are <a href=\"#user_annotations\">$num user annotations</a> $total for this spectrum, with an average score of <b>$avg%</b>";
    }

    $buffer .=<< "EOJS" if $innerHTML;
<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
    document.getElementById("annotations_summary").innerHTML = '$innerHTML';
    document.getElementById("annotations_head").style.display = 'table-row';
</SCRIPT>
EOJS

    return $buffer;
}


###############################################################################
# printUserAnnotationsForm
# get and display user annotations, if any
###############################################################################
sub printUserAnnotationsForm {
    my %args = @_;

    $args{form_type} ||= 'add';
    $args{uname} ||= 'user_anon';
    $args{default_level_id} ||= 0;
    $args{default_comment} ||= '';
    $args{annot_id} ||= 0;
    $args{extra_form_fields} ||= '';

    my $spacer = "&nbsp;"x5;

    my $trname = $args{uname};
    $trname .= ($args{form_type} eq 'add') ? 'add' : $args{annot_id};

    my $buffer = qq~
	<SCRIPT LANGUAGE="JavaScript" TYPE="text/javascript">
	<!--
	function showEditForm() {
	    document.getElementById('${trname}_annot_tr').style.display = 'none';
	    document.getElementById('${trname}_form_tr').style.display = 'table-row';
	}
        function hideEditForm() {
	    document.getElementById('${trname}_annot_tr').style.display = 'table-row';
	    document.getElementById('${trname}_form_tr').style.display = 'none';
	}

        function confirm_delete() {
	    var del = confirm("Are you sure you want to delete your comment?");
	    if (del==true) {
		document.delete_annotation.submit();
	    }
	}
        // -->
	</SCRIPT>
	~;

    # add a hidden <tr> for edit form
    my $sql = qq~
	SELECT spectrum_annotation_level_id, level_probability, level_name, level_description
	FROM $TBAT_SPECTRUM_ANNOTATION_LEVEL
	WHERE record_status = 'N'
	ORDER BY sort_order
	~;

    my @levels = $sbeams->selectSeveralColumns($sql);

    my $select = "<SELECT NAME='user_spectrum_annotation'>\n";
    foreach my $levrow (@levels)
    {
	my ($lev_id, $lev_prob, $lev_name, $lev_desc) = @{$levrow};

	my $sel = ( "$args{default_level_id}" eq "$lev_id" ) ? 'SELECTED' : '';
	my $desc = $sbeams->escapeXML(value => $lev_desc);

	$select .= "<OPTION TITLE='$desc' VALUE='$lev_id' $sel>$lev_name</OPTION>\n";
    }
    $select .= "</SELECT>";

    my $form_action = "ADD";
    if ($args{form_type} eq 'update') {
	$form_action = "UPDATE";
	$args{extra_form_fields} .= "<INPUT TYPE='hidden' NAME='spectrum_annotation_id' VALUE='$args{annot_id}'>";

    } else {
	$args{extra_form_fields} .= "<INPUT TYPE='hidden' NAME='spectrum_id' VALUE='$args{spectrum_id}'>";
    }

    $buffer .= qq~
	<tr style='display:none' id='${trname}_form_tr'>
	<th valign='top'>
	<FORM METHOD="post" action="$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROG_NAME">
	$args{extra_form_fields}
	$select</th>
	<td><TEXTAREA ROWS='6' COLS='80' NAME='user_spectrum_commment'>$args{default_comment}</TEXTAREA><br />
	<div align='right'><INPUT TYPE='submit' NAME='apply_action' VALUE='$form_action ANNOTATION'>$spacer<a class='small_form_field' href='javascript:hideEditForm();'>CANCEL</a></div>
	~;

    # caller will close the td and tr
    return $buffer;

}
