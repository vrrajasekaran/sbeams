#!/usr/local/bin/perl

###############################################################################
# Program     : Search
# $Id$
#
# Description : Searches the search_key table for matching elements
#
# SBEAMS is Copyright (C) 2000-2005 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
#
###############################################################################


###############################################################################
# Set up all needed modules and objects
###############################################################################
use strict;
use Getopt::Long;
use FindBin;

use lib "$FindBin::Bin/../../lib/perl";
use vars qw ($sbeams $sbeamsMOD $q $current_contact_id $current_username
             $PROG_NAME $USAGE %OPTIONS $QUIET $VERBOSE $DEBUG $DATABASE
             $TABLE_NAME $PROGRAM_FILE_NAME $CATEGORY $DB_TABLE_NAME
             @MENU_OPTIONS);

#TMF the below means, import $q (a CGI object) and $log
use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::TabMenu;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;

$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);

my %search_type_param;



###############################################################################
# Set program name and usage banner for command like use
###############################################################################
$PROG_NAME = $FindBin::Script;
$USAGE = <<EOU;
Usage: $PROG_NAME [OPTIONS] key=value key=value ...
Options:
  --verbose n         Set verbosity level.  default is 0
  --quiet             Set flag to print nothing at all except errors
  --debug n           Set debug flag

 e.g.:  $PROG_NAME [OPTIONS] [keyword=value],...

EOU

#### Process options
unless
(GetOptions(\%OPTIONS,"verbose:s","quiet","debug:s",)) {
  print "$USAGE";
  exit;
}

$VERBOSE = $OPTIONS{"verbose"} || 0;
$QUIET = $OPTIONS{"quiet"} || 0;
$DEBUG = $OPTIONS{"debug"} || 0;

if ($DEBUG) {
  print "Options settings:\n";
  print "  VERBOSE = $VERBOSE\n";
  print "  QUIET = $QUIET\n";
  print "  DEBUG = $DEBUG\n";
}



###############################################################################
# Set Global Variables and execute main()
###############################################################################
main();
exit(0);



###############################################################################
# Main Program:
#
# Call $sbeams->Authenticate() and exit if it fails or continue if it works.
###############################################################################
sub main {

  #### Do the SBEAMS authentication and exit if a username is not returned
  exit unless ($current_username = $sbeams->Authenticate(
#      permitted_work_groups_ref=>[],
      permitted_work_groups_ref=>['PeptideAtlas_user','PeptideAtlas_admin',
      'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
      #connect_read_only=>1,
      allow_anonymous_access=>1,
  ));


  #### Read in the default input parameters
  my %parameters;
  my $n_params_found = $sbeams->parse_input_parameters(
      q=>$q,            # TMF: CGI object; received into $self
      parameters_ref=>\%parameters);
  #$sbeams->printDebuggingInfo($q);

  #### Process generic "state" parameters before we start
  $sbeams->processStandardParameters(parameters_ref=>\%parameters);

  #### Decide what action to take based on information so far
  if ($parameters{action} eq "???") {
      # Some action

  } else {
      handle_request(ref_parameters=>\%parameters);
      $sbeamsMOD->display_page_footer();
  }


} # end main



###############################################################################
# Handle Request
###############################################################################
sub handle_request {

  my %args = @_;

  #### Process the arguments list
  my $ref_parameters = $args{'ref_parameters'}
      || die "ref_parameters not passed";

  my %parameters = %{$ref_parameters};


  #### Define some generic varibles
  my ($i,$element,$key,$value,$line,$result,$sql);


  #### Define some variables for a query and resultset
  my %resultset = ();
  my $resultset_ref = \%resultset;
  my (%url_cols,%hidden_cols,%max_widths,$show_sql);
  ##TMF. Tends to show a blank page in html mode. Anti-useful!
  #$show_sql = 1;


  #### Read in the standard form values
  my $apply_action  = $parameters{'action'} || $parameters{'apply_action'};
  ##TMF: this is never used, and receives no value from cgi.
  my $TABLE_NAME = $parameters{'QUERY_NAME'};


  #### Set some specific settings for this program
  my $CATEGORY="Search PeptideAtlas";
  my $PROGRAM_FILE_NAME = $PROG_NAME;
  my $base_url = "$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME";
  my $help_url = "$CGI_BASE_DIR/help_popup.cgi";


  #### If the apply action was to recall a previous resultset, do it
  my %rs_params = $sbeams->parseResultSetParams('q' => $q);
  my $n_params_found = 0;

  if ($apply_action eq "VIEWRESULTSET") {
    $sbeams->readResultSet(
      resultset_file=>$rs_params{set_name},
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      resultset_params_ref=>\%rs_params,
    );
    $n_params_found = 99;
  }

  #### Get the passed parameters
  my $search_key = $parameters{"search_key"};
  my $organism_name = $parameters{"organism_name"};
  my $build_type_name = $parameters{"build_type_name"};
  #TMF added below 
  my $atlas_build_id = $parameters{"atlas_build_id"};
  if ($build_type_name && $atlas_build_id && 
         ($sbeams->output_mode() ne 'html')) {
    print "Specify only one of build_type_name and atlas_build_id.\n";
    return(0);
  }   

  #### Check to see whether specified atlas build is accessible
  if ($atlas_build_id) {
    #get project ID
    my $sql = qq~
	 SELECT project_id
	   FROM $TBAT_ATLAS_BUILD 
	  WHERE atlas_build_id = $atlas_build_id
    ~;
    my ($project_id) = $sbeams->selectOneColumn($sql);
    my @accessible_project_ids = $sbeams->getAccessibleProjects();
    my $ok_project = 0;
    for my $id (@accessible_project_ids) {
      if ($project_id == $id) {
        $ok_project = 1;
        last;
      }
    }
    if ( ! $ok_project ) {
      print "Atlas build $atlas_build_id does not exist, or you do not have access permission.\n";
      return(0);
    }
  }

  #### If a new search_key was supplied, store it
  if ($search_key) {
    $sbeams->setSessionAttribute(
      key => 'PeptideAtlas_search_string',
      value => $search_key,
    );

  #### Else see if we had one stored
  } else {
    $search_key = $sbeams->getSessionAttribute(
      key => 'PeptideAtlas_search_string',
    );
  }


  #### Build the list of build type names
  my $build_type_selection = getBuildTypeSelection(
    organism_name => $organism_name,
    build_type_name => $build_type_name,
  );

  #### This is needed for displaying the page header
  my $project_id = $sbeamsMOD->getProjectID(
    atlas_build_id => $atlas_build_id
  );


  #### Show current user context information
  #print "<BR>\n" if ($sbeams->output_mode() eq 'html');
  #$sbeams->printUserContext();

  #### Get the HTML to display the tabs
  my $tabMenu = $sbeamsMOD->getTabMenu(
    parameters_ref => \%parameters,
    program_name => $PROG_NAME,
  );



  #### If the output_mode is HTML, then display the form
  my $buffer = '';
  my $search_types_clause = getSearchTypeClause( params => \%parameters );
  if ($sbeams->output_mode() eq 'html') {
      my $spacer = $sbeams->getGifSpacer(800);
      my $sm_spacer = '&nbsp;' x 20;

      $buffer .= $q->start_form(-method=>"POST",
                           -action=>"$base_url",
                          );
      $buffer .= "<BR>".$tabMenu->asHTML();
      $buffer .= "<BR>$spacer<BR><P>";
      $buffer .= qq~<nobr><CENTER><IMG SRC="$HTML_BASE_DIR/images/PeptideAtlas_Logo.png"><BR>~;
      #$buffer .= qq~<img src="$HTML_BASE_DIR/images/space.gif" height=1 width=30>~;
      my $advanced = getSearchKeyTypeHTML();
#      $buffer .= "$advanced ";
      $buffer .= $q->textfield(-name=>"search_key",
                               -default=>$search_key,
                               -size=>60,
                               -maxlength=>2000,
                               );

      $buffer .= "&nbsp;&nbsp;&nbsp;";
      $buffer .= $q->submit(-name => "action",
                       -value => 'QUERY',
                       -label => 'GO');
      $buffer .= qq~<BR>
      Build type: <select name="build_type_name"> $build_type_selection->{HTML_optionlist} </select> &nbsp; &nbsp; $advanced<BR>
      <BR>
        (e.g.
          <A HREF="$base_url?search_key=ENSP00000374576&build_type_name=Any&action=GO"><SPAN TITLE="Ensembl protein identifier" CLASS="popup">ENSP00000374576</SPAN></A>,
          <A HREF="$base_url?search_key=IPI00807403&build_type_name=Any&action=GO"><SPAN TITLE="IPI protein identifier" CLASS="popup">IPI00807403</SPAN></A>,
          <A HREF="$base_url?search_key=NP_001366&build_type_name=Any&action=GO"><SPAN TITLE="Refseq protein identifier" CLASS="popup">NP_001366</SPAN></A>,
          <A HREF="$base_url?search_key=Hs.232375&build_type_name=Any&action=GO"><SPAN TITLE="UniGene identifier" CLASS="popup">Hs.232375</SPAN></A>,
          <A HREF="$base_url?search_key=RBP%25&build_type_name=Any&action=GO"><SPAN TITLE="Gene name wildcard search" CLASS="popup">RBP%</SPAN></A>,
          <A HREF="$base_url?search_key=RBP4&build_type_name=Any&action=GO"><SPAN TITLE="Gene name" CLASS="popup">RBP4</SPAN></A>,<BR>
          <A HREF="$base_url?search_key=%25helicase%25&build_type_name=Yeast&action=GO"><SPAN TITLE="Gene description wildcard search in yeast" CLASS="popup">\%helicase\%</SPAN></A>,
          <A HREF="$base_url?search_key=P06634&build_type_name=Yeast&action=GO"><SPAN TITLE="UniProt Identifier" CLASS="popup">P06634</SPAN></A>,
          <A HREF="$base_url?search_key=MCCC2&build_type_name=Human&action=GO"><SPAN TITLE="Gene name" CLASS="popup">MCCC2</SPAN></A>,
          <A HREF="$base_url?search_key=PAp00000097&build_type_name=Any&action=GO"><SPAN TITLE="Peptide accession" CLASS="popup">PAp00000097</SPAN></A>,
          <A HREF="$base_url?search_key=AAVEEGIVLGGGCALLR&build_type_name=Any&action=GO"><SPAN TITLE="Peptide sequence" CLASS="popup">AAVEEGIVLGGGCALLR</SPAN></A>
        )<BR>
      ~;

      $buffer .= '</CENTER></nobr></P>';
      $buffer .= $q->endform;
  }



  #########################################################################
  #### Process all the constraints

  #### If search_key was not selected, stop here
  my $key_error;
  my $error_msg;
  if ( !$parameters{search_key} && $apply_action ) {
    $key_error++;
    $error_msg = 'You must provide some text to search',
  } elsif ( $parameters{search_key} =~ /^[%_; ]+$|^[%_; ]+;|;[%_; ]+$|;[%_; ]+;/  && $apply_action ) {
    $key_error++;
    $error_msg = 'Full wildcard searches (%,_ only) are not supported.' 
  }

  if ( $key_error ) {
    $sbeams->set_page_message( type => 'Error', msg => <<"    END" );
		<BR>
      $error_msg
		<BR>
    END
    if ($sbeams->output_mode() eq 'html') {
      $sbeamsMOD->display_page_header(project_id => $project_id);
      print $buffer;
    } else {
      $sbeams->reportException(
          state => 'ERROR',
          type => 'INSUFFICIENT CONSTRAINTS',
          message => $error_msg,
      );
    }
    return '';
  }


  #### Build SEARCH_KEY constraint
  my $search_key_clause = $sbeams->parseConstraint2SQL(
      constraint_column=>"search_key_name",
      constraint_type=>"plain_text",
      constraint_name=>"Search Key",
      constraint_value=>$parameters{search_key},
      );
  return if ($search_key_clause eq '-1');

  my $atlas_build_ids;
  my $atlas_build_column;
  my $atlas_build_clause;

  #### Command-line specification of a specific atlas build id
  if ($sbeams->output_mode() ne 'html' && defined $atlas_build_id
         && !defined $build_type_name ) {
    $atlas_build_ids = $atlas_build_id;
    $atlas_build_column =  ["atlas_build","AB.atlas_build_name","Build Name"];
    $atlas_build_clause = qq~
         JOIN $TBAT_ATLAS_BUILD AB
              ON ( RES.atlas_build_id = AB.atlas_build_id)
    ~;

  #### ... or, typical CGI/command-line specification of an atlas build type
  } else {
    $atlas_build_ids = $build_type_selection->{atlas_build_ids};
    $atlas_build_column =  ["build_type","(CASE WHEN DAB.organism_specialized_build IS NULL THEN O.organism_name ELSE DAB.organism_specialized_build END)","Build Type"],
    $atlas_build_clause = qq~
         JOIN $TBAT_DEFAULT_ATLAS_BUILD DAB
              ON ( SKL.atlas_build_id = DAB.atlas_build_id
                   AND DAB.organism_id IS NOT NULL )
    ~;
  }

  #### Define the desired columns in the query
  #### [friendly name used in url_cols,SQL,displayed column title]
  my @column_array = (
    ["search_key_name","SKE.search_key_name","Search Key"],
#    ["search_key_type","SK.search_key_type","search_key_type"],
    $atlas_build_column,
    ["resource_name","SKL.resource_name","Identifier"],
    ["resource_type","SKE.resource_type","resource_type"],
    ["resource_n_matches","SKL.resource_n_matches","N Peptide obs"],
    ["resource_url","SKL.resource_url","resource_url"],
    ["organism_id","O.organism_id","organism_id"],
  );


  #### Build the columns part of the SQL statement
  my %colnameidx = ();
  my @column_titles = ();
  my $columns_clause = $sbeams->build_SQL_columns_list(
    column_array_ref=>\@column_array,
    colnameidx_ref=>\%colnameidx,
    column_titles_ref=>\@column_titles
  );


  #### Define the SQL statement to find the biosequence(s)
  $sql = qq~
       SELECT DISTINCT $columns_clause
         FROM $TBAT_SEARCH_KEY_LINK SKL
         LEFT JOIN  $TBAT_SEARCH_KEY_ENTITY SKE 
              ON (SKL.RESOURCE_NAME = SKE.RESOURCE_NAME) 
         JOIN $TB_ORGANISM O ON (O.ORGANISM_ID = SKL.ORGANISM_ID)
                  $atlas_build_clause
        WHERE 1 = 1
          $search_key_clause
          $search_types_clause
          AND SKL.atlas_build_id IN ( $atlas_build_ids )
       ORDER BY search_key_name
  ~;

  #### Define the hypertext links for columns that need them
  %url_cols = (
    	       'Identifier' => "$CGI_BASE_DIR/PeptideAtlas/\%$colnameidx{resource_url}V",
	       'Search Key_OPTIONS' => {allow_wrap=>1},
  );

  #### Define the hidden columns
  %hidden_cols = (
    	       'search_key_type' => 1,
#    	       'resource_type' => 1,
    	       'resource_url' => 1,
    	       'organism_id' => 1,
  );
  my $spacer = '&nbsp;' x 3;

  #use Time::HiRes;
  #my $elapsed;
  #########################################################################
  #### If QUERY or VIEWRESULTSET was selected, display the data
  if ($apply_action =~ /(QUERY|GO|VIEWRESULTSET)/) {

    #### Show the SQL that will be or was executed
    my $start = [ Time::HiRes::gettimeofday( ) ];

# script code goes here
    $sbeams->display_sql(sql=>$sql) if ($show_sql);
    # print "$sql\n";
    #### If the action contained QUERY, then fetch the results from
    #### the database
    if ($apply_action =~ /(QUERY|GO)/i) {

      #### Fetch the results from the database server
      $sbeams->fetchResultSet(
        sql_query=>$sql,
        resultset_ref=>$resultset_ref,
      );

       #### Filter result set: only keeep one combination of build_type, rescource_name and rescource_type
      my @filtered_result = ();
      my %BuildType_RescourceName = ();
      for my $row ( @{$resultset_ref->{data_ref}} ) {
        #intensity score
         my $build_type = $row->[1];
         my $rescource_name = $row->[2];
         my $rescource_type = $row->[3];
         if(not defined $BuildType_RescourceName{$build_type}{$rescource_name}){
            push @filtered_result, $row;
         }
         $BuildType_RescourceName{$build_type}{$rescource_name} = 1;
       }
       $resultset_ref->{data_ref} = \@filtered_result;


      #$elapsed = Time::HiRes::tv_interval( $start );
      #### Store the resultset and parameters to disk resultset cache
      $rs_params{set_name} = "SETME";
      $sbeams->writeResultSet(
        resultset_file_ref=>\$rs_params{set_name},
        resultset_ref=>$resultset_ref,
        query_parameters_ref=>\%parameters,
        resultset_params_ref=>\%rs_params,
        query_name=>"$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME",
      );
    }


    #### Determine how many results came back
    my $n_results = scalar(@{$resultset_ref->{data_ref}});

    #### If exactly one result came back, then redirect to the one hit
    if ($n_results == 1 && ($sbeams->output_mode() eq 'html')) {
      print "Status: 302 Resource Temporarily Moved\n";
      print "Location: $CGI_BASE_DIR/PeptideAtlas/".
      # Using the explict index makes things brittle...
#    	$resultset_ref->{data_ref}->[0]->[6]."\n\n";
    	$resultset_ref->{data_ref}->[0]->[$colnameidx{resource_url}]."\n\n";
      exit;
    }

    #### Otherwise, display the page header to show the match results
    $sbeamsMOD->display_page_header(project_id => $project_id);

    if ($sbeams->output_mode() eq 'html') {
      print $buffer;
      print "<BR><BR>";
    }


    my $cleaned_search_key = $search_key;
    $cleaned_search_key =~ s/^%//;
    $cleaned_search_key =~ s/%$//;

    my $download_link = '';
    #### If 0 results came back, then inform the user
    if ($n_results == 0) {
      if ($sbeams->output_mode() eq 'html') {
	print "There were no matches in the index to match your search key '$search_key'<BR>";
	if ($search_key !~ /%/) {
	  print qq~
	    <TABLE BORDER="0" WIDTH="570"><TR><TD>
	    <BR>You can broaden the search by placing wildcards around your search key like this:
	    <A HREF="$base_url?search_key=$cleaned_search_key%25&action=GO">$cleaned_search_key%</A>,
	    <A HREF="$base_url?search_key=%25$cleaned_search_key%25&action=GO">%$cleaned_search_key%</A>.
	    </TD></TR></TABLE>
	  ~;
	}
      } else {
	print "There were no matches in the index to match your search key '$search_key'\n";
      }
      return(0);
    } elsif ( $build_type_selection->{atlas_build_ids} =~ /^\d+$/ ) {
			my @identifiers;
      for my $row ( @{$resultset_ref->{data_ref}} ) {
#				push @identifiers, $row->[3];
				push @identifiers, $row->[$colnameidx{resource_name}];
			}
			my $id_string = join( '%3B', @identifiers );

			$id_string =~ s/\s//g;
      my $prot_link = qq ~<A HREF="GetProteins?atlas_build_id=$build_type_selection->{atlas_build_ids};biosequence_name_constraint=$id_string;QUERY_NAME=AT_GetProteins;action=QUERY"> link</A> ~;
			my $pep_link = $prot_link;
			$pep_link =~ s/GetProteins/GetPeptides/g;

			$download_link = qq~
			  $spacer You can download more information about the proteins via this $prot_link. <BR>
				$spacer Or information about all observed peptides for the proteins via this $pep_link.
			~;
	 	}

    print qq~
      <TABLE BORDER="0" WIDTH="570"><TR><TD>
      Your search returned $n_results matches. Please choose from the table below.  <BR> $download_link <BR>
    ~ if ($sbeams->output_mode() eq 'html');

    if ($search_key !~ /%/) {
      print qq~
      $spacer You can also broaden the search by using wildcards: <A HREF="$base_url?search_key=$cleaned_search_key%25&action=GO">$cleaned_search_key%</A>, <A HREF="$base_url?search_key=%25$cleaned_search_key%25&action=GO">%$cleaned_search_key%</A>.
      ~ if ($sbeams->output_mode() eq 'html');
		}
    print "</TD></TR></TABLE><BR>\n" if ($sbeams->output_mode() eq 'html');

    #### Display the resultset
    $sbeams->displayResultSet(
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      rs_params_ref=>\%rs_params,
      url_cols_ref=>\%url_cols,
      hidden_cols_ref=>\%hidden_cols,
      max_widths=>\%max_widths,
      column_titles_ref=>\@column_titles,
      base_url=>$base_url,
    );

    #### Display the resultset controls
    $sbeams->displayResultSetControls(
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      rs_params_ref=>\%rs_params,
      base_url=>$base_url,
    );


  #### If QUERY was not selected, then tell the user to enter some parameters
  } else {
    if ($sbeams->invocation_mode() eq 'http') {
      $sbeamsMOD->display_page_header(project_id => $project_id);
      print $buffer;
      print "Click [GO] to execute the search<BR>\n";
    } else {
      print "Set action=GO to execute the search\n";
    }
  }


} # end handle_request


sub throw_error {
  my %args = @_;

  for my $arg ( qw(project error) ) {
    die ( "must provide $arg" ) unless $args{$arg};
  }
  $args{buffer} ||= '';


  if ($sbeams->output_mode() eq 'html') {
    $sbeams->set_page_message( type => 'Error', msg => $args{error} );
    $sbeamsMOD->display_page_header(project_id => $args{project});
    print $args{buffer};
    $sbeamsMOD->display_page_footer();
  } else {
    $sbeams->reportException( state => 'ERROR',
          type => 'INSUFFICIENT CONSTRAINTS',
          message => $args{error},
      );
  }
  exit;
}

###############################################################################

###############################################################################
# getBuildTypeSelection
###############################################################################
sub getBuildTypeSelection {
  my $SUB_NAME = 'getBuildTypeSelection';
  my %args = @_;

  #### Decode the argument list
  my $organism_name = $args{'organism_name'};
  my $build_type_name = $args{'build_type_name'};


  #### If no organism was supplied, see if it was cached for this session
  unless ($organism_name) {
    $organism_name = $sbeams->getSessionAttribute(
      key => 'PeptideAtlas_organism_name',
    );
  }

  #### If no build_type_name was supplied, see if it's cached for this session
  unless ($build_type_name) {
    $build_type_name = $sbeams->getSessionAttribute(
      key => 'PeptideAtlas_build_type_name',
    );
  }

  #### Or default to Any
  unless ($build_type_name) {
    $build_type_name = $organism_name || 'Any';
  }


  #### Get a list of accessible project_ids
  my @accessible_project_ids = $sbeams->getAccessibleProjects();
  my $accessible_project_ids = join( ",", @accessible_project_ids ) || '0';

  #### Get a hash of available organisms via atlas builds
  my $sql = qq~
      SELECT DISTINCT DAB.atlas_build_id,O.organism_name,DAB.organism_specialized_build
        FROM $TBAT_ATLAS_BUILD AB
        JOIN $TBAT_DEFAULT_ATLAS_BUILD DAB
             ON (AB.atlas_build_id = DAB.atlas_build_id)
        JOIN $TBAT_BIOSEQUENCE_SET BS
             ON (BS.biosequence_set_id = AB.biosequence_set_id)
        JOIN $TB_ORGANISM O ON (O.organism_id = BS.organism_id)
       WHERE AB.project_id IN ( $accessible_project_ids )
         AND AB.record_status!='D'
         AND DAB.record_status!='D'
       ORDER BY organism_name,DAB.organism_specialized_build
  ~;
  #print "Content-type: text/html\n\n<PRE>$sql</PRE>\n";
  my @build_types = $sbeams->selectSeveralColumns($sql);

  my @options = ('Any');
  my %options = ('Any'=>'Any');
  my %atlas_build_ids;

  #### Build the list of available organisms
  foreach my $build_type ( @build_types ) {
    my $build_type_name = $build_type->[2] || $build_type->[1];
    push(@options,$build_type_name);
    $options{$build_type_name} = $build_type_name;
    $atlas_build_ids{$build_type_name} = $build_type->[0];
  }


  #### Build the option list HTML
  my $optionlist = '';
  my $matched_parameter = 0;
  foreach my $key ( @options ) {
    my $flag = '';
    if ($key eq $build_type_name) {
      $flag = 'SELECTED';
      $matched_parameter++;
    }
    $optionlist .= "<OPTION VALUE=\"$key\" $flag>$options{$key}</OPTION>\n";
  };


  #### Also make sure the user selected a valid option
  unless ($matched_parameter) {
    $build_type_name = 'Any';
  }


  #### Get the atlas_build_ids
  my $atlas_build_ids = $atlas_build_ids{$build_type_name};
  if ($build_type_name eq 'Any') {
    $atlas_build_ids = join(",",values(%atlas_build_ids));
  }

  #### Build a data structure to return
  my %tmp = (
    HTML_optionlist => $optionlist,
    build_type_name => $build_type_name,
    atlas_build_ids => $atlas_build_ids,
  );

  #### Store the selected organism_name in the session cache
  if ($build_type_name) {
    $sbeams->setSessionAttribute(
      key => 'PeptideAtlas_build_type_name',
      value => $build_type_name,
    );
  }

  return \%tmp;

} # end getBuildTypeSelection

sub getSearchTypeClause {
  my %args = @_;
  for my $param ( keys( %{$args{params}} ) ) {
    $log->debug( "$param -> $args{params}->{$param}" );
  }
  my $clause = '';
  $search_type_param{all_fields} = 'checked';

  # Short circuit if'n all was specified
  return $clause if $args{params}->{all_fields} eq 'on';

  # conjuntion?
  my $conj = '';
  if ( $args{params}->{gene_name} eq 'on'  ) {
    $search_type_param{gene_name} = 'checked';
    $clause .= " $conj search_key_type LIKE '%NAME%'\n";
    $conj = ' OR ';
  }
  if ( $args{params}->{gene_id} eq 'on'  ) {
    $search_type_param{gene_id} = 'checked';
    $clause .= " $conj search_key_type LIKE '%ID%'\n";
    $conj = ' OR ';
  }
  if ( $args{params}->{sequence} eq 'on'  ) {
    $search_type_param{sequence} = 'checked';
    $clause .= " $conj search_key_type = 'peptide sequence'\n";
    $conj = ' OR ';
  }
  if ( $args{params}->{refseq} eq 'on'  ) {
    $search_type_param{refseq} = 'checked';
    $clause .= " $conj search_key_type LIKE 'REFSEQ%'\n";
    $conj = ' OR ';
  }
  if ( $args{params}->{accession} eq 'on'  ) {
    $search_type_param{accession} = 'checked';
    $clause .= " $conj search_key_type IN ( 'gi Accession', 'HINV', 'IPI',
     'RefSeq', 'SGD ID', 'TrEMBL', 'UniGene', 'UniProt', 'UniProt ID',
     'UniProt/TrEMBL', 'UniProtKB', 'VEGA' ) ";
    $conj = ' OR ';
  }
  if ( $args{params}->{pa_accession} eq 'on'  ) {
    $search_type_param{pa_accession} = 'checked';
    $clause .= " $conj search_key_type = 'PeptideAtlas'\n";
    $conj = ' OR ';
  }
  if ( $args{params}->{gene_symbol} eq 'on'  ) {
    $search_type_param{gene_symbol} = 'checked';
    $clause .= " $conj search_key_type LIKE '%symbol'\n";
    $conj = ' OR ';
  }
  if ( $clause ) {
    $search_type_param{all_fields} = '';
    $clause = " AND ( $clause ) ";
  }
  return $clause;
}

# http://db.systemsbiology.net/devDC/sbeams/cgi/PeptideAtlas/Search2?search_key=yal%25&action=GO&build_type_name=Any
# &all_fields=on
# &gene_name=on
# &gene_id=on
# &gene_symbol=on
# &accession=on
# &refseq=on
# &sequence=on
# &pa_accession=on
#
# Alias                  
# COG                    
# combined               
# Common Name            
# Description            
# Ensembl Protein        
# Entrez Gene Symbol     
# Entrez GeneID          
# Full Name              
# full_name              
# Functional Description 
# Functional_Note        
# Gene ID                
# Gene name              
# gene_name              
# gi Accession           
# HINV                   
# IPI                    
# Old ORF Name           
# ORF Name               
# ORF qualifier          
# ORF_name               
# peptide sequence       
# PeptideAtlas           
# Protein name           
# RefSeq                 
# REFSEQ_INFERRED        
# REFSEQ_MODEL           
# REFSEQ_PREDICTED       
# REFSEQ_PROVISIONAL     
# REFSEQ_REVIEWED        
# REFSEQ_VALIDATED       
# SGD ID                 
# TrEMBL                 
# UniGene                
# UniProt                
# UniProt ID             
# UniProt Name           
# UniProt Symbol         
# UniProt/TrEMBL         
# UniProtKB              
# VEGA   
#
#
sub getSearchKeyTypeHTML {
  my $spacer = $sbeams->getGifSpacer(300);
  my $content = qq~
  <SCRIPT  TYPE="text/javascript">
  function toggle_boxes(type) {

    var fields = new Array();
    if ( type == "specific" ) {
      fields[0] = "gene_name";
      fields[1] = "gene_id";
      fields[2] = "gene_symbol";
      fields[3] = "accession";
      fields[4] = "refseq";
      fields[5] = "sequence";
      fields[6] = "pa_accession";
    } else {
      fields[0] = "all_fields";
    }
//    alert( "array fields has " + fields.length + " elements" );
    for (var i=0; i< fields.length; i++) {
      var box = document.getElementsByName(fields[i]);
      box[0].checked = false;
    }
  }
  </SCRIPT>

  <TABLE class=info_box>
  <TR>
  <TD ALIGN=RIGHT><INPUT TYPE=checkbox ID="all" $search_type_param{all_fields} NAME=all_fields ONCHANGE=toggle_boxes('specific')></INPUT></TD>
  <TD>All</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=gene_name $search_type_param{gene_name} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Protein/Gene Name</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=gene_id $search_type_param{gene_id} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Protein/Gene ID</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=gene_symbol $search_type_param{gene_symbol} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Protein/Gene Symbol</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=accession  $search_type_param{accession} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Accession</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=refseq $search_type_param{refseq} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Refseq</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox NAME=sequence $search_type_param{sequence} ONCHANGE=toggle_boxes('all')></INPUT></TD>
  <TD>Sequence</TD>
  </TR>

  <TR>
  <TD ALIGN=RIGHT><INPUT ID="specific" TYPE=checkbox $search_type_param{pa_accession} NAME=pa_accession></INPUT></TD>
  <TD>Peptide Accession</TD>
  </TR>
  </TABLE>
  ~; 
  my $toggle = $sbeams->make_toggle_section( textlink => 1,
                                             showtext => "Advanced Search",
                                             hidetext => "Basic Search", 
                                               sticky => 1,
                                               name   => 'PA_search_key_options',
                                              imglink => 1,
                                              visible => 0,
                                              content => $content );

  return "$toggle";
}
