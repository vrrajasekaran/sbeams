#!/usr/local/bin/perl

###############################################################################
# Program     : GetProteins
# Author      : Eric Deutsch <edeutsch@systemsbiology.org>
# $Id: GetPeptides 5436 2007-07-03 23:56:02Z sloeveni $
#
# Description : This program that allows users to
#               get proteins from the PeptideAtlas based on various criteria.
#
# SBEAMS is Copyright (C) 2000-2005 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
#
###############################################################################


###############################################################################
# Set up all needed modules and objects
###############################################################################
use strict;
use Getopt::Long;
use FindBin;

use lib "$FindBin::Bin/../../lib/perl";
use vars qw ($sbeams $sbeamsMOD $q $current_contact_id $current_username
             $PROG_NAME $USAGE %OPTIONS $QUIET $VERBOSE $DEBUG $DATABASE
             $TABLE_NAME $PROGRAM_FILE_NAME $CATEGORY $DB_TABLE_NAME
             @MENU_OPTIONS);

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::TabMenu;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::BioLink::Tables;

use lib "$FindBin::Bin";
use lib "/net/db/projects/PeptideAtlas/pipeline/lib/ensembl-57/modules";
use lib "/net/db/projects/PeptideAtlas/pipeline/bin";
use DBI;

use Bio::Graphics::Panel;
use Bio::SeqFeature::Generic;
use Bio::EnsEMBL::Registry;

$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);


###############################################################################
# Set program name and usage banner for command line use
###############################################################################
$PROG_NAME = $FindBin::Script;
$USAGE = <<EOU;
Usage: $PROG_NAME [OPTIONS] key=value key=value ...
Options:
  --verbose n         Set verbosity level.  default is 0
  --quiet             Set flag to print nothing at all except errors
  --debug n           Set debug flag

 e.g.:  $PROG_NAME [OPTIONS] [keyword=value],...

EOU

#### Process options
unless (GetOptions(\%OPTIONS,"verbose:s","quiet","debug:s")) {
  print "$USAGE";
  exit;
}

$VERBOSE = $OPTIONS{"verbose"} || 0;
$QUIET = $OPTIONS{"quiet"} || 0;
$DEBUG = $OPTIONS{"debug"} || 0;
if ($DEBUG) {
  print "Options settings:\n";
  print "  VERBOSE = $VERBOSE\n";
  print "  QUIET = $QUIET\n";
  print "  DEBUG = $DEBUG\n";
}


###############################################################################
# Set Global Variables and execute main()
###############################################################################
main();
exit(0);


###############################################################################
# Main Program:
#
# Call $sbeams->Authenticate() and exit if it fails or continue if it works.
###############################################################################
sub main {

  #### Do the SBEAMS authentication and exit if a username is not returned
  exit unless ($current_username = $sbeams->Authenticate(
    #permitted_work_groups_ref=>['PeptideAtlas_user','PeptideAtlas_admin'],
    # connect_read_only=>1,
    allow_anonymous_access=>1,
  ));


  #### Read in the default input parameters
  ### TMF: these are input via the form, which is defined
  ###   in PeptideAtlas_table_column.txt under GetProteins.
  my %parameters;

  $parameters{uploaded_file_not_saved} = 1;

  my $n_params_found = $sbeams->parse_input_parameters(
    q=>$q,parameters_ref=>\%parameters);
     #$sbeams->printDebuggingInfo($q);

  #### Process generic "state" parameters before we start
  $sbeams->processStandardParameters(parameters_ref=>\%parameters);

  #### Decide what action to take based on information so far
  if ($parameters{action} eq "???") {

    # Some action

  } else {

    my $project_id = $sbeamsMOD->getProjectID(
        atlas_build_id => $parameters{atlas_build_id}
        );

    $sbeamsMOD->display_page_header(project_id => $project_id);

    handle_request(ref_parameters=>\%parameters);

    $sbeamsMOD->display_page_footer();

  }



} # end main


###############################################################################
# Handle Request
###############################################################################
sub handle_request {
  my %args = @_;

  #### Process the arguments list
  my $ref_parameters = $args{'ref_parameters'}

    || die "ref_parameters not passed";
  my %parameters = %{$ref_parameters};

  #### Declare some variables
  my ($protein_group, $genetic_locus, $stend_option, $no_coord_count, $pid, $map);

  #### Show current user context information
  print "<BR>\n" if ($sbeams->output_mode() eq 'html');
  #$sbeams->printUserContext();

  #### Get the HTML to display the tabs
  my $tabMenu = $sbeamsMOD->getTabMenu(
    parameters_ref => \%parameters,
    program_name => $PROG_NAME,
  );
  print $tabMenu->asHTML() if ($sbeams->output_mode() eq 'html');


  #### Get the current atlas_build_id based on parameters or session
  my $atlas_build_id = $sbeamsMOD->getCurrentAtlasBuildID(
    parameters_ref => \%parameters,
  );
  if (defined($atlas_build_id) && $atlas_build_id < 0) {
    return;
  }
  $parameters{atlas_build_id} = $atlas_build_id;

  #### Define some generic variables
  my ($i,$element,$key,$value,$line,$result,$sql);


  #### Define some variables for a query and resultset
  my %resultset = ();
  my $resultset_ref = \%resultset;
  my (%url_cols,%hidden_cols,%max_widths,$show_sql);

  #### Read in the standard form values
  my $apply_action  = $parameters{'action'} || $parameters{'apply_action'};

  # for some reason, this returns nothing.
  # Used to return GetProteins instead of GetProteins_beta
  my $TABLE_NAME = $parameters{'QUERY_NAME'};

  #### Set some specific settings for this program
  my $CATEGORY="Get Proteins";
  $TABLE_NAME="AT_GetProteins" unless ($TABLE_NAME);
  ($PROGRAM_FILE_NAME) =
    $sbeamsMOD->returnTableInfo($TABLE_NAME,"PROGRAM_FILE_NAME");
  my $base_url = "$CGI_BASE_DIR/$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME";

  #### Print link to old GetProteins cgi
  if ($sbeams->output_mode() eq 'html') {
    my $BYPEP_TABLE_NAME="AT_GetProteinsByPep";
    my ($BYPEP_PROGRAM_FILE_NAME) =
      $sbeamsMOD->returnTableInfo($BYPEP_TABLE_NAME,"PROGRAM_FILE_NAME");
    my $alt_base_url = "$CGI_BASE_DIR/$SBEAMS_SUBDIR/$BYPEP_PROGRAM_FILE_NAME";
    my $getProteinsByPep_call = 
	"\"$alt_base_url\?atlas_build_id=$parameters{atlas_build_id}\&input_form_format=minimum_detail\"";
    print "<p><b>New GetProteins (formerly GetProteins_beta) rolled out 10-Dec-2009.</b> For our default builds, provides protein presence level information.<br>";
    print "<b><a href=$getProteinsByPep_call>Pre-2010 version</a></b> provides Best Peptide Probability, N Protein Mappings, N Genome Locations and Sample  constraints.</p>";
  }

  #### Get the columns and input types for this table/query
  ### TMF:
  ### At this point, $TABLE_NAME is AT_GetProteins,
  ### @columns contains the user-specifiable constraints
  ### and I will need to modify it to constrain the display

  # debugging
  my @columns = $sbeamsMOD->returnTableInfo($TABLE_NAME,"ordered_columns");
  if (0) {
    for my $col (@columns) {
      print "$col\n";
    }
  }

  ### TMF: hash column name => text, optionList, etc.
  my %input_types = 
    $sbeamsMOD->returnTableInfo($TABLE_NAME,"input_types");


  #### Read the input parameters for each column
  my $n_params_found = $sbeams->parse_input_parameters(
    q=>$q,parameters_ref=>\%parameters,
    columns_ref=>\@columns,input_types_ref=>\%input_types);
   #$sbeams->printDebuggingInfo($q);


  #### If the apply action was to recall a previous resultset, do it
  my %rs_params = $sbeams->parseResultSetParams(q=>$q);
  if ($apply_action eq "VIEWRESULTSET") {
    $sbeams->readResultSet(
        resultset_file=>$rs_params{set_name},
        resultset_ref=>$resultset_ref,
        query_parameters_ref=>\%parameters
    );
    $n_params_found = 99;
  }


  #### Set some reasonable defaults if no parameters supplied
  unless ($n_params_found) {
    $parameters{input_form_format} = "minimum_detail";
    $parameters{presence_level_constraint} = "1,2";
    $parameters{redundancy_constraint} = "4";
    $parameters{protein_properties_constraint} = "2";
    $parameters{covering_constraint} = "0";
  }




  #### Apply any parameter adjustment logic
  # None


  #### Display the user-interaction input form
  $sbeams->display_input_form(
    TABLE_NAME=>$TABLE_NAME,
    CATEGORY=>$CATEGORY,
    apply_action=>$apply_action,
    PROGRAM_FILE_NAME=>$PROG_NAME,
    parameters_ref=>\%parameters,
    input_types_ref=>\%input_types,
    mask_user_context=> '1',
  );

  #### Display the form action buttons
  $sbeams->display_form_buttons(TABLE_NAME=>$TABLE_NAME);


  #### Finish the upper part of the page and go begin the full-width
  #### data portion of the page
  $sbeams->display_page_footer(close_tables=>'YES',
    separator_bar=>'YES',display_footer=>'NO');


  #########################################################################
  #### Process all the constraints

  #### If no atlas_build_id was selected, stop here
  unless ($parameters{atlas_build_id}) {
    $sbeams->reportException(
      state => 'ERROR',
      type => 'INSUFFICIENT CONSTRAINTS',
      message => 'You must select at least one Atlas Build',
    );
    return;
  }

  my $n_sub_queries = 3;

  my @primary_bioseq;
  $primary_bioseq[0] = "BS_REF";
  $primary_bioseq[1] = "BS_REL";
  $primary_bioseq[2] = "BS_INDIS";

  #### Build ATLAS_BUILD constraint
  my $atlas_build_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"AB.atlas_build_id",
    constraint_type=>"int_list",
    constraint_name=>"Atlas Build",
    constraint_value=>$parameters{atlas_build_id} );
  return if ($atlas_build_clause eq '-1');

  #### Build clauses that are specific to a sub-query
  my @biosequence_name_clauses;
  my @biosequence_gene_name_clauses;
  my @biosequence_desc_clauses;
  for (my $i = 0; $i < $n_sub_queries; $i++ ){
    #### Build BIOSEQUENCE_NAME constraints
    $biosequence_name_clauses[$i] = $sbeams->parseConstraint2SQL(
      constraint_column=>"$primary_bioseq[$i].biosequence_name",
      constraint_type=>"plain_text",
      constraint_name=>"BioSequence Name",
      constraint_value=>$parameters{biosequence_name_constraint} );
    return if ($biosequence_name_clauses[$i] eq '-1');

    #### Build BIOSEQUENCE_GENE_NAME constraints
    $biosequence_gene_name_clauses[$i] = $sbeams->parseConstraint2SQL(
      constraint_column=>"$primary_bioseq[$i].biosequence_gene_name",
      constraint_type=>"plain_text",
      constraint_name=>"BioSequence Gene Name",
      constraint_value=>$parameters{biosequence_gene_name_constraint} );
    return if ($biosequence_gene_name_clauses[$i] eq '-1');

    #### Build BIOSEQUENCE_DESC constraints
    $biosequence_desc_clauses[$i] = $sbeams->parseConstraint2SQL(
      constraint_column=>"$primary_bioseq[$i].biosequence_desc",
      constraint_type=>"plain_text",
      constraint_name=>"BioSequence Description",
      constraint_value=>$parameters{biosequence_desc_constraint} );
    return if ($biosequence_desc_clauses[$i] eq '-1');
  }

  #### Build PROBABILITY constraint
  my $probability_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PID.probability)",
    constraint_type=>"flexible_float",
    constraint_name=>"Protein Probability",
    constraint_value=>$parameters{probability_constraint} );
  return if ($probability_clause eq '-1');

  #### Build N_OBSERVATIONS constraint
  my $n_observations_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PID.n_observations",
    constraint_type=>"flexible_int",
    constraint_name=>"Number of Observations",
    constraint_value=>$parameters{n_observations_constraint} );
  return if ($n_observations_clause eq '-1');

  #### Build CHROMOSOME constraint
  my $chromosome_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BPS.chromosome",
    constraint_type=>"plain_text",
    constraint_name=>"Chromosome",
    constraint_value=>$parameters{chromosome} );
  return if ($chromosome_clause eq '-1');

  #### Build GENETIC_LOCUS constraint
  my $genetic_locus_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BPS.genetic_locus",
    constraint_type=>"plain_text",
    constraint_name=>"Genetic Locus",
    constraint_value=>$parameters{genetic_locus} );
  return if ($genetic_locus_clause eq '-1');

  #### Build START_IN_CHROMOSOME constraint
  my $start_in_chromosome_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BPS.start_in_chromosome",
    constraint_type=>"flexible_int",
    constraint_name=>"Start in Chromosome",
    constraint_value=>$parameters{start_in_chromosome} );
  return if ($start_in_chromosome_clause eq '-1');

  #### Build END_IN_CHROMOSOME constraint
  my $end_in_chromosome_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BPS.end_in_chromosome",
    constraint_type=>"flexible_int",
    constraint_name=>"end in Chromosome",
    constraint_value=>$parameters{end_in_chromosome} );
  return if ($end_in_chromosome_clause eq '-1');

  #### Build STRAND constraint
  my $strand_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BPS.strand",
    constraint_type=>"plain_text",
    constraint_name=>"Strand",
    constraint_value=>$parameters{strand} );
  return if ($chromosome_clause eq '-1');

  #### Build ESTIMATED_NG_PER_ML constraint
  my $estimated_ng_per_ml_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PID.estimated_ng_per_ml",
    constraint_type=>"flexible_float",
    constraint_name=>"Estimated ng/ml",
    constraint_value=>$parameters{estimated_ng_per_ml_constraint} );
  return if ($estimated_ng_per_ml_clause eq '-1');

  #### Build N_DISTINCT_PEPTIDES constraint
  my $n_distinct_peptides_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PID.n_distinct_peptides",
    #constraint_column=>"SUM(PID.n_distinct_peptides)",
    constraint_type=>"flexible_int",
    constraint_name=>"Number of Distinct Peptides",
    constraint_value=>$parameters{n_distinct_peptides_constraint} );
  return if ($n_distinct_peptides_clause eq '-1');

  #### Build PROTEIN_GROUP constraint
  my $protein_group_representative_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BS_REP.biosequence_name",
    constraint_type=>"plain_text",
    constraint_name=>"Protein Group",
    constraint_value=>$parameters{protein_group_representative_constraint} );
  return if ($protein_group_representative_clause eq '-1');

  #### Build PRESENCE_LEVEL constraint
  my $presence_level_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PPL.protein_presence_level_id",
    constraint_type=>"int_list",
    constraint_name=>"Protein Presence Level",
    constraint_value=>$parameters{presence_level_constraint} );
  return if ($presence_level_clause eq '-1');

  #### Build REDUNDANCY constraint
  my $redundancy_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"BRT.biosequence_relationship_type_id",
    constraint_type=>"int_list",
    constraint_name=>"Redundancy",
    constraint_value=>$parameters{redundancy_constraint} );
  return if ($redundancy_clause eq '-1');

  #### Build IS_COVERING constraint
  my $is_covering_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"PID.is_covering",
    constraint_type=>"plain_text",
    constraint_name=>"Is Covering",
    constraint_value=>$parameters{covering_constraint} );
  return if ($is_covering_clause eq '-1');
  $is_covering_clause =~ s/LIKE 'on'/= 1/;

  #### Build PROTEIN_PROPERTIES constraint
  my $protein_properties_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"QO.protein_property",
    constraint_type=>"plain_text",
    constraint_name=>"Protein Properties",
    constraint_value=>$parameters{protein_properties_constraint} );
  return if ($protein_properties_clause eq '-1');


  ## get organism_id to pass on to url_cols
  my $tsql = qq~
      SELECT BS.organism_id
      FROM $TBAT_BIOSEQUENCE_SET BS
      JOIN $TBAT_ATLAS_BUILD AB
      ON (AB.biosequence_set_id = BS.biosequence_set_id)
      where AB.atlas_build_id ='$parameters{atlas_build_id}'
      ~;
 
   my ($organism_id) = $sbeams->selectOneColumn($tsql) or
       die "\nERROR: Unable to find the organism_id" .
       " with $tsql\n\n";

  $parameters{organism_id} = $organism_id;

  ## get list of protein property column names from query_options table
  my $tsql = qq~
      SELECT option_key
      FROM $TBAT_QUERY_OPTION
      WHERE option_type = 'protein_property'
      ~;
 
  my @protein_properties_available = $sbeams->selectOneColumn($tsql) or
      die "\nERROR: Unable to find any protein properties" .
      " with $tsql\n\n";

  $protein_properties_clause = "JOIN ";
  for my $prop (@protein_properties_available) {
  }

  #exit;

  ## handle file upload and clause for sql for $parameters{upload_file}
  my $biosequence_names_clause;
  my %protein_hash;
  if ( $parameters{upload_file} )
  {
     ## upload the file to a file handler
     my $fh = $q->upload('upload_file');

     if (!$fh && $q->cgi_error)
     {
       print $q->header(-status=>$q->cgi_error);
     } elsif (!$fh) {
       # We get here when, after successfully uploading, we sort by column.
       #print "Could not create file handle for $parameters{upload_file}!\n"
     }

     # if file is a text file and is not too big, upload
     if ( (-T $fh) && (-s $fh < 1000000)) ##size constraint of 10 MB, restrict $count < 30000
     {
       my $count = 0;
       my $read_file=0;
       my $prt;
       ## protein list
       while ($prt=<$fh>)
       {
         chomp($prt);
         $prt =~ s/\s+$//;
         if ($prt)
         {
             $protein_hash{$prt} = $prt;
             $count = $count + 1;
         }
         last if ($count > 30000);
      }
    }
    ## join with a commas:
    my $protein_list = "";
    foreach my $pr (keys %protein_hash)
    {
       $protein_list = "'$protein_hash{$pr}',$protein_list"; 
    }
    ## trim off last comma:
    $protein_list =~ s/(.*)(,)$/$1/;

    unless ($protein_list =~ m/%/) {
	$log->debug(" in unless % ") ;
	$biosequence_names_clause =
          "   AND BS_REF.biosequence_name IN ( $protein_list )";
    }
    if ($protein_list =~ m/%/) {
	my @tmp = split("," , $protein_list);
	$biosequence_names_clause =
          "   AND ( BS_REF.biosequence_name LIKE  $tmp[0] ";
	for (my $i = 1; $i < scalar(@tmp); $i++ ){
	  if (  $tmp[$i] ){
	    $biosequence_names_clause = $biosequence_names_clause .
               "   OR BS_REF.biosequence_name LIKE $tmp[$i]  ";
	    } 
	}
	$biosequence_names_clause = $biosequence_names_clause . " ) --end";

    }
  } # if upload file


  #### Build ROWCOUNT constraint
  $parameters{row_limit} = 5000
    unless ($parameters{row_limit} > 0 && $parameters{row_limit}<=1000000);
  my $limit_clause = "TOP $parameters{row_limit}";
  #### Disable row limits
  $limit_clause = "";


  #### Define some variables needed to build the query
  my @column_array_refs;

  #### This query is a union of multiple sub-queries. Define stuff specific
  #### to each sub-query.
  my @biosequence_name_sql;
  my @is_covering_sql;
  my @presence_level_sql;
  my @probability_sql;
  my @confidence_sql;
  my @relationship_phrase_sql;
  my @n_observations_sql;
  my @estimated_ng_per_ml_sql;
  my @abundance_uncertainty_sql;
  my @n_distinct_peptides_sql;
  my @relationship_sort_order_sql;
  my @presence_level_sort_order_sql;
  my @reference_biosequence_sql;
  my @represented_by_biosequence_sql;
  my @group_number_sql;
  my @seq_unique_prots_sql;
  my @is_keratin_sql;
  my @is_immunoglobulin_sql;
  my @biosequence_description_sql;

  # Define SQL specific for displaying protein identifications
  $biosequence_name_sql[0] = "BS_REF.biosequence_name";
  $is_covering_sql[0] = "(CASE WHEN PID.is_covering=1 THEN 'C' ELSE '' END)";
  $presence_level_sql[0] = "PPL.level_phrase";
  $probability_sql[0] = "STR(PID.probability,7,3)";
  $confidence_sql[0] = "STR(PID.confidence,7,3)";
  $n_observations_sql[0] = "PID.n_observations";
  $estimated_ng_per_ml_sql[0] = "STR(PID.estimated_ng_per_ml,7,3)";
  $abundance_uncertainty_sql[0] = "PID.abundance_uncertainty";
  $n_distinct_peptides_sql[0] = "PID.n_distinct_peptides";
  $relationship_phrase_sql[0] = "NULL";
  $relationship_sort_order_sql[0] = "NULL";
  $presence_level_sort_order_sql[0] = "PPL.sort_order";
  $reference_biosequence_sql[0] = "BS_SUBSUMED_BY.biosequence_name";
  $represented_by_biosequence_sql[0] = "BS_REP.biosequence_name";
  $group_number_sql[0] = "PID.protein_group_number";
  $seq_unique_prots_sql[0] = "PID.seq_unique_prots_in_group";
  $is_keratin_sql[0]="(CASE WHEN BPS.is_keratin=1 THEN 'ker' ELSE '' END)";
  $is_immunoglobulin_sql[0]="(CASE WHEN BPS.is_immunoglobulin=1 THEN 'Ig' ELSE '' END)";
  $biosequence_description_sql[0] =
        "CAST(BS_REF.biosequence_desc AS varchar(255))";

  # Define SQL specific for displaying indistinguishables, identicals
  # relative to protein identifications
  $biosequence_name_sql[1] = "BS_REL.biosequence_name";
  $is_covering_sql[1] = "NULL";
  $presence_level_sql[1] = "NULL";
  $probability_sql[1] = "NULL";
  $confidence_sql[1] = "NULL";
  $n_observations_sql[1] = "NULL";
  $estimated_ng_per_ml_sql[1] = "NULL";
  $abundance_uncertainty_sql[1] = "NULL";
  $n_distinct_peptides_sql[1] = "NULL";
  $relationship_phrase_sql[1] = "BRT.relationship_phrase";
  $relationship_sort_order_sql[1] = "BRT.sort_order";
  $presence_level_sort_order_sql[1] = "PPL.sort_order";
  $reference_biosequence_sql[1] = "BS_REF.biosequence_name";
  $represented_by_biosequence_sql[1] = "BS_REP.biosequence_name";
  $group_number_sql[1] = "PID.protein_group_number";
  $seq_unique_prots_sql[1] = "PID.seq_unique_prots_in_group";
  $is_keratin_sql[1]="(CASE WHEN BPS.is_keratin=1 THEN 'ker' ELSE '' END)";
  $is_immunoglobulin_sql[1]="(CASE WHEN BPS.is_immunoglobulin=1 THEN 'Ig' ELSE '' END)";
  $biosequence_description_sql[1] =
        "CAST(BS_REL.biosequence_desc AS varchar(255))";

  # Define SQL specific for displaying biosequences identical to
  # indistinguishables
  $biosequence_name_sql[2] = "BS_INDIS.biosequence_name";
  $is_covering_sql[2] = "NULL";
  $presence_level_sql[2] = "NULL";
  $probability_sql[2] = "NULL";
  $confidence_sql[2] = "NULL";
  $n_observations_sql[2] = "NULL";
  $estimated_ng_per_ml_sql[2] = "NULL";
  $abundance_uncertainty_sql[2] = "NULL";
  $n_distinct_peptides_sql[2] = "NULL";
  $relationship_phrase_sql[2] = "BRT.relationship_phrase";
  $relationship_sort_order_sql[2] = "BRT.sort_order";
  $presence_level_sort_order_sql[2] = "PPL.sort_order";
  $reference_biosequence_sql[2] = "BS_REL.biosequence_name";
  $represented_by_biosequence_sql[2] = "BS_REP.biosequence_name";
  $group_number_sql[2] = "PID.protein_group_number";
  $seq_unique_prots_sql[2] = "PID.seq_unique_prots_in_group";
  $is_keratin_sql[2]="(CASE WHEN BPS.is_keratin=1 THEN 'ker' ELSE '' END)";
  $is_immunoglobulin_sql[2]="(CASE WHEN BPS.is_immunoglobulin=1 THEN 'Ig' ELSE '' END)";
  $biosequence_description_sql[2] =
        "CAST(BS_INDIS.biosequence_desc AS varchar(255))";


  for (my $i=0; $i<$n_sub_queries; $i++) {
    my (@abundance_columns, @GO_columns);
    if ( $parameters{display_options} =~ /ShowAbundances/ ) {
      @abundance_columns = (
			["estimated_ng_per_ml",$estimated_ng_per_ml_sql[$i],"Estimated ng/ml"],
			["abundance uncertainty",$abundance_uncertainty_sql[$i],"Uncertainty ng/ml"],
      );
    } else {
      @abundance_columns = ();
    }
    if ( $parameters{display_options} =~ /ShowGOColumns/ ){
      @GO_columns = (
      ["molecular_function","MFA.annotation","Molecular Function"],
      #["molecular_function_GO","MFA.external_accession","molecular_function_GO"],
      ["biological_process","BPA.annotation","Biological Process"],
      #["biological_process_GO","BPA.external_accession","biological_process_GO"],
      ["cellular_component","CCA.annotation","Cellular Component"],
      #["cellular_component_GO","CCA.external_accession","cellular_component_GO"],
      #["interpro_protein_domain","IPDA.annotation","InterPro Protein Domain"],
      #["interpro_protein_domain_GO","IPDA.external_accession","interpro_protein_domain_GO"],
      )
    } else{
       @GO_columns =();
    }

    my @column_array = (
        ["biosequence_name",$biosequence_name_sql[$i],"Biosequence Name"],
        ["is_covering",$is_covering_sql[$i],"Cover ing Set"],
				["presence_level",$presence_level_sql[$i],"Presence Level"],
				["probability",$probability_sql[$i],"Protein Prophet Prob"],
				["confidence",$confidence_sql[$i],"Mult Hyp Test Prob"],
				["n_observations",$n_observations_sql[$i],"N Obs"],
				["n_distinct_peptides",$n_distinct_peptides_sql[$i],"N Distinct Peptides"],
        ["chromosome","BPS.chromosome", "Chromosome"],
        ["genetic_locus","BPS.genetic_locus", "Genetic Locus"],
        ["start_in_chromosome","BPS.start_in_chromosome","Start in Chrom"],
        ["end_in_chromosome","BPS.end_in_chromosome","End in Chrom"],
        ["strand","BPS.strand","Strand"],
        @abundance_columns,
				["relationship_phrase",$relationship_phrase_sql[$i],"Redundancy Relationship"],
				["reference_biosequence",$reference_biosequence_sql[$i], "Redundant With Respect To"],
				["represented_by_biosequence_id", "$represented_by_biosequence_sql[$i]", "Protein Group"],
				["group_number","$group_number_sql[$i]","Group Number"],
        ["seq_unique_prots_in_group","$seq_unique_prots_sql[$i]", "Seq Uniq Prots in Grp"],
        @GO_columns,
        ["protein_group_seq_align_link","NULL","Protein Group Seq Alignmt"],
				["is_keratin",$is_keratin_sql[$i],"Ker atin"],
				["is_immunoglobulin",$is_immunoglobulin_sql[$i],"Ig"],
				["biosequence_description",$biosequence_description_sql[$i],"Protein Description"],
				["biosequence_accessor","DBX.accessor","biosequence_accessor"],
				["biosequence_accessor_suffix","DBX.accessor_suffix","biosequence_accessor_suffix"],
				["biosequence_accession","BS_REF.biosequence_accession","biosequence_accession"],
				["organism_full_name","O.full_name","Organism"],
				["ppl_sort_order",$presence_level_sort_order_sql[$i], "ppl_sort_order"],
				["brt_sort_order",$relationship_sort_order_sql[$i],"brt_sort_order"],
      );
    $column_array_refs[$i] = \@column_array;
  }

  #### Set flag to display SQL statement if user selected
  if ( $parameters{display_options} =~ /ShowSQL/ ) {
    $show_sql = 1;
  }

  #### Build the columns parts of the SQL statement
  my %colnameidx = ();
  my @column_titles = ();
  my @columns_clause;
  ## Sends @column_array_ref to build_SQL_columns_list, which
  ## (1) appends the 2nd element in array to $columns_clause
  ## (2) fills %colnameidx as a hash with key = 1st element
  ## and value = column number (start w/0), and (3) fills @column_titles_ref
  ## array with the 3rd element
  for (my $i=0; $i<$n_sub_queries; $i++) {
    $columns_clause[$i] =
      $sbeams->build_SQL_columns_list(
			column_array_ref=>$column_array_refs[$i],
			colnameidx_ref=>\%colnameidx,
			column_titles_ref=>\@column_titles
      );
  }

  my @pre_joins;
  my @post_joins;

  my $GO_join = "";
  $parameters{gene_annotation_level_constraint} = 'leaf' ## zhi might need to change
  unless ($parameters{gene_annotation_level_constraint});
  my $gene_annotation_level_clause = $sbeams->parseConstraint2SQL(
    constraint_column=>"hierarchy_level",
    constraint_type=>"plain_text",
    constraint_name=>"Gene Annotation Level Constraint",
    constraint_value=>$parameters{gene_annotation_level_constraint} );
  return if ($gene_annotation_level_clause eq '-1');
 
  if ( $parameters{display_options} =~ /ShowGOColumns/ ){
    $GO_join = qq~
        LEFT JOIN $TBAT_BIOSEQUENCE_ANNOTATED_GENE AG
             ON ( BS_REF.biosequence_id = AG.biosequence_id )
        LEFT JOIN $TBBL_GENE_ANNOTATION MFA
             ON ( AG.annotated_gene_id = MFA.annotated_gene_id
                   AND MFA.gene_annotation_type_id = 1 AND MFA.idx = 0
                   AND MFA.hierarchy_level = '$parameters{gene_annotation_level_constraint}' )
        LEFT JOIN $TBBL_GENE_ANNOTATION BPA
             ON ( AG.annotated_gene_id = BPA.annotated_gene_id
                   AND BPA.gene_annotation_type_id = 2 AND BPA.idx = 0
                   AND BPA.hierarchy_level = '$parameters{gene_annotation_level_constraint}' )
        LEFT JOIN $TBBL_GENE_ANNOTATION CCA
             ON ( AG.annotated_gene_id = CCA.annotated_gene_id
                   AND CCA.gene_annotation_type_id = 3 AND CCA.idx = 0
                   AND CCA.hierarchy_level = '$parameters{gene_annotation_level_constraint}' )
    ~;
  }

 
  # Define joins specific for protein identifications
  $pre_joins[0] = qq~
  ~;
  $post_joins[0] = qq~
       LEFT JOIN $TBAT_BIOSEQUENCE BS_SUBSUMED_BY
          ON ( BS_SUBSUMED_BY.biosequence_id = PID.subsumed_by_biosequence_id )
         AND ( BS_SUBSUMED_BY.biosequence_set_id = BSS.biosequence_set_id)
	 LEFT JOIN $TBAT_BIOSEQUENCE_PROPERTY_SET BPS
	      ON ( BPS.biosequence_id = PID.biosequence_id )
  ~;

  # Define joins specific for indistinguishables, identicals
  # relative to protein identifications
  $pre_joins[1] = qq~
       INNER JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP BR
            ON ( BR.reference_biosequence_id = PID.biosequence_id AND
                 BR.atlas_build_id = PID.atlas_build_id )
  ~;
  $post_joins[1] = qq~
       INNER JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP_TYPE BRT
            ON ( BRT.biosequence_relationship_type_id =
                    BR.relationship_type_id )
       LEFT JOIN $TBAT_BIOSEQUENCE BS_REL
            ON ( BS_REL.biosequence_id = BR.related_biosequence_id )
           AND ( BS_REL.biosequence_set_id = BSS.biosequence_set_id )
	 LEFT JOIN $TBAT_BIOSEQUENCE_PROPERTY_SET BPS
	      ON ( BPS.biosequence_id = BS_REL.biosequence_id )
  ~;

  # Define joins specific for biosequences identical to
  # indistinguishables
  $pre_joins[2] = qq~
       INNER JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP BR
            ON ( BR.reference_biosequence_id = PID.biosequence_id AND
                 BR.atlas_build_id = PID.atlas_build_id )
       INNER JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP BR_INDIS
            ON ( BR_INDIS.reference_biosequence_id = BR.related_biosequence_id 
                   AND
                 BR_INDIS.atlas_build_id = PID.atlas_build_id )
  ~;
  $post_joins[2] = qq~
       INNER JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP_TYPE BRT
            ON ( BRT.biosequence_relationship_type_id =
                    BR_INDIS.relationship_type_id )
       LEFT JOIN $TBAT_BIOSEQUENCE BS_INDIS
            ON ( BR_INDIS.related_biosequence_id = BS_INDIS.biosequence_id )
              AND ( BS_INDIS.biosequence_set_id = BSS.biosequence_set_id)
       LEFT JOIN $TBAT_BIOSEQUENCE BS_REL
            ON ( BS_REL.biosequence_id = BR_INDIS.reference_biosequence_id  )
           AND ( BS_REL.biosequence_set_id = BSS.biosequence_set_id)
	 LEFT JOIN $TBAT_BIOSEQUENCE_PROPERTY_SET BPS
	      ON ( BPS.biosequence_id = BS_INDIS.biosequence_id )
  ~;

  my @special_clauses;
  $special_clauses[0] = $is_covering_clause;
  $special_clauses[1] = $redundancy_clause;
  $special_clauses[2] = $redundancy_clause;

  my @select_clause;
  for (my $i=0; $i<3; $i++) {
    $select_clause[$i] = qq~
     ( SELECT $limit_clause $columns_clause[$i]
       FROM $TBAT_PROTEIN_IDENTIFICATION PID
         $pre_joins[$i] 
	 INNER JOIN $TBAT_ATLAS_BUILD AB
	      ON ( AB.atlas_build_id = PID.atlas_build_id )
	 INNER JOIN $TBAT_BIOSEQUENCE_SET BSS
	      ON ( BSS.biosequence_set_id = AB.biosequence_set_id )
	 INNER JOIN $TB_ORGANISM O
	      ON ( O.organism_id = BSS.organism_id )
	 INNER JOIN $TBAT_BIOSEQUENCE BS_REF
	      ON ( BS_REF.biosequence_id = PID.biosequence_id )
              AND ( BS_REF.biosequence_set_id = BSS.biosequence_set_id)
	 INNER JOIN $TBAT_BIOSEQUENCE BS_REP
	      ON ( BS_REP.biosequence_id = PID.represented_by_biosequence_id )
              AND ( BS_REP.biosequence_set_id = BSS.biosequence_set_id)
         LEFT JOIN $TBAT_BIOSEQUENCE_PROPERTY_SET BPP
              ON ( BPP.biosequence_id = PID.biosequence_id )
	 LEFT JOIN $TB_DBXREF DBX ON ( DBX.dbxref_id = BS_REF.dbxref_id )
	 INNER JOIN $TBAT_PROTEIN_PRESENCE_LEVEL PPL
	      ON ( PPL.protein_presence_level_id = PID.presence_level_id )
         $post_joins[$i]
         $GO_join
       WHERE 1 = 1
         $atlas_build_clause
         $biosequence_name_clauses[$i]
         $biosequence_names_clause
         $biosequence_gene_name_clauses[$i]
         $biosequence_desc_clauses[$i]
         $n_observations_clause
         $n_distinct_peptides_clause
         $chromosome_clause
         $genetic_locus_clause
         $start_in_chromosome_clause
         $end_in_chromosome_clause
         $strand_clause
         $estimated_ng_per_ml_clause
         $probability_clause
         $protein_group_representative_clause
         $presence_level_clause
         $special_clauses[$i]
       )
    ~;
  }


  #### Define the SQL statement
  # ordering could be improved
  $sql = qq~
    $select_clause[0]
       UNION
    $select_clause[1]
       UNION
    $select_clause[2]
   ORDER BY
      group_number,
      ppl_sort_order,
      reference_biosequence,
      brt_sort_order,
      biosequence_name
  ~;


  #### Certain types of actions should be passed to links
  my $pass_action = "QUERY";
  $pass_action = $apply_action if ($apply_action =~ /QUERY/i); 


  #### Pass nearly all of the constraints down to a child query
  my @parameters_to_pass;
  my $parameters_list = '';
  while ( ($key,$value) = each %input_types ) {
    if ($key ne 'sort_order' && $key ne 'display_options') {
      if ($parameters{$key}) {
        push(@parameters_to_pass,"$key=$parameters{$key}");
      }
    }
  }
  if (@parameters_to_pass) {
    $parameters_list = join('&',@parameters_to_pass);
  }


  ## tailor the chromosomal url link to a genome browser by the organism name:
  ## April 2010 TMF adjust the below!
  my $organism_full_name = getOrganismFullName(organism_id => $organism_id);

  my $chrom_url_link;

  if ($organism_full_name =~ /^Halobacterium/)
  {
      $chrom_url_link = "http://www.genome.jp/kegg-bin/show_genomemap?ORG=hal&ACCESSION=\%$colnameidx{biosequence_name}V";
  } else 
  { ## assume it's an organism supported by Ensembl
      $chrom_url_link = "http://www.ensembl.org/$organism_full_name/contigview?c=\%$colnameidx{chromosome}V\:\%$colnameidx{start_in_chromosome}V&w=10000";
  }



  #### Define the hypertext links for columns that need them
  # %NV inserts the value of column N
  %url_cols = (
          'Biosequence Name' => "$CGI_BASE_DIR/PeptideAtlas/GetProtein?protein_name=\%$colnameidx{biosequence_name}V&apply_action=$pass_action",
          'Biosequence Name_ATAG' => 'TARGET="Win1" ONMOUSEOVER="window.status=\'Show more information about this protein\'; return true"',
          #'Group Representative' => "$CGI_BASE_DIR/PeptideAtlas/GetProteins_beta?protein_group_number_constraint=\%$colnameidx{group_number}V&apply_action=$pass_action",
          'Protein Group' => "$CGI_BASE_DIR/PeptideAtlas/GetProteins?protein_group_representative_constraint=\%$colnameidx{protein_group_representative}V&apply_action=$pass_action",
          'Protein Group_ATAG' => 'TARGET="Win1" ONMOUSEOVER="window.status=\'Display all biosequences in this group\'; return true"',
          'Protein Group Seq Alignmt' => "$CGI_BASE_DIR/PeptideAtlas/compareProteins?protein_group_number=\%$colnameidx{group_number}V&apply_action=$pass_action",
          'Protein Group Seq Alignmt_ATAG' => 'TARGET="Win1" ONMOUSEOVER="window.status=\'Display alignment of all biosequences in this group\'; return true"',
          'Protein Group Seq Alignmt_ISNULL' => '<IMG BORDER="0" SRC="/sbeams/images/compareProteins.png">',
          'Protein Group Seq Alignmt_OPTIONS' => {embed_html=>1},
          'Related to' => "$CGI_BASE_DIR/PeptideAtlas/GetProtein?=\%$colnameidx{reference_biosequence_name}V&apply_action=$pass_action",
          'Related to_ATAG' => 'TARGET="Win1" ONMOUSEOVER="window.status=\'Show more information about this protein\'; return true"',
         
         'Molecular Function' => "http://www.ebi.ac.uk/ego/GSearch?q=\%$colnameidx{molecular_function_GO}V",
				 'Molecular Function_ATAG' => 'TARGET="WinExt"',
				 'Molecular Function_OPTIONS' => {semicolon_separated_list=>1},
				 'Biological Process' => "http://www.ebi.ac.uk/ego/GSearch?q=\%$colnameidx{biological_process_GO}V",
				 'Biological Process_ATAG' => 'TARGET="WinExt"',
				 'Biological Process_OPTIONS' => {semicolon_separated_list=>1},
				 'Cellular Component' => "http://www.ebi.ac.uk/ego/GSearch?q=\%$colnameidx{cellular_component_GO}V",
				 'Cellular Component_ATAG' => 'TARGET="WinExt"',
				 'Cellular Component_OPTIONS' => {semicolon_separated_list=>1},
      );


  #### Define columns that should be hidden in the output table
  # biosequence_accessor is prefix to compose URL
  # biosequence_accessor_suffix is suffix for same

  %hidden_cols = (
                  'Group Number' => 1,
                  'Chromosome' => 1,
		  'biosequence_accession' => 1,
		  'biosequence_accessor' => 1,
		  'biosequence_accessor_suffix' => 1,
	          'ppl_sort_order' => 1,
                  'brt_sort_order' => 1,
                  'Organism' => 1,
  );




  #########################################################################
  #### If QUERY or VIEWRESULTSET was selected, display the data
  if ($apply_action =~ /QUERY/i || $apply_action eq "VIEWRESULTSET") {

    #### If the action contained QUERY, then fetch the results from
    #### the database
    if ($apply_action =~ /QUERY/i) {

      #### Show the SQL that will be or was executed
      $sbeams->display_sql(sql=>$sql) if ($show_sql);

      #### Fetch the results from the database server
      $sbeams->fetchResultSet(
        sql_query=>$sql,
        resultset_ref=>$resultset_ref,
      );

      #### Post process the resultset
      postProcessResultset(
        rs_params_ref=>\%rs_params,
        resultset_ref=>$resultset_ref,
        query_parameters_ref=>\%parameters,
        column_titles_ref=>\@column_titles,
      );


  ##########################################################################
	#### Draw the protein and gene location graph

    if ($organism_id == 2) {
      $protein_group = $parameters{protein_group_representative_constraint};
      if ($protein_group eq '') {
        ## Do everything invovled with drawing the graph
        #### Connect to Ensembl database
        my $host = 'mysql';
        my $user = 'guest';
        my $password = 'guest';
    
        my $registry = 'Bio::EnsEMBL::Registry';
        $registry->load_registry_from_db(
          -host => $host,
          -user => $user,
          -pass => $password,
          );
    
        ####read passed args, set up variables
        my %args = @_;
    
        #### Get input from PeptideAtlas
        my @acclist;
        my @coord1_list;
        my @coord2_list;
        my @strand_list;
        my $chrom_num;
        my $header = (<>);
        my $row;
    
        for my $row ( 0 .. scalar @{$resultset_ref->{data_ref}} - 1) {
          {my $data_item = $resultset_ref->{data_ref}->[$row]->[0];
          push @acclist, $data_item;
          }
          {my $data_item = $resultset_ref->{data_ref}->[$row]->[9];
          push @coord1_list, $data_item;
          }
          {my $data_item = $resultset_ref->{data_ref}->[$row]->[10];
          push @coord2_list, $data_item;
          }
          {my $data_item = $resultset_ref->{data_ref}->[$row]->[11];
          push @strand_list, $data_item;
          }
        }
    
        #### Match Swiss-Prot proteins to Ensembl identical matches
        my $tsql = qq~
        SELECT
        BS_SWISSIPI.biosequence_name as 'Swiss-Prot or IPI',
        BS_ENS.biosequence_name as 'Ensembl',
        BPS.start_in_chromosome as 'Start',
        BPS.end_in_chromosome as 'End',
        BPS.strand as 'Strand'
    
        FROM $TBAT_ATLAS_BUILD AB
        JOIN $TBAT_BIOSEQUENCE_SET BSS
          ON ( BSS.biosequence_set_id = AB.biosequence_set_id )
        JOIN $TBAT_BIOSEQUENCE BS_SWISSIPI
          ON ( BS_SWISSIPI.biosequence_set_id = BSS.biosequence_set_id )
        JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP BR
          ON ( BR.reference_biosequence_id = BS_SWISSIPI.biosequence_id )
          AND ( BR.atlas_build_id = AB.atlas_build_id )
        JOIN $TBAT_BIOSEQUENCE_RELATIONSHIP_TYPE BRT
          ON ( BRT.biosequence_relationship_type_id = BR.relationship_type_id )
        JOIN $TBAT_BIOSEQUENCE BS_ENS
          ON ( BS_ENS.biosequence_set_id = BSS.biosequence_set_id )
          AND ( BS_ENS.biosequence_id = BR.related_biosequence_id )
        JOIN $TBAT_BIOSEQUENCE_PROPERTY_SET BPS
          ON ( BPS.biosequence_id = BS_ENS.biosequence_id )
    
        WHERE BRT.relationship_name = 'identical'
          AND AB.atlas_build_id = $atlas_build_id 
          AND (BS_SWISSIPI.biosequence_name like 'A%' OR 
    	BS_SWISSIPI.biosequence_name like 'B%' OR 
    	BS_SWISSIPI.biosequence_name like 'C%' OR 
    	BS_SWISSIPI.biosequence_name like 'O%' OR 
    	BS_SWISSIPI.biosequence_name like 'P%' OR 
    	BS_SWISSIPI.biosequence_name like 'Q%' OR
    	BS_SWISSIPI.biosequence_name like 'IPI%' )
          AND BS_ENS.biosequence_name like 'ENSP%'
        ~;
    
        my @swiss_to_ens = $sbeams->selectSeveralColumns($tsql);
    
        my %swiss2ens_hash;
        my $swiss2ens = \%swiss2ens_hash;
    
        for (my $i = 0; $i < scalar(@swiss_to_ens); $i++) {
          my $swiss_id = $swiss_to_ens[$i][0];
          my $ens_id = $swiss_to_ens[$i][1];
          my $put_start = $swiss_to_ens[$i][2];
          my $put_end = $swiss_to_ens[$i][3];
          my $strand = $swiss_to_ens[$i][4];
          $swiss2ens->{$swiss_id}->{start} = $put_start;
          $swiss2ens->{$swiss_id}->{end} = $put_end;
          $swiss2ens->{$swiss_id}->{strand} = $strand;
          }
     
        #### Initiate variables, read start/end user input values
        my @gene_list;
        my @matchgene_list;
        my $chrom;
        my $chunk_name;
        my $chromlen;
        my $strand;
      
        my $start_bp;
        my $st_modifier;
        my $end_bp;
        my $end_modifier;
    
        my $kband_st;
        my $kband_end;
     
        my $chrom_num = $parameters{chromosome};
        my $start_chunk = $parameters{start_in_chromosome};
        my $end_chunk = $parameters{end_in_chromosome};
        my $input_genetic_locus = $parameters{genetic_locus};
        my $input_strand = $parameters{strand};
    
        if ($start_chunk eq '') {
          $start_bp = '';
          $st_modifier = '';
        } else {
          $start_chunk =~ /(\D*)(\d+)/;
          $st_modifier = $1;
          $start_bp = $2;
        }
    
        if ($end_chunk eq '') {
          $end_bp = '';
          $end_modifier = '';
        } else {
          $end_chunk =~ /(\D*)(\d+)/;
          $end_modifier = $1;
          $end_bp = $2;
        }
    
        if ($input_genetic_locus ne '') {
          $input_genetic_locus =~ /(\d{1,2})(p|q)(.*)/;
          my $genetic_locus = "$2$3";
        }
    
        if (($start_bp eq '') and ($end_bp eq '') and ($genetic_locus eq '')) {
          $stend_option = 'aaa';
        } elsif (($start_bp ne '') and ($st_modifier eq '>') and ($end_bp eq '') and ($genetic_locus eq '')) {
          $stend_option = 'bbb';
        } elsif (($start_bp eq '') and ($end_bp ne '') and ($end_modifier eq '<') and ($genetic_locus eq '')) {
          $stend_option = 'ccc';
        } elsif (($start_bp ne '') and ($st_modifier eq '>') and ($end_bp ne '') and ($end_modifier eq '<') and ($genetic_locus eq '')) {
          $stend_option = 'ddd';
        } elsif ($genetic_locus ne '') {
          $stend_option = 'eee';
        }
    
        my $slice_adaptor = $registry->get_adaptor( 'Human', 'Core', 'Slice' );
        my $gene_adaptor = $registry->get_adaptor('Human', 'Core', 'Gene' );
        my $kary_adaptor = $registry->get_adaptor('Human', 'Core', 'KaryotypeBand' );
    
        #### If zooming by karyotype band, read band start and end coordinates
        if ($input_genetic_locus ne '') {
          my $chr = $slice_adaptor->fetch_by_region('chromosome', $chrom_num);
          my $kary_data = $kary_adaptor->fetch_all_by_Slice($chr);
          while ( my $kary_datum = shift @{$kary_data} ) {
            my $kary_datum_name = $kary_datum->name();
            if ($genetic_locus eq $kary_datum_name) {
              $kband_st = $kary_datum->start();
              $kband_end = $kary_datum->end();
            }
          }
        }
    
        #### Initialize gene data from Ensembl database
        if ($stend_option eq 'aaa') {
          $chrom = $slice_adaptor->fetch_by_region( 'chromosome', $chrom_num);
          $chunk_name = "Entire";
        } elsif ($stend_option eq 'bbb') {
          $chrom = $slice_adaptor->fetch_by_region('chromosome', $chrom_num, $start_bp + 1); 
          $chunk_name = "$start_bp bp to End";
        } elsif ($stend_option eq 'ccc') {
          $chrom = $slice_adaptor->fetch_by_region( 'chromosome', $chrom_num, 1, $end_bp + 1);
          $chunk_name = "Start to $end_bp bp";
        } elsif ($stend_option eq 'ddd') {
          $chrom = $slice_adaptor->fetch_by_region('chromosome', $chrom_num, $start_bp + 1, $end_bp + 1); 
          $chunk_name = "$start_bp bp to $end_bp bp";
        } elsif ($stend_option eq 'eee') {
          $chrom = $slice_adaptor->fetch_by_region('chromosome', $chrom_num, $kband_st, $kband_end);
          $chunk_name = "Genetic Locus $genetic_locus ($kband_st bp to $kband_end bp)"
         } else {
          $chrom = $slice_adaptor->fetch_by_region( 'chromosome', $chrom_num);
          $chunk_name = "Entire";
          print "<p>Unable to draw standard image within these constraints</p>\n";
        }
    
        #### Read PeptideAtlas protein information
        sub create_peptideatlas_feature($$$$);
    
        my $p;
        my $protein_acc;
        my $protein_start;
        my $protein_stop;
        my $protein_strand;
        my $protein_strand_num;
        my $num_protein;
        my $acclist = scalar @acclist;
           $no_coord_count = 0;
        my @protein_list;
    
    
        LINE: for $num_protein (0 .. ($acclist - 1)) {
          $protein_acc  =  $acclist[$num_protein];
          if ($protein_acc =~ /^(A|B|C|O|P|Q)(.{5})/) {
            $protein_start = $swiss2ens->{$protein_acc}->{start};
            $protein_stop = $swiss2ens->{$protein_acc}->{end};
            if ($protein_start eq '') {
              $no_coord_count ++;
              next LINE;
            }
          } else {
            $protein_start = $coord1_list[$num_protein];
            $protein_stop =  $coord2_list[$num_protein];
          }
    
          if (($stend_option eq 'bbb') or ($stend_option eq 'ddd')) {
            $protein_start -= $start_bp;
            $protein_stop -= $start_bp;
          } elsif ($stend_option eq 'eee') {
            $protein_start -= $kband_st;
            $protein_stop -= $kband_st;
          }
    
          my $p = Bio::SeqFeature::Generic->new(
			-start => $protein_start, 
			-end => $protein_stop,
			-score => 1000,
			-display_name => $protein_acc );
          push @protein_list, $p;
        }
    
        #### Grab gene data from Ensembl
        my $genes = $gene_adaptor->fetch_all_by_Slice($chrom);
    
        GENE: while ( my $gene = shift @{$genes} ) {
          my $gene_start     = $gene->start();
          my $gene_end       = $gene->end();
          my $gene_strand    = $gene->strand();
          my $gene_type      = $gene->biotype();
          my $gene_name      = $gene->stable_id();
    
          if (($input_strand eq '+') and ($gene_strand == -1)) {
            next GENE;
          } elsif (($input_strand eq '-') and ($gene_strand == 1)) {
            next GENE;
          }
    
          if ($gene_type eq 'protein_coding') {
            my $g = Bio::SeqFeature::Generic->new(
    			-start => $gene_start,
    			-end   => $gene_end,
    			-score => 1000,
    			-display_name => $gene_name );
            push @gene_list, $g;
    
            PROT: for $num_protein (0 .. ($acclist - 1)) {
              $protein_acc  =  $acclist[$num_protein];
              if ($protein_acc =~ /^(A|B|C|O|P|Q)(.{5})/) {
                $protein_start = $swiss2ens->{$protein_acc}->{start};
                $protein_stop = $swiss2ens->{$protein_acc}->{end};
     	    $protein_strand = $swiss2ens->{$protein_acc}->{strand};
                if ($protein_start eq '') {
                  next PROT;
    	        }
              } else {
                $protein_start = $coord1_list[$num_protein];
                $protein_stop =  $coord2_list[$num_protein];
    	        $protein_strand = $strand_list[$num_protein];
              }
    
              if (($stend_option eq 'bbb') or ($stend_option eq 'ddd')) {
                $protein_start -= $start_bp;
    	        $protein_stop -= $start_bp;
              }
    
              if ($protein_strand eq '+') {
    	        $protein_strand_num = 1;
    	      } else {
    	        $protein_strand_num = -1;
    	      }
    
              if (($protein_start >= $gene_start) and ($protein_stop <= $gene_end)) {
    	        if ($gene_strand == $protein_strand_num) {
    
    	          my $match_gene = Bio::SeqFeature::Generic->new(
    			-start => $gene_start,
    			-end   => $gene_end,
    			-score => 1000 ,
    			-display_name => $gene_name);
    	          push @matchgene_list, $match_gene;
    	          next GENE;
    	        } else {
    	          next PROT;
    	        }
              }
            }
          }
        }
    
        #### Grab karyotype band data from Ensembl database
        my @kary_list;
        my $kary_end;
        my @kary_end_list;
        my $karyotypes = $kary_adaptor->fetch_all_by_Slice($chrom);
        while ( my $kary = shift @{$karyotypes} ) {
          my $kary_start  = $kary->start();
             $kary_end    = $kary->end();
          my $kary_name   = $kary->name();
          my $kary_stain  = $kary->stain();
          my $k;

          if ($kary_stain =~ /gneg/ ) {
            $k = Bio::SeqFeature::Generic->new(
			-start => $kary_start,
    			-end   => $kary_end,
    			-display_name => $kary_name,
    			-score => 400 );
          } elsif ($kary_stain =~ /gpos../ ) {
            $k = Bio::SeqFeature::Generic->new(
    			-start => $kary_start,
    			-end   => $kary_end,
    			-display_name => $kary_name,
    			-score => 800 );
          } elsif ($kary_stain =~ /acen/ ) {
            $k = Bio::SeqFeature::Generic->new(
    			-start => $kary_start,
    			-end   => $kary_end,
    			-display_name => $kary_name,
    			-score => 1000 );
          } else {
            $k = Bio::SeqFeature::Generic->new(
    			-start => $kary_start,
    			-end   => $kary_end,
    			-display_name => $kary_name,
    			-score => 200 );
          }
    
          push @kary_end_list, $kary_end;
          push @kary_list, $k;
        }
    
        my @sorted_kary_end = sort {$a <=> $b} @kary_end_list;
    
        if ($stend_option eq 'ccc') {
          $chromlen = $end_bp;
        } elsif ($stend_option eq 'ddd') {
          $chromlen = $end_bp - $start_bp;
        } elsif ($stend_option eq 'eee') {
          $chromlen = $kband_end - $kband_st;
        } else {
          $chromlen = @sorted_kary_end[(scalar @kary_end_list) - 1];
        }
    
        #### Initialize main panel, track sequence, and track ruler
        my $panel = Bio::Graphics::Panel->new( 
			-'length'    => $chromlen,
    			-key_style => 'between',
			-width     => 1600,
			-empty_tracks => 'suppress',
			-pad_top   => 10,
			-pad_bottom => 10,
			-pad_left  => 40,
			-pad_right => 20 );
    
        my $ruler = Bio::SeqFeature::Generic->new( 
			-end => $chromlen,
			-start => 2);
    
        my $sequence = Bio::SeqFeature::Generic->new( 
			-end => $chromlen,
			-start => 1);
    
        #### Add all the tracks to the panel
        ## Add chromosome track
        $panel->add_track( $sequence,
			-glyph  => 'segments',
			-bgcolor => 'black',
    			-key  => "Chromosome $chrom_num -- $chunk_name",
    			-tick   => 2,
    			-min_score => 0,
    			-max_score => 1000 );
    
        ## Add observed protein track
        $panel->add_track( \@protein_list,
			-glyph     => 'graded_segments',
			-bgcolor   => 'firebrick',
			-key       => 'Protein Location',
			-bump      => 1,
			-height    => 8 );
    
        ## Add ruler track
        $panel->add_track( $ruler,
		    	-glyph  => 'anchored_arrow',
			-tick   => 2,
			-height => 8,
			-key  => 'Chromosome Length (relative to requested section)');
    
        ## Add karyotype banding track
        $panel->add_track( \@kary_list,
			-glyph     => 'graded_segments',
			-bgcolor   => 'black',
			-font      => 'gdTinyFont',
			-key       => 'Karyotypic Banding',
	    		-bump      => 0,
			-height    => 6,
    			-label     => 1,
    			-min_score => 0,
    			-max_score => 1000 );
    
        ## Add yes_genes track
        $panel->add_track( \@matchgene_list,
			-glyph     => 'graded_segments',
			-bgcolor   => '#BA55D3',
			-key     => 'Location of genes covered by PeptideAtlas',
			-bump      => 1,
			-height    => 8,
			-label     => 0 ); 
    
        ## Add genes track
        $panel->add_track( \@gene_list,
			-glyph     => 'graded_segments',
			-bgcolor   => 'cornflowerblue',
			-key       => 'Gene Location',
			-bump      => 1,
			-height    => 8,
	    		-label     => 0 ); 
    
        #### Create mouseovers and links for protein and gene bars
        $pid = $$;
        $map = "<MAP NAME='$pid'>\n";
        my $link;
        my @objects = $panel->boxes();
    
        for my $obj (@objects) {
          my $key_name = $obj->[0]->display_name();
          my $coords = join( ", ", @$obj[1..4] );
          if ($key_name =~ /^A|B|C|O|P|Q|ENSP|IPI/) { 
            $link = "https://db.systemsbiology.net/sbeams/cgi/PeptideAtlas/GetProtein?protein_name=$key_name&apply_action=QUERY";
            $map .= "<AREA SHAPE='RECT' COORDS='$coords' TITLE='$key_name' HREF='$link'>\n";
          } elsif ($key_name =~ /^ENSG/) {
            $link = "http://uswest.ensembl.org/Homo_sapiens/Gene/Summary?g=$key_name";
            $map .= "<AREA SHAPE='RECT' COORDS='$coords' TITLE='$key_name' HREF='$link'>\n";
          }
        }
        $map .= '</MAP>';
    
        #### Create image file
        my $file_name = "/net/dblocal/www/html/sbeams/images/GetProteinsChromosome.png";
        open( OUT, ">$file_name" ) || die "$!: $file_name";
        binmode(OUT);
        print OUT $panel->png;
        $panel->finished;
        close OUT;
        }
      } else {
        print "<p>Unable to graphically depict non-human builds</p>\n";
      }
    } 

    #### Store the resultset and parameters to disk resultset cache
    $rs_params{set_name} = "SETME";
    $sbeams->writeResultSet(
      resultset_file_ref=>\$rs_params{set_name},
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      resultset_params_ref=>\%rs_params,
      query_name=>"$SBEAMS_SUBDIR/$PROGRAM_FILE_NAME",
      column_titles_ref=>\@column_titles,
    );


    #### Display the resultset
    $sbeams->displayResultSet(
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      rs_params_ref=>\%rs_params,
      url_cols_ref=>\%url_cols,
      hidden_cols_ref=>\%hidden_cols,
      max_widths=>\%max_widths,
      column_titles_ref=>\@column_titles,
      base_url=>$base_url,
    );

    #### Display Graphic

    if ($protein_group ne '') {
      print "<p>Unable to display graphical depiction under these constraints</p>";}

    if (($organism_id == 2) and ($protein_group eq '')) {
      print "<p>No coordinates available for $no_coord_count proteins</p>\n";
    }
    
    my $imgsrcbuffer = "<IMG SRC=\"/sbeams/images/GetProteinsChromosome.png\" ISMAP USEMAP='#$pid' ALT=\"Graphical Depiction of Proteins and Genes for Selected Chromosome\">";

    if ($sbeams->output_mode() eq 'html') {
      print "<p>$imgsrcbuffer $map</p>";
	}
  }



    #### Display the resultset controls
    $sbeams->displayResultSetControls(
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      rs_params_ref=>\%rs_params,
      base_url=>$base_url,
    );


    #### Display a plot of data from the resultset
    $sbeams->displayResultSetPlot(
      rs_params_ref=>\%rs_params,
      resultset_ref=>$resultset_ref,
      query_parameters_ref=>\%parameters,
      column_titles_ref=>\@column_titles,
      base_url=>$base_url,
    );


  #### If QUERY was not selected, then tell the user to enter some parameters
  } else {
    if ($sbeams->invocation_mode() eq 'http') {
      print "<H4>Select parameters above and press QUERY</H4>\n";
    } else {
      print "You need to supply some parameters to constrain the query\n";
    }
  }


} # end handle_request



###############################################################################
# evalSQL
#
# Callback for translating Perl variables into their values,
# especially the global table variables to table names
###############################################################################
sub evalSQL {
  my $sql = shift;

  return eval "\"$sql\"";

} # end evalSQL


###############################################################################
# postProcessResultset
#
# Perform some additional processing on the resultset that would otherwise
# be very awkward to do in SQL.
###############################################################################
sub postProcessResultset {
  my %args = @_;

  my ($i,$element,$key,$value,$line,$result,$sql);

  #### Process the arguments list
  my $resultset_ref = $args{'resultset_ref'};
  my $rs_params_ref = $args{'rs_params_ref'};
  my $query_parameters_ref = $args{'query_parameters_ref'};
  my $column_titles_ref = $args{'column_titles_ref'};

  my %rs_params = %{$rs_params_ref};
  my %parameters = %{$query_parameters_ref};

  my $n_rows = scalar(@{$resultset_ref->{data_ref}});

  my $cols = $resultset_ref->{column_hash_ref};

  my $peptide_accession;
  my $nprot;
  my $nloc;

  #### TMF 06/23/09: seems that peptide_accession, n_protein_mappings,
  ####  and n_genome locations fields all contain biosequence_name
  #### I think this was copied from GetPeptides and is obsolete.
  for (my $i=0; $i<$n_rows; $i++) {
    $peptide_accession = $resultset_ref->{data_ref}->[$i]->[$cols->{peptide_accession}];
    $nprot = $resultset_ref->{data_ref}->[$i]->[$cols->{n_protein_mappings}];
    $nloc = $resultset_ref->{data_ref}->[$i]->[$cols->{n_genome_locations}];

    if ($nprot > 1) {
      if ($nloc > 1) {
	$peptide_accession .= "(degen_NLoc=$nloc)";
      } else {
	$peptide_accession .= "(degen)";
      }

      $resultset_ref->{data_ref}->[$i]->[$cols->{peptide_accession}] = $peptide_accession;

    } elsif ($nloc > 1) {
      die("ERROR: nprot <=2 but $nloc > 1. This is wrong. Please report this error.");
    }

  }

  return 1;

} # end postProcessResult

#######################################################################
sub getOrganismFullName 
{
    my %args = @_;
    
    my $organism_id = $args{organism_id};

    my $sql = qq~
        SELECT full_name
        FROM $TB_ORGANISM
        WHERE organism_id = '$organism_id'
        AND record_status != 'D'
    ~;

    my ($full_name) = $sbeams->selectOneColumn($sql);

    ## replace spaces with _
    $full_name =~ s/ /\_/g;

    return $full_name;
}



