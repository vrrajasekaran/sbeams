#!/usr/local/bin/perl

###############################################################################
# $Id: $
#
# SBEAMS is Copyright (C) 2000-2014 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
use lib qw (../../lib/perl);
use Data::Dumper;
use File::Basename;
use File::Copy qw( move);

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;
use SBEAMS::Connection::TabMenu;


use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;


###############################################################################
# Global Variables
###############################################################################
my $sbeams = new SBEAMS::Connection;
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);
my $atlas = new SBEAMS::PeptideAtlas;
$atlas->setSBEAMS($sbeams);

# Read input parameters
my $params = process_params();

my $username = $sbeams->Authenticate( allow_anonymous_access => 1) || exit;
$sbeams->setSessionAttribute( key => 'PA_resource', value => 'DIAAtlas' );

# Get a list of accessible project_ids
my @project_ids = $sbeams->getAccessibleProjects();
my $project_ids = join( ",", @project_ids ) || '0';

my $show_image = 0;
my $tabMenu;


{ # Main 

    # Authenticate or exit

    my $program_name = ( $params->{mode} =~ /download/ ) ? 'DIA_library_download' : 'DIA_library_subset';

    ## get current settings
    my $project_id = $sbeams->getCurrent_project_id();

    my $page = $sbeams->getGifSpacer( 700 ) . "<BR>\n";

    # Get the HTML to display the tabs
    $tabMenu = $atlas->getTabMenu(
      parameters_ref => $params,
      program_name => $program_name,
    );

    my $css = $sbeams->printStyleSheet( module_only => 1 );

    $page .=<<"    END";
     <br>
    END


    # Add general section 
#  die Dumper( $params );

    my $load_script = "set_toggle_box( 'protein_list_table' );sortables_init()";
    $load_script = '';
    if ( $params->{lib_id} ) {
      $params->{mode} = 'subset_libs';
    }
    $params->{mode} ||= 'download_libs';
    $atlas->display_page_header( onload => $load_script, sortable => 1 );

    if ( $params->{mode} eq 'subset_libs' ) {
      $page .= get_subset_form_original( $params );
      $load_script = '';
    } elsif ( $params->{mode} eq 'customize_library' ) {
      $page .= get_subset_form_original( $params, 'customize' );
    } elsif ( $params->{name} ) {
      $page .= get_subset_form_original( $params );
    } else { 
      $page .= $tabMenu;
      $page .= get_library_table();
    }
    $page .= "<BR>";

    # Print what we already have, speed up apparent page loading time.
		print $page;

		$atlas->display_page_footer();
    $sbeams->setSessionAttribute( key => 'PA_resource', value => '' );

} # end main

sub get_help_links {

  my %title2text = ( 'Library' => "Source library file to customize",
                     'min_mz' => "Minimum m/z value for ion library entries ",
                     'max_mz' => "Maximum m/z value for ion library entries ",
                     'swaths_file' => "File of SWATH bins, format is lower mz bound <tab> upper bound mz <newline> ",
                     'swath_size' => "Size of each SWATH bin, default is 25 Th ",
                     'Proteins' => "File of protein accessions, one per line, with which to filter library. One accession space per organism allowed: Human - Uniprot, Mtb - Tuberculist (Rv)" );
  my %title2link;
  for my $title ( keys( %title2text ) ) {
    my $text = $title2text{$title};
    $title2link{$title} = qq~<TD BGCOLOR=E0E0E0><span title='$text' class=popup><IMG SRC='$HTML_BASE_DIR/images/greyqmark.gif' BORDER=0 ONCLICK="popitup('$CGI_BASE_DIR/help_popup.cgi?title=$title;text=$text;email_link=no');"></SPAN></TD>~;
  }
  return \%title2link;
}

sub get_table_help {
  my %args = @_;
  my $name = $args{table};
  return '' unless $name;
  $args{mode} ||= 'section';
  my @entries;
  my $hidetext;
  my $showtext;
  my $heading;
  my $description;

  if ( $name eq 'build' ) {  
    @entries = ( { key => 'Build Name', value => 'The simple name for this build, usually contains organism, prophet cutoff, and other information. ' },
                 { key => 'Build Description', value => 'More detailed information about build. ' },
                 { key => 'Reference Database', value => 'Database to which peptides were mapped, generally different than search database.  This mapping is done by running BLAST, and allows the peptides to be mapped the the organism\'s genomic sequence. ' },
                 { key => 'Build Date', value => 'Date upon which build was finished. ' },
                 { key => '# Samples', value => 'The number of individual samples which comprise this build.  Each sample contains one or more LCMS/MS runs, and generally corresponds to a single scientific experiment.' } ,
                 { key => 'Distinct Peptides', value => 'This shows the number of distinct peptide sequences that were seen in this build.  Observations of the peptide in different charge states or with different modifications are coalesced.' } ,
                 { key => 'Total Observations ', value => 'The total number of spectra that yeilded identifications above the build threshold.  Observations of the same base peptide sequences multiple times or in various charge states/modifications, whould each contribute to the total' }
        );
                 
    $showtext = 'show row descriptions';
    $hidetext = 'hide row descriptions';
    $heading = 'Build Overview';
    $description= 'These values pertain to the atlas build as a whole';


  } elsif ( $name eq 'batch' ) {
    @entries = ( { key => 'ID', value => 'Database ID for this sample (search batch) ' },
                 { key => 'Sample_Name', value => 'Simple name for this sample/experiment. ' },
                 { key => '#_Spectra_Searched', value => 'The total number of spectra searched in the sample. ' },
                 { key => "#_Spectra_ID'd", value => 'The number of spectra identifed with a probability greater than the atlas threshold ' },
                 { key => '#_Distinct', value => 'The number of distinct peptide sequences, seen more than once (multiobs), in this build that are seen in this sample. ' },
                 { key => '#_Unique', value => "The number of distinct, multiobs peptides that are seen only in this sample (unique contribution).  This discriminates against smaller samples, and is less useful in atlas' with a large number of samples. " },
                 { key => '#_Progressive', value => 'Order-dependent unique multiobs peptides contributed by a given sample.  The contribution for each sample is based on the samples that have gone before it, so later samples tend to have a lower progressive contribution. ' },
                 { key => '#_Cumulative', value => 'Order-dependent cumulative number of unique multiobs peptides contributed to build by this and previous samples. ' },
                 { key => '#_Proteins', value => 'The number of canonical (highly distinguishable, non-redundant) protein sequences identified from the peptides in this sample.' },
                 { key => '#_Cum_Prots', value => 'Order-dependent cumulative number of canonical proteins contributed to build by this and previous samples.<br>Counts non-human contaminants, so final tally may be greater than Canonical Proteins count in Build Overview. ' },
#                 { key => 'Sens', value => 'The sensitivity of the Peptide Prophet model at a probablility of 0.9, the percent of true positives that would be included at that threshold was used as a cutoff. ' },
                 { key => 'FDR_(%)', value => 'The error rate of peptides above the threshold Peptide Prophet model at a probablility of 0.9, the percent of false positives that would be included at the build threshold. ' },
                 { key => 'Sample_Date', value => ''},
        );
    $heading = 'Sample Overview'; 
    $description = 'These values pertain to individual samples within the atlas';

  } elsif ( $name eq 'mayu' ) {
   @entries = ( { key => 'nr_runs', value => 'Number of MS runs contributing to this build '},
  
		{ key => 'nr_files', value => 'Always 1 '},
  
		{ key => 'mFDR', value => 'Data in current row applies to all data meting this PSM (spectrum) FDR threshold. '},
		{ key => 'target_PSM', value => 'Number of non-decoy PSMs at this mFDR (counts peptides mappable to protein reference set only)'},
  
		{ key => 'decoy_PSM', value => 'Number of decoy PSMs at this mFDR '},
  
		{ key => 'FP_PSM', value => 'Number of false positive PSMs predicted by Mayu for this mFDR. Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'TP_PSM', value => 'target_PSM - FP_PSM '},
  
		{ key => 'target_pepID', value => 'Number of non-decoy unique peptides at this mFDR (counts peptides mappable to protein reference set only) '},
  
		{ key => 'decoy_pepID', value => 'Number of decoy unique peptides at this mFDR '},
  
		{ key => 'FP_pepID', value => 'Number of false positive unique peptides predicted by Mayu for this mFDR. Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'FP_pepID_stdev', value => ' '},
  
		{ key => 'TP_pepID', value => 'target_pepID - FP_pepID '},
  
		{ key => 'pepFDR', value => 'Peptide FDR (unique peptides)'},
  
		{ key => 'target_protID', value => 'Number of non-decoy protein identifications at this mFDR. Applied to the covering set of proteins -- a set that is close to the smallest necessary to explain all the pepIDs. Includes all canonicals and some possibly_distinguished. '},
  
		{ key => 'decoy_protID', value => 'Number of decoy protein identifications at this mFDR. '},
  
		{ key => 'FP_protID', value => 'Number of false postiive protein identifications predicted by Mayu for this mFDR.  Usually near, but not exactly the same as, the number of decoys. '},
  
		{ key => 'FP_protID_stdev', value => ' '},
  
		{ key => 'TP_protID', value => 'target_protID - FP_protID '},
  
		{ key => 'protFDR', value => 'Protein FDR. The largest value in this column is the protein FDR for the entire build. '},
		{ key => 'lFDR1, lFDR5, lFDR10,2 lFDR5', value => 'Local protein FDR, computed over the previous step (i.e. between the previous row in the table and the current row), the previous 5 steps, the previous 10 steps, and the previous 25 steps.<br>Often there are fewer than 25 rows in the table, in which case column lFDR25 is uninformative. '},
  
		{ key => 'target_protIDs, decoy_protIDs, etc.', value => 'Same as above, except for singleton proteins (those identified by only one PSM) only. '},
		{ key => 'target_protIDns, decoy_protIDns, etc.', value => 'Same as above, except for multiply-observed proteins only. '},
  
        );
    $heading = 'Mayu'; 
    $description = 'Reiter L, Claassen M, et al., Protein identification false discovery rates for very large proteomics data sets generated by tandem mass spectrometry, Mol Cell Proteomics. 2009 Nov;8(11):2405-17 ';
  }


  return unless @entries;
  return \@entries if $args{mode} eq 'entries_only';

  my $help = $atlas->get_table_help_section( name => $name,
                                             description => $description,
                                             heading => $heading,
                                             entries => \@entries,
                                             showtext => $showtext,
                                             hidetext => $hidetext  );
  return $help;

} # end get_table_help


# General list information
sub get_list_overview {

  my $build_id = shift;
  
  # Get a list of accessible project_ids
  my @project_ids = $sbeams->getAccessibleProjects();
  my $project_ids = join( ",", @project_ids ) || '0';

  my $info = $sbeams->selectrow_hashref( <<"  BUILD" );
  SELECT title, description, n_proteins, original_file, protein_list_id,
         contributors, url, image_path, abstract, image_caption
  FROM $TBAT_DOMAIN_PROTEIN_LIST 
  WHERE protein_list_id = $params->{protein_list_id}
  AND record_status <> 'D'
  AND project_id IN ( $project_ids );
  BUILD


  my $table = "<TABLE WIDTH=800>\n";

  my ( $tr, $link ) = $sbeams->make_table_toggle( name    => 'build_overview',
                                                  visible => 1,
                                                  tooltip => 'Show/Hide Section',
                                                  imglink => 1,
                                                  sticky  => 1 );

  $table .= $atlas->encodeSectionHeader(
      text => ' Protein List Overview',
      span => 4,
      link => $link
  );
  for my $key ( keys( %{$info} ) ) {
    $info->{lc($key)} = $info->{$key};
  }

  my $file_url = "$CGI_BASE_DIR/PeptideAtlas/ManageTable.cgi/$info->{original_file}?TABLE_NAME=AT_Domain_Protein_list;ForceDownload=1;protein_list_id=" . $info->{protein_list_id} . ";GetFile=original_file";
  my $file_link = "<a href='$file_url'>$info->{original_file}</a>";

  my $spc = $sbeams->getGifSpacer(500);
  my $tab = $sbeams->getGifSpacer(25);

  my $img = '';
  my $caption = '';
  if ( $info->{image_path} ) {
    my @path = split( /\//, $info->{image_path});
    my $web_path = "/devDC/sbeams/images/$path[$#path]";
    $img = "$tab<img src=$web_path height=80 width=80></img>\n";
    $caption = $info->{image_caption} || '';
  }

  my $abstract = '';
  if ( $info->{abstract} ) {
    $abstract = $info->{abstract};
    $abstract =~ s/\r//;
    $abstract =~ s/\n/<br>/g;
  }


  $table .= $atlas->encodeSectionItem( key   => 'List Name', tr_info => $tr,
                            value => $info->{title} . $spc, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Contributors', tr_info => $tr,
                            value => $info->{contributors}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Description', tr_info => $tr,
                            value => $info->{description}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Number of Proteins', tr_info => $tr,
                            value => $info->{n_proteins}, vspan => 3 ) . "\n";
  $table .= $atlas->encodeSectionItem( key   => 'Original File', tr_info => $tr,
                            value => $file_link, vspan => 3 ) . "\n";

  $table .= "<tr><td>$img</td><td>$caption</td></tr>";
  $table .= "<tr><td colspan=2>$abstract</td></tr>";
  $table .= "</TAB/net/dblocal/wwwspecial/mrmatlas/mtb/Mtb_SRM_Atlas_SWATH_Orbitrap.tsvLE>\n";
  return $table;

}

sub get_library_table {

  my $build_id = shift;

  my $help = qq~
   <div style="font-family:Helvetica, Arial, sans-serif;font-size:150%;font-weight:bold" id=heading> Library Download </div>
   <div id=help style="width:800px"> Download SWATH/DIA libraries in any of the supported formats. 
   <br><br>
  </div>
  ~;

  my $sql = qq~
  SELECT dia_library_id, dia_library_name, dia_library_tag, instrument_type_name,
  organism_name, DIL.comment, md5sum, file_path, file_format
  FROM $TBAT_DIA_LIBRARY DIL 
  JOIN $TBAT_INSTRUMENT_TYPE IT ON IT.instrument_type_id = DIL.instrument_type_id
  JOIN $TB_ORGANISM O ON O.organism_id = DIL.organism_id
  WHERE project_id IN ( $project_ids )
  ORDER BY dia_library_tag, file_format, instrument_type_name
  ~;
# 0 dia_library_id
# 1 dia_library_name
# 2 dia_library_tag
# 3 instrument_type_name
# 4 organism_name
# 5 DIL.comment
# 6 md5sum
# 7 file_path
# 8 file_format
  my $sth = $sbeams->get_statement_handle( $sql );
  my %libraries; 
  while( my @row = $sth->fetchrow_array() ) {
    $libraries{$row[2]} ||= [];
    push @{$libraries{$row[2]}}, \@row;
  }
  my $content = $help;

#    $table->addRow( ['Pathway ID', 'View Data','Pathway Definition' ] );
#  $table->setRowAttr( ROWS => [1], BGCOLOR => '#bbbbbb', ALIGN=>'CENTER', NOWRAP => 0, HEIGHT => 35 );
#  $table->setHeaderAttr(BOLD=>1);   # this actually has effect via sub formatHeader
#    $table->addRow( [$path->{entry_id},$links,$path->{definition} ] );
#  $table->alternateColors(PERIOD => 1, FIRSTROW=> 2, BGCOLOR => '#e0e0e0');
#  my $nrows = $table->getRowNum();
#  $table->setColAttr(  COLS => [2], ROWS => [2..$nrows], ALIGN => 'CENTER' );
#  $page .= "$table<BR>\n";
#  my $table = SBEAMS::Connection::DataTable->new( BORDER => 0 );
#  $table->addRow( [ '&nbsp;', 'Protein', 'Peptides Observed' ] );
#  $table->setHeaderAttr( BOLD => 1 );
#    $table->addRow( [ $chk_box, $gene, $cnt ] );
#  $table->alternateColors( FIRSTROW => 2, PERIOD => 1, BGCOLOR => '#DDDDDD', DEF_BGCOLOR => '#FFFFFF' );
#  $table->setColAttr( ALIGN => 'RIGHT', COLS => [3], ROWS => [2..$table->getRowNum()] );


  for my $lib ( sort( keys( %libraries ) ) ) {
#    my $lib_table = SBEAMS::Connection::DataTable->new( HEADER => 1 );
#    $lib_table->addRow( [ qw( Name Description Instrument Format MD5Sum ), 'Get Libraries' ] );
    my @lib_data = ( [ qw( Name Instrument Format Size ), 'Get Libraries' ] );
    for my $lib_file ( @{$libraries{$lib}} ) {
      my $fname = basename( $lib_file->[7] ); 

      $sbeams->makeSBEAMSTempLink( path => $lib_file->[7], linkname => $lib_file->[6] );

      my $dwn = "<a href=$CGI_BASE_DIR/downloadFile.cgi?name=$fname;format=tsv;tmp_file=$lib_file->[6]>Download</a>";
      my $size = -s $lib_file->[7];
      $size = hr_size( $size );
      my $cust = '';
      if ( $lib_file->[8] =~ /peakview/i ||
           $lib_file->[8] =~ /openswath/i ||
           $lib_file->[8] =~ /mprophet/i ) { 
        $cust = "<a href=GetDIALibs?mode=subset_libs;lib_id=$lib_file->[0]>Customize</a>";
      }
#      $lib_table->addRow( [ @{$lib_file}[1,5,3,8,6], $dwn . '&nbsp;&nbsp;' . $cust ] );
      push @lib_data, [ @{$lib_file}[1,3,8], $size, $dwn . '&nbsp;&nbsp;' . $cust ];
    }

    my $lib_table = $atlas->encodeSectionTable( header => 1, 
                                                 width => '800',
                                                align  => [ qw(left left left left left center) ],
                                                  rows => \@lib_data,
                                           chg_bkg_idx => 3, 
                                              bg_color => '#EAEAEA',
                                              sortable => 0,
                                              table_id => $lib,
                                           close_table => 1,
                                            );

#    die Dumper( $lib_table );
    $content .= qq~
    <br>
     <span style="font-family:Helvetica, Arial, sans-serif;font-size:110%;font-weight:bold" id=heading> $lib </span>
     <table><table>$lib_table
    <br>
    ~;
  }
  return $content;

}

sub hr_size {
  my $size = shift;
  my @sfx = ( '', 'KB', 'MB', 'GB', 'TB', 'PB' );

  my $i = 0;
  while ( $size > 1024 ) {
    $size = $size / 1024;
    $i++;
  }
  return sprintf( "%.1f", $size ) . " $sfx[$i]";
}

sub get_btxt {
  my @tags = @_;
  my $max = 0;
  for my $tag ( @tags ) {
    $max = length( $tag ) if length( $tag ) > $max;
  }
  my %btxt;
  for my $tag ( @tags ) {
    my $len = length( $tag );
    my $delta = $max - $len;
    my $pad = 0;
    if ( $delta ) {
      $pad = int($delta/2 + 0.5);
    }
    my $prepad = '&nbsp;' x $pad; 
    my $postpad = '&nbsp;' x ($max - $len - $pad); 
    $btxt{$tag} = $prepad . $tag . $postpad;
  }
  return \%btxt; 

}


sub get_subset_form {

  my $params = shift;

  my $query_name = 'AT_GetDIALibs';

  my $category = $query_name;
  my $program_name = $atlas->returnTableInfo( $query_name , "PROGRAM_FILE_NAME" );

  #### Get the columns and input types for this table/query
  my @columns = $atlas->returnTableInfo( $query_name, "ordered_columns");
  my %input_types = $atlas->returnTableInfo($query_name,"input_types");

  $sbeams->collectSTDOUT();
  #### Display the user-interaction input form
  $sbeams->display_input_form(
    TABLE_NAME=>$query_name,
    CATEGORY=>$category,
    apply_action=>'Go',
    PROGRAM_FILE_NAME=>$program_name,
    parameters_ref=>$params,
    input_types_ref=>\%input_types,
    mask_user_context=> '1',
    use_tabbed_panes=> '1',
  );
  my $form = $sbeams->fetchSTDOUT();
  return $form;
}


sub get_subset_form_original {

  my $params = shift || {};
  my $custom = shift || '';

  my $title = qq~
  <div style="font-family:Helvetica, Arial, sans-serif;font-size:150%;font-weight:bold" id=heading>Custom Library Download </div>
  <br>
  ~;
  print $title;
  print "$tabMenu <br>\n";

  my $custom_link = '';
  if ( $custom ) {
    $custom_link = "<div id='status' class=info_box width: 400px > Generating library, this may take a minute <img src='$HTML_BASE_DIR/images/wait_sm.gif'></img></div><br><br>\n";
    print $custom_link;
    print qq~ 
      <script type='text/javascript'> 
      function set_status ( new_status ) {
        var status = document.getElementById( 'status' );
        status.innerHTML = new_status;
        return false;
      }
      </script>
    ~;

    if ( !$params->{library} || $params->{library} !~ /^\d+$/ ) {
     print "<script type='text/javascript'> set_status( 'Missing or illegal library ID' ); </script>" ;
    } else {

      my $sql = qq~
      SELECT file_path, file_format 
      FROM $TBAT_DIA_LIBRARY 
      WHERE dia_library_id = $params->{library}
      AND project_id IN ( $project_ids );
      ~;
      my $sth = $sbeams->get_statement_handle( $sql );
      my $path = '';
      my $format = '';
      while ( my @row = $sth->fetchrow_array() ) {
        $path = $row[0];
        $format = $row[1];
        last;
      }
      if ( !$path || ! -e $path ) {
        print "<script type=text/javascript> set_status( 'Missing library path' ); </script>" ;
      } else {
        my $fname = $sbeams->getRandomString( num_chars => 20 );

        my $exec = "$PHYSICAL_BASE_DIR/lib/scripts/PeptideAtlas/extract_ionlibrary_subset.pl --in $path --out /tmp/$fname --format $format ";

        if ( $params->{swaths_file} ) {
          my $file_name = $q->param( 'swaths_file' );
          my $sfile = $sbeams->getRandomString( num_chars => 20 );
          open SWATHS, ">/tmp/$sfile";
          while ( my $line = <$file_name> ) {
            print SWATHS $line;
          }
          close SWATHS;
          $exec .= "--swath /tmp/$sfile ";
        } else {
          $exec .= "--min $params->{min_mz} --max $params->{max_mz} --width $params->{swath_size} ";
        }



        if ( $params->{protein_file} ) {
          my $file_name = $q->param( 'protein_file' );
          my $pfile = $sbeams->getRandomString( num_chars => 20 );
          open PROTS, ">/tmp/$pfile";
          while ( my $line = <$file_name> ) {
            print PROTS $line;
          }
          close PROTS;
          $exec .= "--protein /tmp/$pfile ";
        }

        my $status = system( $exec );
#        print "<script type=text/javascript> set_status( 'Running script' ); </script>" ;
        if ( -e "/tmp/$fname"  ) {

          my $result = '';
          my $base_name = basename( $path );
          $base_name =~ s/\.csv/\.tsv/;
#          print "<script type=text/javascript> set_status( 'File exists: /tmp/$fname' ); </script>" ;
          move( "/tmp/$fname", "$PHYSICAL_BASE_DIR/tmp/$fname" );

          if ( -e "$PHYSICAL_BASE_DIR/tmp/$fname" ) {
            $result = qq~ Customized library is ready for download via this <a href=$CGI_BASE_DIR/downloadFile.cgi?name=$base_name;format=tsv;tmp_file=$fname>link</a>~;
          } else {
            $result = "Library customization failed";
          }
          print "<script type=text/javascript> set_status( '$result' ); </script>" ;

        }

      }
    }
  }


  my $help = qq~
   <div id=help style="width:800px"> This form allows you to a list of proteins to extract a subset SWATH/DIA library. This can be done with a user-uploaded list, or with any of the 
   Biology/Disease-driven Human Proteome Project ( <a href="http://db.systemsbiology.net/devDC/sbeams/cgi/PeptideAtlas/proteinList?protein_list_id=2"> B/D-HPP </a>) contributed lists.
  </div>
  ~;

  my %org2species = ( mtb => 'Mycobacterium tuberculosis',
                      human => 'Homo sapiens',
                      ecoli => 'Eschiera coli',
                      yeast => 'Saccharomyces cerevisie' );

  my %orgs;
  my %inst;
  my $sql = qq~
  SELECT dia_library_id, dia_library_name, file_path, file_format
  FROM $TBAT_DIA_LIBRARY DIL 
  WHERE project_id IN ( $project_ids )
  AND file_format IN ('peakview', 'openswath', 'mprophet' )
  ORDER BY dia_library_name 
  ~;
# 0 dia_library_id
# 1 dia_library_name
# 2 DIL.comment
# 3 file_path
# 4 file_format
  my $sth = $sbeams->get_statement_handle( $sql );
  my %libraries; 
  my $lib_select = "<select size=4 name=library id=library>\n";

  while ( my @row = $sth->fetchrow_array() ) {
    my $selected = '';
    if ( $row[0] == $params->{lib_id} ) {
      $selected = 'selected';
      $log->debug( "current lib $row[0] matches $params->{lib_id}" );
    }
    $log->debug( "current lib $row[0] doesn't match $params->{lib_id}" );
    $lib_select .= "<option value=$row[0] $selected > $row[1] </option>\n";
  }
  $lib_select .= "</select>\n";

  my $inst_select = "<select name=instrument><option value=''>---</option>";
  for my $inst ( sort( keys( %inst ) ) ) {
    $inst_select .= "<option value='$inst' > $inst </option>\n";
  }
  $inst_select .= "</select>";

  my $sql =<<"  END";
  SELECT title, first_name, last_name, protein_list_id
  FROM $TBAT_DOMAIN_PROTEIN_LIST DPL
  JOIN $TB_CONTACT C ON DPL.owner_contact_id = C.contact_id
  ORDER BY title
  END

  my $list_select = "<select name=protein_list_id>\n";
  my $sth = $sbeams->get_statement_handle( $sql );
  while( my @row = $sth->fetchrow_array() ) {
    $list_select .= "<option value=$row[3]>$row[0] - Dr. $row[1] $row[2]</option>\n";
  }
  $list_select .= "</select>\n";

  $log->info( $list_select );

  my $radio = qq~
  Upload protein list <input type=radio name=input_type id=input_type value=upload_list checked> &nbsp;&nbsp;
  HPP B/D list <input type=radio name=input_type id=input_type value=bd_list>
  ~;

  my $upload = "<input type=file name=upload_list></input>";

#  <tr><td><div style="inactive_text"> HPP B/D list: </div></td><td> $list_select  </td></tr>
#  <tr><td colspan=2><b><i> $radio </i></b></td></tr>
#  <tr><td><div style="bold_italic_text"> Upload File: </div></td><td> $upload  </td></tr>

#  <tr><td><b><i> Organism:</i></b></td><td>$org_select  </td></tr>
#  <tr><td><b><i> Instrument:</i></b></td><td>$inst_select  </td></tr>
#  <tr><td><b><i> Protein List: </i></b> </div></td><td> <input type=text size=25></input>  </td></tr>
#  <tr><td><b><i> Upload File: </i></b> </div></td><td> $upload  </td></tr>
  my $title2help = get_help_links();
  my $or = '~or~';

  my $min_mz = $params->{min_mz} || 400;
  my $max_mz = $params->{max_mz} || 1600;
  my $swath_size = $params->{swath_size} || 25;
  my $n_bins = 48;

  my $form = qq~
  $help
  <br><br>
  <script type='text/javascript'>
  function popitup(url) {
    newwindow=window.open( url ,'helpwin','height=400,width=300,dependent=yes,screenX=5000,screenY=50,scrollbars=yes,resizable=yes');
    if (window.focus) {newwindow.focus()}
    return false;
  }
  function specify_swath ( mode ) {
    var min_mz = document.getElementById( 'min_mz' );
    var max_mz = document.getElementById( 'max_mz' );
    var swath_size = document.getElementById( 'swath_size' );
    var swath_cnt = document.getElementById( 'swath_cnt' );
    if ( mode == 'file' ) {
      min_mz.value = '';
      max_mz.value = '';
      swath_size.value = '';
      swath_cnt.innerHTML = '';
    } else {
      var swaths_file = document.getElementById( 'swaths_file' );
      swaths_file.value = '';
      var min_val = min_mz.value;
      var max_val = max_mz.value;
      var swath_size_val = swath_size.value

      if ( min_val && max_val && swath_size_val ) {
        var range = max_val - min_val;
        var n_bins = parseInt( range/swath_size_val );
        var mod = range % swath_size_val;
        if ( mod > 0 ) {
          n_bins = n_bins + 1;
        }
        swath_cnt.innerHTML = '(' + n_bins + ' total bins)';

      } else {
        swath_cnt.innerHTML = '';
      }
    }
  }
  </script>
  <style type="text/css">
   .cellblock_top { border-top:1px solid; border-color:black; border-left:1px solid; border-right:1px solid}
   .cellblock_bottom { border-bottom:thin solid; border-color:black; border-left:thin solid; border-right:thin solid}
   .cellblock { border-color:black; border-left:thin solid; border-right:thin solid}
  </style>

  <table style="border-collapse: collapse">
  <form method=post id=list_selector onSubmit="return check_form()" enctype="multipart/form-data">
  <input type=hidden name=mode value=customize_library />
  <tr>
    <td align=right><b><i> Library:</i></b></td>
    $title2help->{Library}
    <td>$lib_select</td>
  </tr>
  <tr>
    <td align=right><b><i> Proteins:</i></b></td>
    $title2help->{Proteins}
    <td><input type=file name=protein_file id=protein_file></input></td>
  </tr>
  <tr>
    <td colspan=3>&nbsp;</td>
  </tr>
  <tr class="cellblock_top">
    <td align=right><b><i> SWATHs file:</i></b></td>
    $title2help->{swaths_file}
    <td><input type=file name=swaths_file id=swaths_file onchange=specify_swath('file')></input></td>
  </tr>
  <tr class=cellblock>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align=left>$or</td>
  </tr>
  <tr class=cellblock>
    <td align=right><b><i> Min mz:</i></b></td>
    $title2help->{min_mz}
    <td><input type=text id=min_mz name=min_mz onchange=specify_swath('direct') size=12 value=$min_mz></input></td>
  </tr>
  <tr class=cellblock>
    <td align=right><b><i> Max mz:</i></b></td>
    $title2help->{max_mz}
    <td><input type=text id=max_mz name=max_mz onchange=specify_swath('direct') size=12 value=$max_mz></input></td>
  </tr>
  <tr class=cellblock_bottom>
    <td align=right><b><i> SWATH bin size:</i></b></td>
    $title2help->{swath_size}
    <td white-space:nowrap><input type=text name=swath_size id=swath_size onchange=specify_swath('direct') size=12 value=$swath_size></input><span id=swath_cnt>($n_bins total bins)</span></td>
  </tr>
  <tr>
    <td colspan=3>&nbsp;</td>
  </tr>
  <tr>
    <td colspan=3 align=left><input type=submit value='Generate Custom Library'></input></td>
  </tr>
  </table>
  
  </form>
  <script type="text/javascript">
  function check_form() {
    var min_mz = document.getElementById( 'min_mz' );
    var max_mz = document.getElementById( 'max_mz' );
    var swath_size = document.getElementById( 'swath_size' );
    var swath_cnt = document.getElementById( 'swath_cnt' );
    var swaths_file = document.getElementById( 'swaths_file' );
    var library = document.getElementById( 'library' );

    var min_val = min_mz.value;
    var max_val = max_mz.value;
    var swath_size_val = swath_size.value

//    if ( library.selectedIndex  ) {
//      alert( library.selectedIndex.value );
//      return false;
//    }
//    alert( typeof( library.selectedIndex ) );

    var status = true;
    if ( min_val && max_val && swath_size_val ) {
      status = true;
    }
    if ( swaths_file.value ) {
      status = true;
    }
    if ( ! status ) {
      alert( "Must provide either a SWATH file, or all of min, max, and SWATH bin size" );
    }
    return status;
  }
  </script>
    <br>
  <br>
  ~;

  return $form;
}

sub process_params {
  my $params = {};
  $sbeams->parse_input_parameters( q => $q, parameters_ref => $params );
  $sbeams->processStandardParameters( parameters_ref => $params );
  $params->{mode} ||= 'download_libs';
  return( $params );
}

sub get_build_path {
  my %args = @_;
  return unless $args{build_id};
  my $path = $atlas->getAtlasBuildDirectory( atlas_build_id => $args{build_id} );
  $path =~ s/DATA_FILES//;
  return $path;
}

sub get_draw_chart_function {
	my $sample_arrayref = shift || return '';

	my @samples;
	for my $s ( @{$sample_arrayref} ) {
		push @samples, [ $s->[1], $s->[4], $s->[7] ];
	}
	my $GV = SBEAMS::Connection::GoogleVisualization->new();
  my ( $chart ) = $GV->setDrawBarChart(  samples => \@samples,
                                    	data_types => [ 'string', 'number', 'number' ],
                                      	headings => [ 'Sample', 'Distinct peptides (n_obs > 1)', 'Cumulative peptides (n_obs > 1)' ],
                                      show_table => 0,
                                 truncate_labels => 24
 	);
	my $header = $GV->getHeaderInfo();
  return ( $chart, $header );
}

my $drek = qq~
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons.traml
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons_peakview.tsv

mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons.traml
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons_peakview.tsv
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons_openswath.tsv


yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final_peakview.tsv
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final.sptxt
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final.traml

yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final_peakview.tsv
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final.sptxt
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final.traml


ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF_peakview.tsv
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF.sptxt
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF.traml
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF_openswath.tsv


human	/regis/sbeams/bin/openswath/data/human	human_QTOF_peakview.tsv
human	/regis/sbeams/bin/openswath/data/human	human_QTOF.sptxt
human	/regis/sbeams/bin/openswath/data/human	human_QTOF.traml

human	/regis/sbeams/bin/openswath/data/human	human_QTrap5500_peakview.tsv
human	/regis/sbeams/bin/openswath/data/human	human_QTrap5500.sptxt
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons.traml
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons_peakview.tsv

mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons.traml
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons_peakview.tsv
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons_openswath.tsv


yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final_peakview.tsv
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final.sptxt
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_Orbitrap_DP_final.traml

yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final_peakview.tsv
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final.sptxt
yeast	/regis/sbeams/bin/openswath/data/yeast	Yeast_QTrap4000_DP_final.traml


ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF_peakview.tsv
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF.sptxt
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF.traml
ecoli	/regis/sbeams/bin/openswath/data/ecoli	ecoli_TripleTOF_openswath.tsv


human	/regis/sbeams/bin/openswath/data/human	human_QTOF_peakview.tsv
human	/regis/sbeams/bin/openswath/data/human	human_QTOF.sptxt
human	/regis/sbeams/bin/openswath/data/human	human_QTOF.traml

human	/regis/sbeams/bin/openswath/data/human	human_QTrap5500_peakview.tsv
human	/regis/sbeams/bin/openswath/data/human	human_QTrap5500.sptxt
~;
__DATA__
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_ORBI_filtered_cons_peakview.tsv

mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons.sptxt.gz
mtb	/net/dblocal/wwwspecial/mrmatlas/mtb	Mtb_DirtyPeptides_TripleTOF_filtered_cons_peakview.tsv
