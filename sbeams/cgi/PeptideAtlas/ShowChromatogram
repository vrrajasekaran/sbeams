#!/usr/local/bin/perl

###############################################################################
# Program     : ShowChromatogram
#
# Description : This CGI program displays a single chromatogram in PeptideAtlas
#
# Terry Farrah
#
###############################################################################


###############################################################################
# Basic SBEAMS setup
###############################################################################
use strict;
use FindBin;

use lib "$FindBin::Bin/../../lib/perl";
use vars qw ($q $sbeams $sbeamsMOD $PROG_NAME
             $current_username $massCalculator );

use SBEAMS::Connection qw($q);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;

use SBEAMS::Proteomics::ChromatogramViewer;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::PeptideAtlas::Chromatogram;

use File::Basename;

use Carp;
$SIG{__DIE__} = sub { &Carp::confess };
use CGI::Carp qw (fatalsToBrowser);

#$q = new CGI;
$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);


$PROG_NAME="ShowChromatogram";

# Allowable neutral losses
my @neutral_loss_masses = ();

###############################################################################
# Define global variables if any and execute main()
###############################################################################
main();


###############################################################################
# Main Program:
#
# If $sbeams->Authenticate() succeeds, print header, process the CGI request,
# print the footer, and end.
###############################################################################
sub main {

  #### Do the SBEAMS authentication and exit if a username is not returned
  exit unless ($current_username = $sbeams->Authenticate(
    permitted_work_groups_ref=>['PeptideAtlas_user','PeptideAtlas_admin',
      'PeptideAtlas_readonly', 'PeptideAtlas_exec'],
    #connect_read_only=>1,
    allow_anonymous_access=>1,
  ));


  #### Process certain actions, then print the header, figure and do what the user wants, and print footer
  $sbeamsMOD->display_page_header();
  processRequest();
  $sbeamsMOD->display_page_footer();

  $sbeams->display_page_footer(close_tables=>'YES',
    separator_bar=>'YES',display_footer=>'NO');

} # end main



###############################################################################
# processRequest
###############################################################################
sub processRequest {

    my %parameters;
    $sbeams->parse_input_parameters(q=>$q,parameters_ref=>\%parameters);
    $sbeams->processStandardParameters(parameters_ref=>\%parameters);

    my $apply_action  = $q->param('apply_action');

    # Create a chromatogram object so we can use its methods
    my $cgram = new SBEAMS::PeptideAtlas::Chromatogram;
    $cgram->setSBEAMS($sbeams);

    # Get all necessary info from database using chromatogram_id, if
    # provided. Else, we assume info was passed in via parameters.
    if ( $parameters{'SEL_chromatogram_id'} ) {
      $cgram->getChromatogramParameters(
	SEL_chromatogram_id => $parameters{'SEL_chromatogram_id'},
	param_href => \%parameters,
      );
    }

    # Fetch some of the parameters into scalar variables.
    my $precursor_charge = $parameters{'precursor_charge'};
    my $pepseq = $parameters{'pepseq'};
    my $modified_pepseq = $parameters{'modified_pepseq'};
    my $spectrum_pathname = $parameters{'spectrum_pathname'} ||
	  die 'ShowChromatogram; Need parameter spectrum_pathname';
    my $spectrum_basename = $parameters{'spectrum_basename'};
    if (! $spectrum_basename ) {
      $spectrum_pathname =~ /.*\/(\S+?)\.mzML/;
      $spectrum_basename = $1;
    }
    my $precursor_neutral_mass = $parameters{'precursor_neutral_mass'};



    #### Extract chromatogram data from spectrum file
    ####  into a json data structure and store in a .json file

    # Create a descriptive, unique filename for the chromatogram data
    my $chromgram_basename = $cgram->getNewChromatogramFilename(
      spectrum_basename => $spectrum_basename,
      pepseq => $pepseq,
    );

    # Create names for .json file
    # $PHYSICAL_BASE_DIR/tmp somehow doesn't work, so we use images/tmp
    my $physical_tmp_dir = "$PHYSICAL_BASE_DIR/images/tmp";
    my $html_tmp_dir = "$HTML_BASE_DIR/images/tmp";
    my $json_fname = "$chromgram_basename.json";
    $parameters{'chromatogram_fname'} = $json_fname;
    my $json_html_pathname = "$html_tmp_dir/$json_fname";
    my $json_physical_pathname = "$physical_tmp_dir/$json_fname";

    # Create .json string by reading spectrum file
    my $json_string;
    if (defined $parameters{'precursor_neutral_mass'} &&
	    $spectrum_pathname =~ /.mzML$/)  {
      $json_string = $cgram->mzML2json(
	param_href => \%parameters,
	json_physical_pathname => $json_physical_pathname,
	physical_tmp_dir => $physical_tmp_dir,
	chromgram_basename => $chromgram_basename,
      );
    } elsif ($spectrum_pathname =~ /.mzXML$/)  {
      $json_string = $cgram->mzXML2json (
	param_href => \%parameters,
	json_physical_pathname => $json_physical_pathname,
      );
    } else {
      die "Need spectrum file with .mzML OR .mzXML extension ".
      "(have $spectrum_pathname); if .mzML, also need precursor_neutral_mass.\n";
    }

    # Write .json string to file
    $cgram->writeJsonFile (
      json_string => $json_string,
      json_physical_pathname => $json_physical_pathname,         
    ) if ($json_string);

#--------------------------------------------------
#     print "<br>json_physical_pathname:<br>\n";
#     print `ls -l $json_physical_pathname`, "<br>\n";
#-------------------------------------------------- 



    #### Display the Chromatogram Viewer page.

    # Print the HTML for the top of the chromatogram viewer page
    my $seq = (defined $modified_pepseq) ? $modified_pepseq : $pepseq;
    my $top_html = $cgram->getTopHTMLforChromatogramViewer (
      param_href => \%parameters,
      seq => $seq,
      precursor_neutral_mass => $precursor_neutral_mass,
      precursor_charge => $precursor_charge,
      spectrum_pathname => $spectrum_pathname,
    );
    print $top_html;

    # Generate the Chromavis javascript chromatogram viewer
    my $chromavis = new SBEAMS::Proteomics::ChromatogramViewer;
    print $chromavis->generateChromatogram(
	      chromatogram_pathname => $json_html_pathname,
              spectrum_pathname         => $spectrum_pathname,
              precursor_neutral_mass=> $precursor_neutral_mass,
              precursor_charge      => $precursor_charge,
	      seq                   => $seq,
              precursor_rt          => $parameters{rt},
              best_peak_group_rt    => $parameters{Tr},
              m_score               => $parameters{m_score},
	  );

    # Read the data from the JSON file into a hash of the
    # format required by writeResultSet
    my $cgram_href = $cgram->readJsonChromatogramIntoResultsetHash (
      param_href => \%parameters,
      json_physical_pathname => $json_physical_pathname,
    );

    # Store chromatogram data as a recallable resultset
    my $rs_set_name = "SETME";
    $sbeams->writeResultSet(resultset_file_ref=>\$rs_set_name,
      resultset_ref=>$cgram_href,
      file_prefix=>'chromgram_',
      query_parameters_ref=>\%parameters);

    # Print the HTML that allows user to recall and download resultset
    print $cgram->getBottomHTMLforChromatogramViewer(
      param_href => \%parameters,
      rs_set_name => $rs_set_name,
    );

} # end processRequest


###############################################################################
# get_chromatogram   lifted from ShowSpectrum and currently UNUSED,
#                     but maybe we'll adapt it for our use.
###############################################################################
sub get_chromatogram
{
  my %args = @_;

  my $chromatogram_id = $args{'chromatogram_id'};
  unless ($chromatogram_id) {
    print "\nERROR: chromatogram_id not passed.\n\n";
    return;
  }


  my $sql = qq~
    SELECT proteomics_search_batch_id,chromatogram_name
      FROM $TBAT_SPECTRUM S
      JOIN $TBAT_SPECTRUM_IDENTIFICATION SI
           ON (S.chromatogram_id = SI.chromatogram_id )
      JOIN $TBAT_ATLAS_SEARCH_BATCH ASB
           ON (SI.atlas_search_batch_id = ASB.atlas_search_batch_id )
     WHERE S.chromatogram_id = $chromatogram_id
  ~;

  my @rows = $sbeams->selectSeveralColumns($sql);
  unless (@rows) {
    print "\nERROR: Unable to get search batch information for ".
      "chromatogram_id '$chromatogram_id'.\n\n";
    return;
  }
  my $search_batch_id = $rows[0]->[0];
  my $chromatogram_name = $rows[0]->[1];
  my $fraction_tag;
  if ($chromatogram_name =~ /^(.+)\.(\d+)\.(\d+)\.\d$/) {
    $fraction_tag = $1;
  } else {
    die("ERROR: Unable to parse fraction name from '$chromatogram_name'");
  }

  #print "search_batch_id = $search_batch_id\n";
  #print "chromatogram_name = $chromatogram_name\n";
  #print "fraction_tag = $fraction_tag\n";


  use SBEAMS::PeptideAtlas::Spectrum;
  my $spectra = new SBEAMS::PeptideAtlas::Spectrum;
  $spectra->setSBEAMS($sbeams);

  my @mass_intensities = $spectra->getSpectrumPeaks(
    proteomics_search_batch_id => $search_batch_id,
    chromatogram_name => $chromatogram_name,
    fraction_tag => $fraction_tag,
  );


  #### If we still have no chromatogram data, then bail out
  unless (@mass_intensities) {
    print "\nERROR: Unable to get m/z,intensity pairs for ".
      "chromatogram_id '$chromatogram_id'.\n\n";
    return;
  }

  #### Extract rows into two arrays of masses and intensities
  my (@masses,@intensities);
  for (my $i=0; $i<=$#mass_intensities; $i++) {
    push(@masses,$mass_intensities[$i]->[0]);
    push(@intensities,$mass_intensities[$i]->[1]);
  }

  my %chromatogram;
  $chromatogram{n_peaks} = $#mass_intensities + 1;


  #### Put data into hash and return
  $chromatogram{mz} = \@masses;
  $chromatogram{intensities} = \@intensities;

  return %chromatogram;


}
