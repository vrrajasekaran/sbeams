#!/usr/local/bin/perl

###############################################################################
# $Id: $
#
# SBEAMS is Copyright (C) 2000-2008 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
use CGI::Carp qw(fatalsToBrowser croak);

use lib qw (../../lib/perl);
use vars qw ($q $sbeams $sbeamsMOD $PROG_NAME
             $current_contact_id $current_username $glyco_query_o);
use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;

use SBEAMS::BioLink::Tables;
use SBEAMS::BioLink::MSF;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::Connection::TabMenu;


###############################################################################
# Global Variables
###############################################################################
#
$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);

$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);

{ # Main 

  # Authenticate or exit
  $current_username = $sbeams->Authenticate(allow_anonymous_access=>1) || exit;

  #### Read in the default input parameters
  my %params;
  $sbeams->parse_input_parameters( q=>$q, parameters_ref=>\%params );
  $sbeams->processStandardParameters(parameters_ref=>\%params);
  
  ## get project_id to send to HTMLPrinter display
  my $project_id = $sbeams->getCurrent_project_id();

  my $page = $sbeams->getGifSpacer( 800 ) . "<BR>\n";

  my $tabMenu = $sbeamsMOD->getTabMenu(
    parameters_ref => \%params,
    program_name => 'GetProtein',
  );
  $page .= "$tabMenu";


  $sbeamsMOD->display_page_header(project_id => $project_id);
  $log->debug( "Begin page:" .time() );
  if ( $params{bioseq_id} || $params{restore} || $params{protein_list} ||
       $params{protein_group_number} || $params{protein_list_id} ) {
    $page .= get_alignment_display( %params );
  } else {
    $page .= $sbeams->makeErrorText( "Missing required parameter bioseq_id or protein_group_number" );
  }
  $log->debug( "Page done:" .time() );
    

  # Display page
  print $page;
  $sbeamsMOD->display_page_footer();

} # end main


sub get_alignment_display {
  my %args = @_;

  # Content scalar to return
  my $curr_bid = $sbeamsMOD->getCurrentAtlasBuildID( parameters_ref => \%args );

	my @select = $sbeamsMOD->GetBuildSelect( set_onchange => 1,
	                                                 build_id => $curr_bid,
								                                  form_name => 'compareProteins' );
	my $clustal_display = $select[1];

	$clustal_display .= "<BR><P><FORM METHOD=POST NAME=compareProteins>\n";
	for my $arg ( keys( %args ) ) {
		next if $arg =~ /atlas_build_id/;
		$clustal_display .= "<INPUT TYPE=HIDDEN NAME='$arg' VALUE='$args{$arg}'>\n";
	}

	$clustal_display .= "$select[0] </FORM></P>\n";

  my $bioseq_clause = '';

	if ( $args{restore} ) {
    # my $ids = $sbeamsMOD->get_mapped_biosequences( build_id => $curr_bid,
		#                                       peptide_sequence => $args{pepseq} );

		$args{bioseq_id} = $args{orig_bioseq_id};
	}

  if ( $args{protein_group_number} ) {
    my $sql = qq~
      (
	SELECT PID.biosequence_id
	FROM $TBAT_PROTEIN_IDENTIFICATION PID
	JOIN $TBAT_ATLAS_BUILD AB
	ON (AB.atlas_build_id = PID.atlas_build_id)
	where AB.atlas_build_id ='$curr_bid' AND
	      PID.protein_group_number = '$args{protein_group_number}'
      ) UNION (
	SELECT BR.related_biosequence_id
	FROM $TBAT_BIOSEQUENCE_RELATIONSHIP BR
	JOIN $TBAT_ATLAS_BUILD AB
	ON (AB.atlas_build_id = BR.atlas_build_id)
	where AB.atlas_build_id ='$curr_bid' AND
	      BR.protein_group_number = '$args{protein_group_number}'
      )
      ~;

    my @bioseq_ids = $sbeams->selectOneColumn($sql);

    if ( !@bioseq_ids ) {
      my $errstr = $sbeams->makeErrorText( "No proteins found in current build in protein group $args{protein_group_number}");
      return ( "$errstr <BR><BR>  $clustal_display" );
    }
    $args{bioseq_id} = join( ",", @bioseq_ids);

  } elsif ( $args{protein_list_id} && $args{key_accession} ) {
    my $sql = qq~
    SELECT DISTINCT biosequence_id
      FROM $TBAT_ATLAS_BUILD AB
      JOIN $TBAT_BIOSEQUENCE B 
        ON B.biosequence_set_id = AB.biosequence_set_id
      JOIN peptideatlas.dbo.protein_list_protein PLP
        ON B.biosequence_name = PLP.protein_name
      JOIN peptideatlas.dbo.protein_list PL
        ON PL.protein_list_id = PLP.protein_list_id
      WHERE atlas_build_id = $curr_bid
      AND PL.protein_list_id = $args{protein_list_id}
      AND key_accession = '$args{key_accession}'
    ~;
    my $sth = $sbeams->get_statement_handle( $sql );
    my @bioseq_ids;
    while ( my @row = $sth->fetchrow_array() ) {
      push @bioseq_ids, $row[0];
    }
    $args{bioseq_id} = join( ",", @bioseq_ids);
  }
  if ( $args{protein_list} ) {
		$args{protein_list} =~ s/;/,/g;
		my $list_ids = $sbeamsMOD->getBioseqIDsFromProteinList( protein_list => $args{protein_list}, build_id => $curr_bid );
		$args{bioseq_id} = ( !$args{bioseq_id} ) ? $list_ids : 
		                   ( $list_ids ) ? $args{bioseq_id} . ',' . $list_ids : $args{bioseq_id};
	}


  if ( $args{bioseq_id} ) {
    $bioseq_clause = "AND BS.biosequence_id IN ( $args{bioseq_id} )\n";
	}
  my $all_projects = join( ",", $sbeams->getAccessibleProjects() );

  return 'Problem with form data: no biosequences found' unless $bioseq_clause;

  # SQL to fetch bioseqs in them.
  my $sql =<<"  END_SQL";
  SELECT DISTINCT biosequence_name,
									organism_name,
									'search_key_name',
									CAST( biosequence_seq AS VARCHAR(4000) ),
									biosequence_id,
									LEN( CAST(biosequence_seq AS VARCHAR(4000) ) )
  FROM $TBAT_ATLAS_BUILD AB 
	JOIN $TBAT_BIOSEQUENCE_SET BSS ON AB.biosequence_set_id = BSS.biosequence_set_id
	JOIN $TBAT_BIOSEQUENCE BS ON BSS.biosequence_set_id = BS.biosequence_set_id
  JOIN $TB_ORGANISM ORG ON BSS.organism_id = ORG.organism_id
--  LEFT JOIN $TBAT_SEARCH_KEY SK ON SK.resource_name = BS.biosequence_name
--  AND ( search_key_type = 'Full Name'
--	      OR search_key_type = 'Description'
--				OR search_key_type LIKE '%Symbol' )
  WHERE AB.project_id IN ( $all_projects )
	$bioseq_clause
--  AND search_key_type = CASE WHEN organism_name = 'human' THEN 'Full Name'
--                             WHEN organism_name = 'Mouse' THEN 'Full Name'
--														 WHEN organism_name = 'Drosophila' THEN 'Full Name'
--													   WHEN organism_name = 'Yeast' THEN 'Description'
--													   ELSE resource_name
--											  END
  ORDER BY LEN(CAST(biosequence_seq AS VARCHAR(4000) ) ) DESC, biosequence_name DESC
  END_SQL

  my $sth = $sbeams->get_statement_handle( $sql );

	# hash of biosequence_ids -> seq or name
	my %bioseq_id2seq;
	my %bioseq_id2name;

  # hash seq <=> accession
	my %seq2acc;
	my %acc2seq;

  # Store acc -> bioseq_id
	my %acc2bioseq_id;

#  # Store organism for each biosequence set
#	my %bss2org;

  # Counter
	my $cnt = 0;

  # array of protein info
	my @all_proteins;
	my %coverage;
	my $fasta = '';
	my $peptide = $args{pepseq} || 'ZORROFEELTHESTINGOFHISBLADE';

# 0     biosequence_name,
# 1     organism_name,
# 2     search_key_name,
# 3     CAST( biosequence_seq AS VARCHAR(4000) ),
# 4     biosequence_id
# 5     biosequence_set_id


# 0 SELECT DISTINCT biosequence_name,
#	1								organism_name,
#	2								'search_key_name',
#	3								CAST( biosequence_seq AS VARCHAR(4000) ),
#	4								biosequence_id
  my %seen;
	my %coverage;
	my @seqs;
  while ( my @row = $sth->fetchrow_array() ) {

    # clustal W quietly changes ':' to '_' in accessions.  Should we fix here? 
		my $acc = $row[0];
		$acc =~ s/:/_/g;

    my $seq = $row[3];
		$seq =~ s/[^a-zA-Z]//g;

    next if $seen{$acc};
    $seen{$acc}++;
		push @seqs, $seq;

		my $peptide_list = $sbeamsMOD->get_protein_build_coverage( build_id => $curr_bid,
		                                                    biosequence_ids => $row[4] );


    $coverage{$acc} = $sbeamsMOD->get_coverage_hash(      seq => $seq,         
                                                     peptides => $peptide_list->{$row[4]} ); 

    # Check this out later for dups...
		$seq2acc{$seq} ||= {};
		$seq2acc{$seq}->{$acc}++;

    $bioseq_id2seq{$row[4]} = $row[3]; 
    $bioseq_id2name{$row[4]} = $acc; 

		$fasta .= ">$acc\n$row[3]\n";

    $acc2bioseq_id{"$acc"} = $row[4];
    # Clustal W alignment file can only take 30 chars
    my $short_acc = substr( $acc, 0, 30 );
    $acc2bioseq_id{"$short_acc"} = $row[4];

		my $acckeys = join( ',', keys( %acc2bioseq_id ) );

    # Cache first seq for each accession, and push onto display
#		unless ( $acc2seq{$row[1]} ) {
#			 $acc2seq{$row[1]} = $seq;
#       # push row info for display
#       push @all_proteins, \@row;
#		}

    $cnt++;
	}
	$log->debug( "Iterated $cnt rows: " .time() );

  # weed out duplicates - not quite working yet?
	my %dup_seqs;
 	my $dup_char = 'A';
	for my $seq ( @seqs ) {

		if ( scalar(keys(%{$seq2acc{"$seq"}})) > 1 ) {
			my $skip = 0;
 	    for my $acc ( keys ( %{$seq2acc{"$seq"}} ) ) {
				if ( $dup_seqs{"$acc"} ) {
					$skip++;
					next;
				}
        $dup_seqs{"$acc"} = $dup_char;
      }
      $dup_char++ unless $skip;
    } else {
			my ( $key ) = keys( %{$seq2acc{"$seq"}} );
      $dup_seqs{"$key"} = '&nbsp;';
	  }
  }

#	  # Calc coverage for this build/protein combination
#    $build_seqs{$row[3]}->{$row[2]}->{coverage} ||= {};
#		my $posn = $sbeamsMOD->get_site_positions( pattern => $row[5],
#		                                               seq => $bioseq_id2seq{$row[2]} );
#		for my $p ( @$posn ) {
#			for ( my $i = 0; $i < length($row[5]); $i++ ){
#				my $covered_posn = $p + $i;
#				$build_seqs{$row[3]}->{$row[2]}->{coverage}->{$covered_posn}++;
#			}
#		}
#	  # Going to cache with accession for ease of use!
# 		$build_seqs{$row[3]}->{$bioseq_id2name{$row[2]}}->{coverage} = $build_seqs{$row[3]}->{$row[2]}->{coverage};
#
#		$cnt++;
#	}
#	$log->debug( "Iterated $cnt rows: " .time() );

###$@#$@#

  my $MSF = SBEAMS::BioLink::MSF->new();

	$log->debug( "Run alignment: " .time() );
	my $acckeys = join( ',', keys( %acc2bioseq_id ) );

  if ( $cnt > 1000 ) {
		$clustal_display = $sbeams->makeErrorText( "Too many sequences to run alignment, skipping" );
	} else {
	  my $clustal = $MSF->runClustalW( sequences => $fasta );
	  if ( ref $clustal ne 'ARRAY' ) {
	    $clustal_display = $sbeams->makeErrorText( "Error running Clustal: $clustal" );
	  } else {
	    $clustal_display .= get_clustal_display( alignments => $clustal, 
			                                          dup_seqs => \%dup_seqs,
			                                            pepseq => $peptide,
																								coverage => \%coverage,
																  					acc2bioseq_id => \%acc2bioseq_id,
																						         %args );
	 	}
	}
#	  $log->debug( "CompProtein, fasta is " . length( $fasta ) . ", result is " . length( $clustal_display ) );
	return $clustal_display;


}

sub get_clustal_display {

# Passed named args
# alignments => $clustal,            # ref to array of arrayrefs of acc, seq
# $build_seqs{$row[3]}->{$row[2]}->{coverage}->{$covered_posn}++;
	my %args = ( acc_color => '#0090D0',
	              @_  
						 );

	my $display = qq~
	<BR><BR>

	<DIV STYLE="width: 1000px; overflow-x: scroll; scrollbar-arrow-color: blue; scrollbar- face-color: #e7e7e7; scrollbar-3dlight-color: #a0a0a0; scrollbar-darkshadow-color: #888888">
	<FORM METHOD=POST NAME=custom_alignment>
	<TABLE BORDER=0 CELLPADDNG=3>
	~;
	for my $seq ( @{$args{alignments}} ) {
		my $sequence = $seq->[1];
		if ( $seq->[0] eq 'consensus'  ) {
		  $sequence =~ s/ /&nbsp;/g 
		} else {
			$sequence = highlight_sites( seq => $sequence, 
                                   acc => $seq->[0], 
			                             coverage => $args{coverage}->{$seq->[0]}
																 );

			# Poor man's bait coverage!
 	    $sequence =~ s/$args{pepseq}/<\/SPAN><SPAN CLASS=sec_obs_seq_bg_font>$args{pepseq}<\/SPAN>/g;
# 	    $sequence =~ s/$args{pepseq}/<\/SPAN><SPAN CLASS=sec_obs_seq_bg_font>$args{pepseq}<\/SPAN><SPAN CLASS=obs_seq_bg_font>/g;

		}
		my $dup = '';
    if ( $args{dup_seqs}->{$seq->[0]} ) {
			$dup .= "<SUP><BOLD><FONT COLOR=red>$args{dup_seqs}->{$seq->[0]}</FONT></BOLD></SUP>";
		}
		my $checkbox = '';
		unless ( $seq->[0] eq 'consensus' ) {
      if ( !$args{acc2bioseq_id}->{"$seq->[0]"} ) {
        $log->warn( "$seq->[0] has no bioseq_id, can't re-assemble" );
      } else {
		    $checkbox = "<INPUT ID=bioseq_id TYPE=checkbox CHECKED NAME=bioseq_id VALUE=$args{acc2bioseq_id}->{$seq->[0]}></INPUT>";
      }
		}

		$display .= qq~
		<TR><TD>$checkbox </TD>
	      <TD ALIGN=right class=sequence_font>$seq->[0]$dup:</TD>
				<TD NOWRAP=1 class=sequence_font>$sequence</TD>
		</TR>
		~;
	}

  my $toggle_checkbox = $sbeams->get_checkbox_toggle( controller_name => 'alignment_chk',
	                                                        checkbox_name => 'bioseq_id' );

  my $toggle_text = $sbeams->makeInfoText( 'Toggle all checkboxes' );

  # Add field to allow ad hoc addition of proteins.
  my $text = qq~
	  You can add an additional protein or proteins
	to this assembly by inserting their accession
	numbers here as a semicolon-separated list.
	~;

  my $popup = qq~
	$text
    The following accession types should work:
  <BR>
  <BR>
	<ALIGN = RIGHT>
	Human      IPI, ENSP
  <BR>
	Mouse      IPI, ENSMUS
  <BR>
	Yeast      Yxxxxx
  <BR>
	Halo       VNG
  <BR>
	celegans   wormbase acc.
  <BR>
  <BR>
	</ALIGN>

	  Please note that using more sequences and/or 
	sequences that are not very similar will cause 
	the assembly to be slower.  There is a limit of 
	100 proteins in the assembly, but the practical
	limit of aligning dissimilar proteins is much 
	lower.
	~;

  my $pHTML .= $sbeams->getPopupDHTML();
  my $session_key = $sbeams->getRandomString();
  $sbeams->setSessionAttribute( key => $session_key,  value => $popup );

  my $url = "$CGI_BASE_DIR/help_popup.cgi?title=BuildProteinList;session_key=$session_key;email_link=no";

  my $link =<<"  END_LINK";
   <SPAN title='$text - click for more...' class="popup">
   <IMG SRC=$HTML_BASE_DIR/images/greyqmark.gif BORDER=0 ONCLICK="popitup('$url');"></SPAN>
  END_LINK

  # Cache ids to be able to restore!
  my $orig_bioseq_field = '';
  if ( $args{bioseq_id} && !$args{orig_bioseq_id} ) {
    $orig_bioseq_field = "<INPUT TYPE=HIDDEN NAME=orig_bioseq_id VALUE=$args{bioseq_id}></INPUT>";
  } else {
    $orig_bioseq_field = "<INPUT TYPE=HIDDEN NAME=orig_bioseq_id VALUE=$args{orig_bioseq_id}></INPUT>";
  }

	$display .= qq~
	$pHTML
  <TR><TD>$toggle_checkbox</TD><TD ALIGN=left>$toggle_text </TD><TD></TD></TR>
	</TABLE>\n</DIV>
	<BR>

	<TABLE><TR>
	<TD>Add proteins to list</TD>
	<TD BGCOLOR='#E0E0E0'>$link</TD>
	<TD><INPUT TYPE=TEXT NAME=protein_list SIZE=40></TD>
	</TR></TABLE>
	<BR>
	<BR>
	<INPUT TYPE=HIDDEN NAME=pepseq VALUE=$args{pepseq}>
  $orig_bioseq_field
	<INPUT TYPE=SUBMIT VALUE='Align selected sequences'>
	<INPUT TYPE=SUBMIT VALUE='Restore Original' NAME=restore>
	</FORM>
	<BR><BR>
	<H3> Legend </H3>
  Sequence highlighted with blue: <SPAN CLASS=obs_seq_bg_font>PEPTIDE</SPAN> denotes peptides observed in specified build.<BR>
  Sequence highlighted with green: <SPAN CLASS=sec_obs_seq_bg_font>PEPTIDE</SPAN> denotes 'bait' peptide for this set of sequences.<BR>
	~;

	return $display;
}

sub highlight_sites {

# coverage => \%coverage             # ref to hash of per acc coverage 
# seq => $sequence                   # sequence to be processed, a la --A--AB-
# acc => $accession                  # accession of seq to be processed

  my %args = @_;
	my $coverage = $args{coverage};
#	$log->debug( "seq is there , acc is $args{acc}, and coverage is $coverage->{$args{acc}}" );

  my @aa = split( '', $args{seq} );
  my $return_seq = '';
  my $cnt = 0;
	my $in_coverage = 0;
	my $span_closed = 1;
  for my $aa ( @aa ) {
    if ( $aa eq '-' ) {
			if ( $in_coverage && !$span_closed ) {
				$return_seq .= "</span>$aa";
				$span_closed++;
			} else {
				$return_seq .= $aa;
			}
		} else { # it is an amino acid
			if ( $coverage->{$cnt} ) {
				if ( $in_coverage ) { # already in
					if ( $span_closed ) {  # Must have been jumping a --- gap
					  $span_closed = 0;
				    $return_seq .= "<span class=obs_seq_bg_font>$aa";
					} else {
				    $return_seq .= $aa;
					}
				} else {
					$in_coverage++;
					$span_closed = 0;
				  $return_seq .= "<span class=obs_seq_bg_font>$aa";
				}
			} else { # posn not covered!
				if ( $in_coverage ) { # were in, close now
				  $return_seq .= "</span>$aa";
					$in_coverage = 0;
					$span_closed++;
				} else {
				  $return_seq .= $aa;
				}
			}
		  $cnt++;
		}
	}
	if ( $in_coverage && !$span_closed ) {
		$return_seq .= '</span>';
	}
	return $return_seq;
}

