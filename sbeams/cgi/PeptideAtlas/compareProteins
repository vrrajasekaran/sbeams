#!/usr/local/bin/perl

###############################################################################
# $Id$
#
# SBEAMS is Copyright (C) 2000-2021 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
use CGI::Carp qw(fatalsToBrowser croak);
use Data::Dumper;

use lib qw (../../lib/perl);
use vars qw ($q $sbeams $sbeamsMOD $PROG_NAME
             $current_contact_id $current_username $glyco_query_o);
use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;

use SBEAMS::BioLink::Tables;
use SBEAMS::BioLink::MSF;

use SBEAMS::PeptideAtlas;
use SBEAMS::PeptideAtlas::Settings;
use SBEAMS::PeptideAtlas::Tables;
use SBEAMS::PeptideAtlas::ProtInfo;
use SBEAMS::Connection::TabMenu;


###############################################################################
# Global Variables
###############################################################################
#
$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::PeptideAtlas;
$sbeamsMOD->setSBEAMS($sbeams);

$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);

{ # Main 

  # Authenticate or exit
  $current_username = $sbeams->Authenticate(allow_anonymous_access=>1) || exit;

  #### Read in the default input parameters
  my %params;
  $sbeams->parse_input_parameters( q=>$q, parameters_ref=>\%params );
  $sbeams->processStandardParameters(parameters_ref=>\%params);

  ## get project_id to send to HTMLPrinter display
  my $project_id = $sbeams->getCurrent_project_id();

  my $page = $sbeams->getGifSpacer( 800 ) . "<br>\n";

  my $tabMenu = $sbeamsMOD->getTabMenu(
    parameters_ref => \%params,
    program_name => 'GetProtein',
      );
  $page .= "$tabMenu";


  $sbeamsMOD->display_page_header(project_id => $project_id);

  $log->debug( "Begin page:" .time() );
  if ( $params{bioseq_id} || $params{restore} || $params{protein_list} ||
       $params{protein_group_number} || $params{protein_list_id} ) {
    $page .= get_alignment_display( %params );
  } else {
    $page .= $sbeams->makeErrorText( "Missing required parameter bioseq_id or protein_group_number" );
  }
  $log->debug( "Page done:" .time() );

  # Display page
  print $page;
  $sbeamsMOD->display_page_footer();
} # end main


sub get_alignment_display {
  my %args = @_;

  # Content scalar to return
  my $curr_bid = $sbeamsMOD->getCurrentAtlasBuildID( parameters_ref => \%args );

  my @select = $sbeamsMOD->GetBuildSelect( set_onchange => 1,
					   build_id => $curr_bid,
					   form_name => 'compareProteins' );
  my $clustal_display = $select[1];

  $clustal_display .= "<br><p><form method='post' name='compareProteins'>\n";
  for my $arg ( keys( %args ) ) {
    next if $arg =~ /atlas_build_id/;
    $clustal_display .= "<input type='hidden' name='$arg' value='$args{$arg}'>\n";
  }

  $clustal_display .= "$select[0] </form></p>\n";

  my $bioseq_clause = '';
  my $bioseq_name_clause = '';
  if ( $args{decoys} ) {
    if ( $args{decoys} =~ /y/i ) {
      $bioseq_name_clause = "AND biosequence_name LIKE 'DECOY%'";
    } else {
      $bioseq_name_clause = "AND biosequence_name NOT LIKE 'DECOY%'";
    }
  }

  if ( $args{restore} ) {
    # my $ids = $sbeamsMOD->get_mapped_biosequences( build_id => $curr_bid,
    #                                       peptide_sequence => $args{pepseq} );

    $args{bioseq_id} = $args{orig_bioseq_id};
  }

  if ( $args{protein_group_number} ) {

    my $excl = '';
    if ( $args{exclude_ipi} ) {
      $excl .= "AND biosequence_name NOT LIKE 'IPI%'\n";
    }
    if ( $args{exclude_ens} ) {
      $excl .= "AND biosequence_name NOT LIKE 'ENS%'\n";
    }


    my $sql = qq~
      (
	SELECT PID.biosequence_id, BS.biosequence_name
	FROM $TBAT_PROTEIN_IDENTIFICATION PID
	JOIN $TBAT_ATLAS_BUILD AB
	ON (AB.atlas_build_id = PID.atlas_build_id)
	JOIN $TBAT_BIOSEQUENCE BS
	ON (BS.biosequence_id = PID.biosequence_id)
	where AB.atlas_build_id ='$curr_bid' AND
	      PID.protein_group_number = '$args{protein_group_number}'
        $excl
      ) UNION (
	SELECT BR.related_biosequence_id, BS.biosequence_name
	FROM $TBAT_BIOSEQUENCE_RELATIONSHIP BR
	JOIN $TBAT_ATLAS_BUILD AB
	ON (AB.atlas_build_id = BR.atlas_build_id)
	JOIN $TBAT_BIOSEQUENCE BS
	ON (BS.biosequence_id = BR.related_biosequence_id)
	where AB.atlas_build_id ='$curr_bid' AND
	      BR.protein_group_number = '$args{protein_group_number}'
        $excl
      )
      ~;

    my @results = $sbeams->selectSeveralColumns($sql);
    my %proteins;
    # make a hash of biosequence_id to biosequence_name
    for my $result_aref (@results) {
      $proteins{$result_aref->[0]} = $result_aref->[1];
    }
    my @bioseq_ids = keys %proteins;

    # Filter to include only Swiss-Prot IDs if requested.
    my @swiss_prot_ids = ();
    if ( $args{swiss_prot_only} ) {
      my $prot_info = new SBEAMS::PeptideAtlas::ProtInfo;
      $prot_info->setSBEAMS($sbeams);
      my $swiss_bsids_aref = $prot_info->filter_swiss_prot(
	atlas_build_id => $curr_bid,
	protid_aref => \@bioseq_ids,
	  );
      @bioseq_ids = @{$swiss_bsids_aref};
    }

    # Add to whatever additional bioseq_ids (if any) were specified in parameters.
    $clustal_display .= "<b>Highlighting evidence for $proteins{$args{bioseq_id}} , peps $args{pepseq}</b><br>\n" if $args{eval_prot_evidence};
    $args{bioseq_id} .= ',' if ($args{bioseq_id} && @bioseq_ids);
    $args{bioseq_id} .= join( ",", @bioseq_ids);
    #print "<br>bioseq_id = |$args{bioseq_id}|<br>\n";
    my @ids = split (",", $args{bioseq_id});
    @bioseq_ids = @bioseq_ids, @ids;

    my $n_ids = scalar @bioseq_ids;
    if ( $n_ids < 2 ) {
      # if ( !$args{bioseq_id} ) {
      my $errstr = $sbeams->makeErrorText( "Fewer than 2 proteins to align (build $curr_bid, protein group $args{protein_group_number})");
      return ( "$errstr <br><br>  $clustal_display" );
    }
    $log->debug( "Ran protein group query:" .time() );

  } elsif ( $args{protein_list_id} && $args{key_accession} ) {
    my $sql = qq~
    SELECT DISTINCT biosequence_id
      FROM $TBAT_ATLAS_BUILD AB
      JOIN $TBAT_BIOSEQUENCE B 
        ON B.biosequence_set_id = AB.biosequence_set_id
      JOIN peptideatlas.dbo.protein_list_protein PLP
        ON B.biosequence_name = PLP.protein_name
      JOIN peptideatlas.dbo.protein_list PL
        ON PL.protein_list_id = PLP.protein_list_id
      WHERE atlas_build_id = $curr_bid
      AND PL.protein_list_id = $args{protein_list_id}
      AND key_accession = '$args{key_accession}'
    ~;

    my $sth = $sbeams->get_statement_handle( $sql );
    my @bioseq_ids;
    while ( my @row = $sth->fetchrow_array() ) {
      push @bioseq_ids, $row[0];
    }
    $args{bioseq_id} = join( ",", @bioseq_ids);
  }
  $log->debug( "Ran bioseq query:" .time() );
  if ( $args{protein_list} ) {
    $args{protein_list} =~ s/;/,/g;
    my $list_ids = $sbeamsMOD->getBioseqIDsFromProteinList( protein_list => $args{protein_list}, build_id => $curr_bid );
    $args{bioseq_id} = ( !$args{bioseq_id} ) ? $list_ids : 
	( $list_ids ) ? $args{bioseq_id} . ',' . $list_ids : $args{bioseq_id};
    $log->debug( "Ran bioseq_id query:" .time() );
  }


  $clustal_display .= qq~
<a title="show/hide help" onclick="if(document.getElementById('pageinfo').style.display == 'none') document.getElementById('pageinfo').style.display = ''; else document.getElementById('pageinfo').style.display = 'none';" href="#">Page Info and Legend</a>
<div id="pageinfo" style="display: none;">
<p>In the <b>Peptide Mapping</b> section below, peptides for each protein are represented by <span style="background:lightskyblue;">blue</span>, <span style="background:#ffad4e;">orange</span>, and <span style="background:springgreen;">green</span> rectangles as defined in the <b>Legend</b>. Rectangles are proportional to each peptide's length. Peptides for the top protein are displayed in alphabetical order. Additional peptides not mapping to the first protein are added after the first set. Within each block of new peptides, the peptides are in alphabetical-order for that protein.</p>
<p>Red superscript letters <sup><span style='color:red;'>ABCD...</span></sup> after the protein identifiers denote groups of protein entries that are identical in sequence (All the proteins with <span style='color:red;'>A</span> are identical in sequence, etc.)</p>
<p>The <b>Sequence Coverage</b> section below, all relevant proteins are aligned with <a target="_new" href="http://www.clustal.org/omega/">Clustal Omega</a> and all detected peptides are displayed in colors. In the <b>consensus</b> (bottom) row, a * indicates identity across all sequences. Other symbols denote varying degrees of similarity. The controls in and below the Sequence Coverage section may be used to adjust the list of proteins displayed.</p>
  <b>Legend</b><br>
  Sequence highlighted with blue: <span class="obs_seq_bg_font">PEPTIDE</span> denotes peptides <b>observed</b> in specified build.<br>
  Sequence highlighted with green: <span class="sec_obs_seq_bg_font">PEPTIDE</span> denotes '<b>bait</b>' peptide for this set of sequences.<br>
  Sequence highlighted with <span style="background:#ffad4e;">orange</span> denotes a <b>uniquely-mapping</b> peptide <b>within this set of sequences</b>.
</div>
        ~;


  if ( $args{bioseq_id} ) {
    $bioseq_clause = "AND BS.biosequence_id IN ( $args{bioseq_id} )\n";
  }
  my $all_projects = join( ",", $sbeams->getAccessibleProjects() );

  return 'Problem with form data: no biosequences found' unless $bioseq_clause;

  # SQL to fetch bioseqs in them.
  my $sql =<<"  END_SQL";
  SELECT DISTINCT biosequence_name,
  organism_name,
  'search_key_name',
  CAST( biosequence_seq AS VARCHAR(4000) ),
  biosequence_id,
  LEN( CAST(biosequence_seq AS VARCHAR(4000) ) )
  FROM $TBAT_ATLAS_BUILD AB 
	JOIN $TBAT_BIOSEQUENCE_SET BSS ON AB.biosequence_set_id = BSS.biosequence_set_id
	JOIN $TBAT_BIOSEQUENCE BS ON BSS.biosequence_set_id = BS.biosequence_set_id
  JOIN $TB_ORGANISM ORG ON BSS.organism_id = ORG.organism_id
--  LEFT JOIN $TBAT_SEARCH_KEY SK ON SK.resource_name = BS.biosequence_name
--  AND ( search_key_type = 'Full Name'
--	      OR search_key_type = 'Description'
--				OR search_key_type LIKE '%Symbol' )
  WHERE AB.project_id IN ( $all_projects )
  $bioseq_clause
  $bioseq_name_clause
--  AND search_key_type = CASE WHEN organism_name = 'human' THEN 'Full Name'
--                             WHEN organism_name = 'Mouse' THEN 'Full Name'
--                             WHEN organism_name = 'Drosophila' THEN 'Full Name'
--			       WHEN organism_name = 'Yeast' THEN 'Description'
--			  ELSE resource_name
--			       END
  ORDER BY LEN(CAST(biosequence_seq AS VARCHAR(4000) ) ) DESC, CAST(biosequence_seq AS VARCHAR(4000)), biosequence_name DESC

  END_SQL

  my $sth = $sbeams->get_statement_handle( $sql );
  $log->debug( "got big query stmt handle:" .time() );

  # hash of biosequence_ids -> seq or name
  my %bioseq_id2seq;
  my %bioseq_id2name;

  # hash seq <=> accession
  my %seq2acc;
  my %acc2seq;

  # Store acc -> bioseq_id
  my %acc2bioseq_id;

#  # Store organism for each biosequence set
#	my %bss2org;

  # Counter
  my $cnt = 0;

  # array of protein info
  my @all_proteins;
  my %peptide_map;
  $peptide_map{'peptide_list'} = '';
  $peptide_map{'protein_list'} = '';
  my %coverage;
  my $fasta = '';
  my $peptide = $args{pepseq} || 'ZORROFEELTHESTINGOFHISBLADE';

# 0     biosequence_name,
# 1     organism_name,
# 2     search_key_name,
# 3     CAST( biosequence_seq AS VARCHAR(4000) ),
# 4     biosequence_id
# 5     biosequence_set_id


# 0 SELECT DISTINCT biosequence_name,
#	1	organism_name,
#	2	'search_key_name',
#	3	CAST( biosequence_seq AS VARCHAR(4000) ),
#	4	biosequence_id
  my %seen;
  my %coverage;
  my @seqs;
  $log->debug( "loopin:" .time() );
  my %seqtype = ( decoy => 0, fwd => 0 ); 
  while ( my @row = $sth->fetchrow_array() ) {

    # clustal W quietly changes ':' to '_' in accessions.  Should we fix here? 
    my $acc = $row[0];
    $acc =~ s/:/_/g;

    if ( $acc =~ /^DECOY/ ) {
      $seqtype{decoy}++;
    } else {
      $seqtype{fwd}++;
    }

# As of 12/2012 sequences from Uniprot can have varsplic and snp information
# appended to the end of the main sequence. This simply takes the base seq,
# an implementation that includes the variants may come in the future.
    my $seq = $row[3];
    if ( $acc =~ /[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}/ ) {
      my @subseqs = split( /\*/, $row[3] );
      $seq = $subseqs[0];
    }
#		$seq =~ s/[^a-zA-Z]//g;

    next if $seen{$acc};
    $seen{$acc}++;
    push @seqs, $seq;

    $log->debug( "Get build coverage " .time() );
    my $peptide_list = $sbeamsMOD->get_protein_build_coverage( build_id => $curr_bid,
							       biosequence_ids => $row[4] );

    #$clustal_display .= "<br><br>$acc :: <br>";#@{$peptide_list->{$row[4]}}</p>\n";
    $peptide_map{'protein_list'} .= $acc.' '; # preserves order
    for my $psq (@{$peptide_list->{$row[4]}}) {
      if (!$peptide_map{$psq}) {
	$peptide_map{$psq} = 1;
	$peptide_map{'peptide_list'} .= $psq.' '; # preserves order
      }
      else {
        $peptide_map{$psq}++;
      }
      $peptide_map{"$acc$psq"} = 1;
      #$clustal_display .= "$psq<br>";
    }

    $log->debug( "Done.  Now get coverage hash " .time() );
    $coverage{$acc} = $sbeamsMOD->get_coverage_hash(seq => $seq,         
						    peptides => $peptide_list->{$row[4]} ); 
 
    $log->debug( "Done " .time() );
    # Check this out later for dups...
    $seq2acc{$seq} ||= {};
    $seq2acc{$seq}->{$acc}++;

    $bioseq_id2seq{$row[4]} = $seq; 
    $bioseq_id2name{$row[4]} = $acc; 

    $fasta .= ">$acc\n$seq\n";

    $acc2bioseq_id{"$acc"} = $row[4];
    # Clustal W alignment file can only take 30 chars
    my $short_acc = substr( $acc, 0, 30 );
    $acc2bioseq_id{"$short_acc"} = $row[4];
    $coverage{"$short_acc"} = $coverage{$acc};
    $seq2acc{$seq}->{"$short_acc"}++;

    my $acckeys = join( ',', keys( %acc2bioseq_id ) );

    # Cache first seq for each accession, and push onto display
#		unless ( $acc2seq{$row[1]} ) {
#			 $acc2seq{$row[1]} = $seq;
#       # push row info for display
#       push @all_proteins, \@row;
#		}

    $cnt++;
  }
  $log->debug( "Iterated $cnt rows: " .time() );

  # weed out duplicates - not quite working yet?
  my %dup_seqs;
  my $dup_char = 'A';
  for my $seq ( @seqs ) {

    if ( scalar(keys(%{$seq2acc{"$seq"}})) > 1 ) {
      my $skip = 0;
      for my $acc ( keys ( %{$seq2acc{"$seq"}} ) ) {
	if ( $dup_seqs{"$acc"} ) {
	  $skip++;
	  next;
	}
        $dup_seqs{"$acc"} = $dup_char;
      }
      $dup_char++ unless $skip;
    } else {
      my ( $key ) = keys( %{$seq2acc{"$seq"}} );
      $dup_seqs{"$key"} = '&nbsp;';
    }
  }


  # peptide map map
  $clustal_display .= "<br><div class='hoverabletitle'>Peptide Mapping</div>";
  $clustal_display .= "<div style='width: calc(100vw - 180px); overflow-x: auto; border-right: 1px solid #aaa'>\n<table style='border-spacing:0px'>";
  for my $map_prot (split / /, $peptide_map{'protein_list'}) {
    $clustal_display .= "<tr style='border-top: 1px solid #aaa;'>";
    $clustal_display .= "<td class='sequence_font' style='border-top: 1px solid #aaa; border-right: 1px solid #aaa; background-color:#f3f1e4; text-align: right; white-space: nowrap; position:sticky; left: 0px; z-index:95;'>$map_prot";

    if ( $dup_seqs{$map_prot} ) {
      $clustal_display .= "<sup><span style='color:red;'>$dup_seqs{$map_prot}</span></sup>";
    }
    $clustal_display .= "</td><td style='border-top: 1px solid #aaa; white-space: nowrap;'>";

    my $num_uniq = 0;  # might want this...?
    for my $map_pep (split / /, $peptide_map{'peptide_list'}) {
      my $seqlen = length $map_pep;

      $clustal_display .= "<span title='$map_pep' style='width: ${seqlen}px; display: inline-block; ";
      if ($peptide_map{"$map_prot$map_pep"}) {
	$clustal_display .= "height: 11px; background-color:";
        if ($map_pep eq $args{pepseq}) { # bait
          $clustal_display .= "springgreen;";
	}
	elsif ($peptide_map{$map_pep} == 1) { # singly-mapping within this group
	  $clustal_display .= "#ffad4e;";
	  $num_uniq++;
	}
	else {
          $clustal_display .= "lightskyblue;";##d3d1c4;";
	}
      }
      else {
        #$clustal_display .= "";
      }

      $clustal_display .= "'></span>\n";
    }
    $clustal_display .= "</td></tr>\n";
  }
  $clustal_display .= "</table></div>\n";


#	  # Calc coverage for this build/protein combination
#    $build_seqs{$row[3]}->{$row[2]}->{coverage} ||= {};
#		my $posn = $sbeamsMOD->get_site_positions( pattern => $row[5],
#		                                               seq => $bioseq_id2seq{$row[2]} );
#		for my $p ( @$posn ) {
#			for ( my $i = 0; $i < length($row[5]); $i++ ){
#				my $covered_posn = $p + $i;
#				$build_seqs{$row[3]}->{$row[2]}->{coverage}->{$covered_posn}++;
#			}
#		}
#	  # Going to cache with accession for ease of use!
# 		$build_seqs{$row[3]}->{$bioseq_id2name{$row[2]}}->{coverage} = $build_seqs{$row[3]}->{$row[2]}->{coverage};
#
#		$cnt++;
#	}
#	$log->debug( "Iterated $cnt rows: " .time() );

###$@#$@#

  my $MSF = SBEAMS::BioLink::MSF->new();

  $log->debug( "Run alignment: " .time() );
  my $acckeys = join( ',', keys( %acc2bioseq_id ) );

  if ( $cnt > 100 ) {
    $clustal_display = $sbeams->makeErrorText( "Too many sequences to run alignment, skipping" );
  } else {
    #print "$fasta<br>";
    my $clustal = $MSF->runClustalW( sequences => $fasta );
    my $nseqs = scalar @{$clustal};
    #print "nseqs=$nseqs<br>";
    if ( ref $clustal ne 'ARRAY' ) {
      my $rerun_link = '';
      if ( $seqtype{decoy} && $seqtype{fwd} ) {
        my $url = $q->self_url();
        $rerun_link = qq~
&nbsp;        Try re-running clustalW <a href="$url;decoys=no">without DECOY </a> sequences?<br>
&nbsp;        Try re-running clustalW with <a href="$url;decoys=yes"> only DECOY</a> sequences?<br>
        ~;
      }
      $clustal_display = "<br>" . $sbeams->makeErrorText( "Error running Clustal: $clustal" );
      $clustal_display .= "<br> $rerun_link";
    } else {
      $clustal_display .= get_clustal_display( alignments => $clustal, 
					       dup_seqs => \%dup_seqs,
					       pepseq => $peptide,
					       coverage => \%coverage,
					       acc2bioseq_id => \%acc2bioseq_id,
					       %args );
    }
  }
#	  $log->debug( "CompProtein, fasta is " . length( $fasta ) . ", result is " . length( $clustal_display ) );
  return $clustal_display;
}

sub get_clustal_display {
# Passed named args
# alignments => $clustal,            # ref to array of arrayrefs of acc, seq
# $build_seqs{$row[3]}->{$row[2]}->{coverage}->{$covered_posn}++;
  my %args = ( acc_color => '#0090D0', @_ );

  my $display = qq~
	<br><br>
        <div class='hoverabletitle'>Sequence Coverage</div>
	<div style="width: calc(100vw - 180px); overflow-x: auto; border-right: 1px solid #aaa">
	<form method="POST" name="custom_alignment">
	<table style="border-spacing:1px; border:0;">
	~;

  for my $seq ( @{$args{alignments}} ) {
    my $sequence = $seq->[1];
    if ( $seq->[0] eq 'consensus'  ) {
      $sequence =~ s/ /&nbsp;/g 
    } else {
      #my $posn = $sbeamsMOD->get_site_positions( pattern => $args{pepseq}, seq => $sequence );
      $sequence = highlight_sites( seq => $sequence, 
                                   acc => $seq->[0], 
				   coverage => $args{coverage}->{$seq->[0]} );

# Commented section does a more direct 'nesting' of SPANs, but the simple method
# below is sufficient if assumptions are correct.
#      my $pre_posn = '';
#			if ( $posn->[0] ) {
#				$pre_posn = $posn->[0] - 1;
#			}

#      my $post_posn = '';
#			if ( defined $posn->[0] ) {
#				$post_posn = $posn->[0] + length( $args{pepseq} ) + 1;
#			}

#			if ( $post_posn && $args{coverage}->{$seq->[0]}->{$post_posn} ) {
# 	      $sequence =~ s/$args{pepseq}/<\/span><SPAN CLASS=sec_obs_seq_bg_font>$args{pepseq}<\/SPAN><span class=obs_seq_bg_font>/g;
#			} else {
# 	      $sequence =~ s/$args{pepseq}/<\/SPAN><SPAN CLASS=sec_obs_seq_bg_font>$args{pepseq}<\/SPAN>/g;
#			}

      # Poor person's bait coverage!  Assumes that there are no span junctions in 
      # bait sequence.  This is true if the entire thing is in coverage (or out
      # of it, but that should not be possible).
      # TMF 06/14/13: allow multiple bait sequences
      my @pepseqs = split(",", $args{pepseq});
      for my $pepseq (@pepseqs) {
	$sequence =~ s/${pepseq}/<span class="sec_obs_seq_bg_font">$pepseq<\/span>/g;
      }

    }
    my $dup = '';
    if ( $args{dup_seqs}->{$seq->[0]} ) {
      $dup .= "<sup><span style='color:red;'>$args{dup_seqs}->{$seq->[0]}</span></sup>";
    }
    my $checkbox = '';
    unless ( $seq->[0] eq 'consensus' ) {
      if ( !$args{acc2bioseq_id}->{"$seq->[0]"} ) {
        $log->warn( "$seq->[0] has no bioseq_id, can't re-assemble" );
      } else {
	$checkbox = "<input id='bioseq_id' type='checkbox' checked name='bioseq_id' value='$args{acc2bioseq_id}->{$seq->[0]}'></input>";
      }
    }

    $display .= qq~
		<tr>
                <td style="padding:3px; background-color: #f3f1e4; position:sticky; left: 0px; z-index:95;">$checkbox </td>
	        <td style="padding:3px; background-color: #f3f1e4; position:sticky; left: 20px; z-index:95; border-right: 1px solid #aaa; text-align: right;" class="sequence_font">$seq->[0]$dup</td>
		<td style="padding:3px; white-space: nowrap;" class="sequence_font">$sequence</td>
		</tr>
		~;
  }

  my $toggle_checkbox = $sbeams->get_checkbox_toggle( controller_name => 'alignment_chk',
						      checkbox_name => 'bioseq_id' );

  my $toggle_text = $sbeams->makeInfoText( 'Toggle all checkboxes' );

  # Add field to allow ad hoc addition of proteins.
  my $text = qq~
	You can add an additional protein or proteins
	to this assembly by inserting their accession
	numbers here as a semicolon-separated list.
	~;

  my $popup = qq~
	$text
    The following accession types should work:
  <br>
  <br>
	<ALIGN = RIGHT>
	Human      IPI, ENSP
  <br>
	Mouse      IPI, ENSMUS
  <br>
	Yeast      Yxxxxx
  <br>
	Halo       VNG
  <br>
	celegans   wormbase acc.
  <br>
  <br>
	</ALIGN>

	  Please note that using more sequences and/or 
	sequences that are not very similar will cause 
	the assembly to be slower.  There is a limit of 
	100 proteins in the assembly, but the practical
	limit of aligning dissimilar proteins is much 
	lower.
	~;

  my $pHTML .= $sbeams->getPopupDHTML();
  my $session_key = $sbeams->getRandomString();
  $sbeams->setSessionAttribute( key => $session_key,  value => $popup );

  my $url = "$CGI_BASE_DIR/help_popup.cgi?title=BuildProteinList;session_key=$session_key;email_link=no";

  my $link =<<"  END_LINK";
   <span title='$text - click for more...' class="popup">
   <img src="$HTML_BASE_DIR/images/greyqmark.gif" border="0" onclick="popitup('$url');"></span>
  END_LINK

  # Cache ids to be able to restore!
  my $orig_bioseq_field = '';
  if ( $args{bioseq_id} && !$args{orig_bioseq_id} ) {
    $orig_bioseq_field = "<input type='hidden' name='orig_bioseq_id' value='$args{bioseq_id}'></input>";
  } else {
    $orig_bioseq_field = "<input type='hidden' name='orig_bioseq_id' value='$args{orig_bioseq_id}'></input>";
  }
  my $self_url = $q->self_url();
  my $short_url = $sbeams->setShortURL( $self_url );

  $display .= qq~
	$pHTML
  <tr><td style="position:sticky; left: 0px;">$toggle_checkbox</td><td style="position:sticky; left: 20px; text-align:left">$toggle_text </td><td></td></tr>
	</table>\n</div>
	<br>

	Add proteins to list
	<span style='background:#e0e0e0; margin:0px 3px; padding:3px;'>$link</span>
	<input type='text' name='protein_list' size='40'>
	<br>
	<br>
	<input type='hidden' name='pepseq' value='$args{pepseq}'>
  $orig_bioseq_field
	<input type='submit' value='Align selected sequences'>
	<input type='submit' value='Restore Original' name='restore'>
	</form>
	<br><br>
  Save link to recall current <a href='$CGI_BASE_DIR/shortURL?key=$short_url'>sequence alignment</a>.
	~;

  return $display;
}

sub highlight_sites {
# coverage => \%coverage             # ref to hash of per acc coverage 
# seq => $sequence                   # sequence to be processed, a la --A--AB-
# acc => $accession                  # accession of seq to be processed

  my %args = @_;
  my $coverage = $args{coverage};
  #$log->debug( "seq is there , acc is $args{acc}, and coverage is $coverage->{$args{acc}}" );

  my @aa = split( '', $args{seq} );
  my $return_seq = '';
  my $cnt = 0;
  my $in_coverage = 0;
  my $span_closed = 1;
  for my $aa ( @aa ) {
    if ( $aa eq '-' ) {
      if ( $in_coverage && !$span_closed ) {
	$return_seq .= "</span>$aa";
	$span_closed++;
      } else {
	$return_seq .= $aa;
      }
    } else { # it is an amino acid
      if ( $coverage->{$cnt} ) {
	if ( $in_coverage ) { # already in
	  if ( $span_closed ) {  # Must have been jumping a --- gap
	    $span_closed = 0;
	    $return_seq .= "<span class='obs_seq_bg_font'>$aa";
	  } else {
	    $return_seq .= $aa;
	  }
	} else {
	  $in_coverage++;
	  $span_closed = 0;
	  $return_seq .= "<span class='obs_seq_bg_font'>$aa";
	}
      } else { # posn not covered!
	if ( $in_coverage ) { # were in, close now
	  $return_seq .= "</span>$aa";
	  $in_coverage = 0;
	  $span_closed++;
	} else {
	  $return_seq .= $aa;
	}
      }
      $cnt++;
    }
  }
  if ( $in_coverage && !$span_closed ) {
    $return_seq .= '</span>';
  }
  return $return_seq;
}
