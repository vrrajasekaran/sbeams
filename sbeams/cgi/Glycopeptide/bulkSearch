#!/usr/local/bin/perl

###############################################################################
# $Id: Glyco_prediction.cgi 4670 2006-04-22 01:54:05Z dcampbel $
#
# SBEAMS is Copyright (C) 2000-2005 Institute for Systems Biology
# This program is governed by the terms of the GNU General Public License (GPL)
# version 2 as published by the Free Software Foundation.  It is provided
# WITHOUT ANY WARRANTY.  See the full description of GPL terms in the
# LICENSE file distributed with this software.
###############################################################################


###############################################################################
# Get the script set up with everything it will need
###############################################################################
use strict;
use vars qw ($q $sbeams $sbeamsMOD $PROG_NAME
             $current_contact_id $current_username $glyco_query_o);
use lib qw (../../lib/perl);
use CGI::Carp qw(fatalsToBrowser croak);
use Data::Dumper;

use SBEAMS::Connection qw($q $log);
use SBEAMS::Connection::Settings;
use SBEAMS::Connection::Tables;
use SBEAMS::Connection::DataTable;

use SBEAMS::Glycopeptide;
use SBEAMS::Glycopeptide::Settings;
use SBEAMS::Glycopeptide::Tables;

use SBEAMS::Glycopeptide::Get_glyco_seqs;
use SBEAMS::Glycopeptide::Glyco_query;

$sbeams = new SBEAMS::Connection;
$sbeamsMOD = new SBEAMS::Glycopeptide;
$sbeamsMOD->setSBEAMS($sbeams);


$glyco_query_o = new SBEAMS::Glycopeptide::Glyco_query;
$glyco_query_o->setSBEAMS($sbeams);


###############################################################################
# Global Variables
###############################################################################
$PROG_NAME = 'main.cgi';
$sbeams->setSBEAMS_SUBDIR($SBEAMS_SUBDIR);
my $base_url = "$CGI_BASE_DIR/$SBEAMS_SUBDIR/massSearch";


{ # Main 

    # Authenticate or exit
    exit unless ($current_username = $sbeams->Authenticate(
       permitted_work_groups_ref=>['Glycopeptide_user','Glycopeptide_admin', 'Glycopeptide_readonly'],
       # connect_read_only=>1,
       # allow_anonymous_access=>1,
    ));

    #### Read in the default input parameters
    my %params;
    $sbeams->parse_input_parameters( q=>$q, parameters_ref=>\%params );
    $sbeams->processStandardParameters(parameters_ref=>\%params);

    ## get project_id to send to HTMLPrinter display
    my $project_id = $sbeams->getCurrent_project_id();

    my $page = $sbeams->getGifSpacer( 800 ) . "<BR>\n";

    #### Decide what action to take based on information so far
	  if( $params{action} eq 'search') {
      $page .= print_form( \%params );
      $page .= run_search( \%params ); 
    } else {
      $page .= print_form( \%params );
    }

    # Display page
    $sbeamsMOD->display_page_header(project_id => $project_id);
    $sbeams->printStyleSheet();
    print "$page";
		$sbeamsMOD->display_page_footer();

} # end main

sub run_search {
  my $params = shift;
  my $content;
  for my $arg ( qw( id_list id_type ) ) {
    unless ( $params->{$arg} ) {
      $content .= "Missing required parameter: $arg <BR>\n";
      return $content;
    }
  }
#  for my $p ( keys( %$params ) ) { $content .= "$p => " . $params->{$p} . "<BR>\n"; }
  my $id_list = $params->{id_list};
  $id_list =~ s/\s+/ /gm;
  my @ids = split( " ", $id_list );

  my $results = $sbeamsMOD->runBulkSearch( ids => \@ids, %{$params} );
  my $table = SBEAMS::Connection::DataTable->new( BORDER => 0 );
  $table->addRow( ['IPI', 'SwissProt', 'Sequence', 'Prophet', 'Tissues', 'Protein Name' ] );
  $table->setRowAttr( ROWS => [1], BGCOLOR => '#C0D0C0' );
  my $current;
  my $grp_row = 2;
  my $bgcolor = '#FFFFFF';
  for my $peptide ( @$results ) {
    print "Cha cha cha";
    my ( $ipi, 
         $swiss_id,
         $ipi_data_id,
         $seq, 
         $symbol, 
         $protein_name 
         ) = @$peptide;

    $current = $ipi unless $current;

#    $prot = $sbeams->truncateStringWithMouseover( string => $prot, len => 50 );
#    $ipi = "<A HREF='Glyco_prediction.cgi?search_type=IPI Accession Number;action=Show_hits_form;search_term=$ipi' TARGET=prot_details>$ipi</A>";
    $table->addRow( [ $ipi, $swiss_id, $seq, $symbol, $protein_name] );
    unless ( $ipi == $current ) {
      my $current_row = $table->getRowNum();
#      $log->info( "group row is $grp_row, current row is $current_row, bgcolor is $bgcolor" );
      $table->setRowAttr( ROWS => [$grp_row..$current_row - 1], BGCOLOR => $bgcolor );
      $grp_row = $current_row;
      $bgcolor = ( $bgcolor eq '#E0E0E0' ) ? '#FFFFFF' : '#E0E0E0';
      $current = $ipi;
    }
    my $current_row = $table->getRowNum();
    $table->setRowAttr( ROWS => [$grp_row..$current_row], BGCOLOR => $bgcolor );

  }
  $content .= $table->asHTML();
  return $content;
}

sub print_form {
  my $params = shift;
	
	my $content = <<"  END";
  <TABLE>
   <TR CLASS='rev_gray_head'>
    <TD><H1>Search protein list</H1></TD>
   </TR>
   <TR>
    <TD>
    Enter a list of proteins to be searched.  
    </TD>
   </TR>
  </TABLE>
  END

  # Table to hold form elements
  my $f_table = SBEAMS::Connection::DataTable->new( BORDER => 1 );

  # Hashes to hold form labels/fields
  my $input_labels = get_input_labels($params);
  my $input_fields = get_input_fields($params);

  # Loop through and add items to the form table
  for my $key ( qw( id_list id_type ) ) {
    $f_table->addRow(["<B>$input_labels->{$key}</B>", $input_fields->{$key}]); 
  }

  my @buttons = $sbeams->getFormButtons( types => [qw(submit reset)] );
  $f_table->addRow( [join(" ", @buttons)] );

  $f_table->setColAttr( COLS => [1], ROWS => [3], COLSPAN => 2 );
#  $f_table->setColAttr( COLS => [1], ROWS => [1..6], ALIGN => 'RIGHT' );
  $f_table->setColAttr( COLS => [1], ROWS => [3], ALIGN => 'CENTER' );
  $f_table->setColAttr( COLS => [2], ROWS => [1..3], ALIGN => 'LEFT' );

  $content .=<<"  END";
  <FORM NAME=mass_search_form> 
  $f_table 
  <INPUT TYPE=hidden NAME=action VALUE=search></INPUT>
  </FORM>
  END
  return $content;
}

sub get_input_labels {
  my $params = shift;
  my %in = ( id_list => 'Protein List:',
             id_type   => 'Identifier type:',
             );
  
  return \%in;
}

sub get_input_fields {
  my $params = shift;

  my $id_list = $params->{id_list} || '';
  $id_list = "<TEXTAREA ROWS=4 COLS=12 NAME=id_list>$id_list</TEXTAREA>";


#  my $id_ipi = $paramsid_ipi;
#  my $id_swp = '' unless $id_swp;

  my $id_type_radio =<<"  END";
  IPI <INPUT TYPE=radio NAME=id_type VALUE=ipi CHECKED> 
  Swiss Prot <INPUT TYPE=radio NAME=id_type VALUE=swp > 
  END

  my %in = ( 
    id_list   => $id_list,
    id_type   => $id_type_radio,
    );
  return \%in;
}

